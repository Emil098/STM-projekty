/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FAKEUART_H
#define _MOCK_FAKEUART_H

#include "unity.h"
#include "fakeUart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_fakeUart_Init(void);
void mock_fakeUart_Destroy(void);
void mock_fakeUart_Verify(void);




#define get_huart_Ignore() get_huart_CMockIgnore()
void get_huart_CMockIgnore(void);
#define get_huart_StopIgnore() get_huart_CMockStopIgnore()
void get_huart_CMockStopIgnore(void);
#define get_huart_Expect(huart) get_huart_CMockExpect(__LINE__, huart)
void get_huart_CMockExpect(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef* huart);
#define get_huart_ReturnThruPtr_huart(huart) get_huart_CMockReturnMemThruPtr_huart(__LINE__, huart, sizeof(UART_HandleTypeDef))
#define get_huart_ReturnArrayThruPtr_huart(huart, cmock_len) get_huart_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_len * sizeof(*huart))
#define get_huart_ReturnMemThruPtr_huart(huart, cmock_size) get_huart_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_size)
void get_huart_CMockReturnMemThruPtr_huart(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef const* huart, size_t cmock_size);
#define __HAL_UART_CLEAR_OREFLAG_Ignore() __HAL_UART_CLEAR_OREFLAG_CMockIgnore()
void __HAL_UART_CLEAR_OREFLAG_CMockIgnore(void);
#define __HAL_UART_CLEAR_OREFLAG_StopIgnore() __HAL_UART_CLEAR_OREFLAG_CMockStopIgnore()
void __HAL_UART_CLEAR_OREFLAG_CMockStopIgnore(void);
#define __HAL_UART_CLEAR_OREFLAG_Expect(huart) __HAL_UART_CLEAR_OREFLAG_CMockExpect(__LINE__, huart)
void __HAL_UART_CLEAR_OREFLAG_CMockExpect(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef* huart);
#define __HAL_UART_CLEAR_OREFLAG_ReturnThruPtr_huart(huart) __HAL_UART_CLEAR_OREFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, sizeof(UART_HandleTypeDef))
#define __HAL_UART_CLEAR_OREFLAG_ReturnArrayThruPtr_huart(huart, cmock_len) __HAL_UART_CLEAR_OREFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_len * sizeof(*huart))
#define __HAL_UART_CLEAR_OREFLAG_ReturnMemThruPtr_huart(huart, cmock_size) __HAL_UART_CLEAR_OREFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_size)
void __HAL_UART_CLEAR_OREFLAG_CMockReturnMemThruPtr_huart(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef const* huart, size_t cmock_size);
#define __HAL_UART_CLEAR_FEFLAG_Ignore() __HAL_UART_CLEAR_FEFLAG_CMockIgnore()
void __HAL_UART_CLEAR_FEFLAG_CMockIgnore(void);
#define __HAL_UART_CLEAR_FEFLAG_StopIgnore() __HAL_UART_CLEAR_FEFLAG_CMockStopIgnore()
void __HAL_UART_CLEAR_FEFLAG_CMockStopIgnore(void);
#define __HAL_UART_CLEAR_FEFLAG_Expect(huart) __HAL_UART_CLEAR_FEFLAG_CMockExpect(__LINE__, huart)
void __HAL_UART_CLEAR_FEFLAG_CMockExpect(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef* huart);
#define __HAL_UART_CLEAR_FEFLAG_ReturnThruPtr_huart(huart) __HAL_UART_CLEAR_FEFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, sizeof(UART_HandleTypeDef))
#define __HAL_UART_CLEAR_FEFLAG_ReturnArrayThruPtr_huart(huart, cmock_len) __HAL_UART_CLEAR_FEFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_len * sizeof(*huart))
#define __HAL_UART_CLEAR_FEFLAG_ReturnMemThruPtr_huart(huart, cmock_size) __HAL_UART_CLEAR_FEFLAG_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_size)
void __HAL_UART_CLEAR_FEFLAG_CMockReturnMemThruPtr_huart(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef const* huart, size_t cmock_size);
#define __HAL_UART_ENABLE_IT_Ignore() __HAL_UART_ENABLE_IT_CMockIgnore()
void __HAL_UART_ENABLE_IT_CMockIgnore(void);
#define __HAL_UART_ENABLE_IT_StopIgnore() __HAL_UART_ENABLE_IT_CMockStopIgnore()
void __HAL_UART_ENABLE_IT_CMockStopIgnore(void);
#define __HAL_UART_ENABLE_IT_Expect(huart, it) __HAL_UART_ENABLE_IT_CMockExpect(__LINE__, huart, it)
void __HAL_UART_ENABLE_IT_CMockExpect(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef* huart, uint32_t it);
#define __HAL_UART_ENABLE_IT_ReturnThruPtr_huart(huart) __HAL_UART_ENABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, sizeof(UART_HandleTypeDef))
#define __HAL_UART_ENABLE_IT_ReturnArrayThruPtr_huart(huart, cmock_len) __HAL_UART_ENABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_len * sizeof(*huart))
#define __HAL_UART_ENABLE_IT_ReturnMemThruPtr_huart(huart, cmock_size) __HAL_UART_ENABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_size)
void __HAL_UART_ENABLE_IT_CMockReturnMemThruPtr_huart(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef const* huart, size_t cmock_size);
#define __HAL_UART_DISABLE_IT_Ignore() __HAL_UART_DISABLE_IT_CMockIgnore()
void __HAL_UART_DISABLE_IT_CMockIgnore(void);
#define __HAL_UART_DISABLE_IT_StopIgnore() __HAL_UART_DISABLE_IT_CMockStopIgnore()
void __HAL_UART_DISABLE_IT_CMockStopIgnore(void);
#define __HAL_UART_DISABLE_IT_Expect(huart, it) __HAL_UART_DISABLE_IT_CMockExpect(__LINE__, huart, it)
void __HAL_UART_DISABLE_IT_CMockExpect(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef* huart, uint32_t it);
#define __HAL_UART_DISABLE_IT_ReturnThruPtr_huart(huart) __HAL_UART_DISABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, sizeof(UART_HandleTypeDef))
#define __HAL_UART_DISABLE_IT_ReturnArrayThruPtr_huart(huart, cmock_len) __HAL_UART_DISABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_len * sizeof(*huart))
#define __HAL_UART_DISABLE_IT_ReturnMemThruPtr_huart(huart, cmock_size) __HAL_UART_DISABLE_IT_CMockReturnMemThruPtr_huart(__LINE__, huart, cmock_size)
void __HAL_UART_DISABLE_IT_CMockReturnMemThruPtr_huart(UNITY_LINE_TYPE cmock_line, UART_HandleTypeDef const* huart, size_t cmock_size);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
