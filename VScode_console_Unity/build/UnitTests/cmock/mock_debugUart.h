/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_DEBUGUART_H
#define _MOCK_DEBUGUART_H

#include "unity.h"
#include "debugUart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_debugUart_Init(void);
void mock_debugUart_Destroy(void);
void mock_debugUart_Verify(void);




#define dbg_putc_nonblock_IgnoreAndReturn(cmock_retval) dbg_putc_nonblock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dbg_putc_nonblock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dbg_putc_nonblock_StopIgnore() dbg_putc_nonblock_CMockStopIgnore()
void dbg_putc_nonblock_CMockStopIgnore(void);
#define dbg_putc_nonblock_ExpectAndReturn(d, cmock_retval) dbg_putc_nonblock_CMockExpectAndReturn(__LINE__, d, cmock_retval)
void dbg_putc_nonblock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8 d, bool cmock_to_return);
#define dbg_getc_IgnoreAndReturn(cmock_retval) dbg_getc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dbg_getc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dbg_getc_StopIgnore() dbg_getc_CMockStopIgnore()
void dbg_getc_CMockStopIgnore(void);
#define dbg_getc_ExpectAndReturn(d, cmock_retval) dbg_getc_CMockExpectAndReturn(__LINE__, d, cmock_retval)
void dbg_getc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8* d, bool cmock_to_return);
#define dbg_getc_ReturnThruPtr_d(d) dbg_getc_CMockReturnMemThruPtr_d(__LINE__, d, sizeof(u8))
#define dbg_getc_ReturnArrayThruPtr_d(d, cmock_len) dbg_getc_CMockReturnMemThruPtr_d(__LINE__, d, cmock_len * sizeof(*d))
#define dbg_getc_ReturnMemThruPtr_d(d, cmock_size) dbg_getc_CMockReturnMemThruPtr_d(__LINE__, d, cmock_size)
void dbg_getc_CMockReturnMemThruPtr_d(UNITY_LINE_TYPE cmock_line, u8 const* d, size_t cmock_size);
#define dbg_getstr_IgnoreAndReturn(cmock_retval) dbg_getstr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dbg_getstr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define dbg_getstr_StopIgnore() dbg_getstr_CMockStopIgnore()
void dbg_getstr_CMockStopIgnore(void);
#define dbg_getstr_ExpectAndReturn(str, len, cmock_retval) dbg_getstr_CMockExpectAndReturn(__LINE__, str, len, cmock_retval)
void dbg_getstr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8* str, int len, int cmock_to_return);
#define dbg_getstr_ReturnThruPtr_str(str) dbg_getstr_CMockReturnMemThruPtr_str(__LINE__, str, sizeof(u8))
#define dbg_getstr_ReturnArrayThruPtr_str(str, cmock_len) dbg_getstr_CMockReturnMemThruPtr_str(__LINE__, str, cmock_len * sizeof(*str))
#define dbg_getstr_ReturnMemThruPtr_str(str, cmock_size) dbg_getstr_CMockReturnMemThruPtr_str(__LINE__, str, cmock_size)
void dbg_getstr_CMockReturnMemThruPtr_str(UNITY_LINE_TYPE cmock_line, u8 const* str, size_t cmock_size);
#define debug_UART_irq_Ignore() debug_UART_irq_CMockIgnore()
void debug_UART_irq_CMockIgnore(void);
#define debug_UART_irq_StopIgnore() debug_UART_irq_CMockStopIgnore()
void debug_UART_irq_CMockStopIgnore(void);
#define debug_UART_irq_Expect() debug_UART_irq_CMockExpect(__LINE__)
void debug_UART_irq_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define debug_init_Ignore() debug_init_CMockIgnore()
void debug_init_CMockIgnore(void);
#define debug_init_StopIgnore() debug_init_CMockStopIgnore()
void debug_init_CMockStopIgnore(void);
#define debug_init_Expect() debug_init_CMockExpect(__LINE__)
void debug_init_CMockExpect(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
