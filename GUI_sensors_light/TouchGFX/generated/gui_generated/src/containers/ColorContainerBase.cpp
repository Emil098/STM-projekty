/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/ColorContainerBase.hpp>
#include <images/BitmapDatabase.hpp>

ColorContainerBase::ColorContainerBase() :
    ColorSelected1Callback(0),
    radioButtonSelectedCallback(this, &ColorContainerBase::radioButtonSelectedCallbackHandler)
{
    setWidth(150);
    setHeight(250);
    radioButtonColors.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    radioGreen.setXY(100, 0);
    radioGreen.setBitmaps(touchgfx::Bitmap(BITMAP_GREENRELREL_ID), touchgfx::Bitmap(BITMAP_GREENRELPRE_ID), touchgfx::Bitmap(BITMAP_GREENSELREL_ID), touchgfx::Bitmap(BITMAP_GREENSELPRE_ID));
    radioGreen.setSelected(false);
    radioGreen.setDeselectionEnabled(false);
    radioButtonColors.add(radioGreen);
    add(radioGreen);

    radioDeepBlueSky.setXY(100, 50);
    radioDeepBlueSky.setBitmaps(touchgfx::Bitmap(BITMAP_DEEPSKYBLUERELREL_ID), touchgfx::Bitmap(BITMAP_DEEPSKYBLUERELPRE_ID), touchgfx::Bitmap(BITMAP_DEEPSKYBLUESELREL_ID), touchgfx::Bitmap(BITMAP_DEEPSKYBLUESELPRE_ID));
    radioDeepBlueSky.setSelected(false);
    radioDeepBlueSky.setDeselectionEnabled(false);
    radioButtonColors.add(radioDeepBlueSky);
    add(radioDeepBlueSky);

    radioSpringGreen.setXY(100, 100);
    radioSpringGreen.setBitmaps(touchgfx::Bitmap(BITMAP_SPRINGGREENRELREL_ID), touchgfx::Bitmap(BITMAP_SPRINGGREENRELPRE_ID), touchgfx::Bitmap(BITMAP_SPRINGGREENSELREL_ID), touchgfx::Bitmap(BITMAP_SPRINGGREENSELPRE_ID));
    radioSpringGreen.setSelected(false);
    radioSpringGreen.setDeselectionEnabled(false);
    radioButtonColors.add(radioSpringGreen);
    add(radioSpringGreen);

    radioLawnGreen.setXY(100, 150);
    radioLawnGreen.setBitmaps(touchgfx::Bitmap(BITMAP_LAWNGREENRELREL_ID), touchgfx::Bitmap(BITMAP_LAWNGREENRELPRE_ID), touchgfx::Bitmap(BITMAP_LAWNGREENSELREL_ID), touchgfx::Bitmap(BITMAP_LAWNGREENSELPRE_ID));
    radioLawnGreen.setSelected(false);
    radioLawnGreen.setDeselectionEnabled(false);
    radioButtonColors.add(radioLawnGreen);
    add(radioLawnGreen);

    radioYellow.setXY(100, 200);
    radioYellow.setBitmaps(touchgfx::Bitmap(BITMAP_YELLOWRELREL_ID), touchgfx::Bitmap(BITMAP_YELLOWRELPRE_ID), touchgfx::Bitmap(BITMAP_YELLOWSELREL_ID), touchgfx::Bitmap(BITMAP_YELLOWSELPRE_ID));
    radioYellow.setSelected(false);
    radioYellow.setDeselectionEnabled(false);
    radioButtonColors.add(radioYellow);
    add(radioYellow);

    radioBlue.setXY(50, 0);
    radioBlue.setBitmaps(touchgfx::Bitmap(BITMAP_BLUERELREL_ID), touchgfx::Bitmap(BITMAP_BLUERELPRE_ID), touchgfx::Bitmap(BITMAP_BLUESELREL_ID), touchgfx::Bitmap(BITMAP_BLUESELPRE_ID));
    radioBlue.setSelected(false);
    radioBlue.setDeselectionEnabled(false);
    radioButtonColors.add(radioBlue);
    add(radioBlue);

    radioDodgerBlue.setXY(50, 50);
    radioDodgerBlue.setBitmaps(touchgfx::Bitmap(BITMAP_DODGERBLUERELREL_ID), touchgfx::Bitmap(BITMAP_DODGERBLUERELPRE_ID), touchgfx::Bitmap(BITMAP_DODGERBLUESELREL_ID), touchgfx::Bitmap(BITMAP_DODGERBLUESELPRE_ID));
    radioDodgerBlue.setSelected(false);
    radioDodgerBlue.setDeselectionEnabled(false);
    radioButtonColors.add(radioDodgerBlue);
    add(radioDodgerBlue);

    radioViolet.setXY(50, 100);
    radioViolet.setBitmaps(touchgfx::Bitmap(BITMAP_VIOLETRELREL_ID), touchgfx::Bitmap(BITMAP_VIOLETRELPRE_ID), touchgfx::Bitmap(BITMAP_VIOLETSELREL_ID), touchgfx::Bitmap(BITMAP_VIOLETSELPRE_ID));
    radioViolet.setSelected(false);
    radioViolet.setDeselectionEnabled(false);
    radioButtonColors.add(radioViolet);
    add(radioViolet);

    radioMagenta.setXY(50, 150);
    radioMagenta.setBitmaps(touchgfx::Bitmap(BITMAP_MAGENTARELREL_ID), touchgfx::Bitmap(BITMAP_MAGENTARELPRE_ID), touchgfx::Bitmap(BITMAP_MAGENTASELREL_ID), touchgfx::Bitmap(BITMAP_MAGENTASELPRE_ID));
    radioMagenta.setSelected(false);
    radioMagenta.setDeselectionEnabled(false);
    radioButtonColors.add(radioMagenta);
    add(radioMagenta);

    radioPurple.setXY(50, 200);
    radioPurple.setBitmaps(touchgfx::Bitmap(BITMAP_PURPLERELREL_ID), touchgfx::Bitmap(BITMAP_PURPLERELPRE_ID), touchgfx::Bitmap(BITMAP_PURPLESELREL_ID), touchgfx::Bitmap(BITMAP_PURPLESELPRE_ID));
    radioPurple.setSelected(false);
    radioPurple.setDeselectionEnabled(false);
    radioButtonColors.add(radioPurple);
    add(radioPurple);

    radioPink.setXY(0, 200);
    radioPink.setBitmaps(touchgfx::Bitmap(BITMAP_PINKRELREL_ID), touchgfx::Bitmap(BITMAP_PINKRELPRE_ID), touchgfx::Bitmap(BITMAP_PINKSELREL_ID), touchgfx::Bitmap(BITMAP_PINKSELPRE_ID));
    radioPink.setSelected(false);
    radioPink.setDeselectionEnabled(false);
    radioButtonColors.add(radioPink);
    add(radioPink);

    radioOrange.setXY(0, 150);
    radioOrange.setBitmaps(touchgfx::Bitmap(BITMAP_ORANGERELREL_ID), touchgfx::Bitmap(BITMAP_ORANGERELPRE_ID), touchgfx::Bitmap(BITMAP_ORANGESELREL_ID), touchgfx::Bitmap(BITMAP_ORANGESELPRE_ID));
    radioOrange.setSelected(false);
    radioOrange.setDeselectionEnabled(false);
    radioButtonColors.add(radioOrange);
    add(radioOrange);

    radioOrangeRed.setXY(0, 100);
    radioOrangeRed.setBitmaps(touchgfx::Bitmap(BITMAP_ORANGEREDRELREL_ID), touchgfx::Bitmap(BITMAP_ORANGEREDRELPRE_ID), touchgfx::Bitmap(BITMAP_ORANGEREDSELREL_ID), touchgfx::Bitmap(BITMAP_ORANGEREDSELPRE_ID));
    radioOrangeRed.setSelected(false);
    radioOrangeRed.setDeselectionEnabled(false);
    radioButtonColors.add(radioOrangeRed);
    add(radioOrangeRed);

    radioCrimson.setXY(0, 50);
    radioCrimson.setBitmaps(touchgfx::Bitmap(BITMAP_CRIMSONRELREL_ID), touchgfx::Bitmap(BITMAP_CRIMSONRELPRE_ID), touchgfx::Bitmap(BITMAP_CRIMSONSELREL_ID), touchgfx::Bitmap(BITMAP_CRIMSONSELPRE_ID));
    radioCrimson.setSelected(false);
    radioCrimson.setDeselectionEnabled(false);
    radioButtonColors.add(radioCrimson);
    add(radioCrimson);

    radioRed.setXY(0, 0);
    radioRed.setBitmaps(touchgfx::Bitmap(BITMAP_REDRELREL_ID), touchgfx::Bitmap(BITMAP_REDRELPRE_ID), touchgfx::Bitmap(BITMAP_REDSELREL_ID), touchgfx::Bitmap(BITMAP_REDSELPRE_ID));
    radioRed.setSelected(false);
    radioRed.setDeselectionEnabled(false);
    radioButtonColors.add(radioRed);
    add(radioRed);
}

ColorContainerBase::~ColorContainerBase()
{

}

void ColorContainerBase::initialize()
{

}

void ColorContainerBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioGreen)
    {
        //green
        //When radioGreen selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x008000);
    }
    if (&src == &radioDeepBlueSky)
    {
        //deepBlueSky
        //When radioDeepBlueSky selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x00BFFF);
    }
    if (&src == &radioSpringGreen)
    {
        //SpringGreen
        //When radioSpringGreen selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x00FF7F);
    }
    if (&src == &radioLawnGreen)
    {
        //LawnGreen
        //When radioLawnGreen selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x7CFC00);
    }
    if (&src == &radioYellow)
    {
        //Yellow
        //When radioYellow selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFFFF00);
    }
    if (&src == &radioBlue)
    {
        //Blue
        //When radioBlue selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x0000FF);
    }
    if (&src == &radioDodgerBlue)
    {
        //DodgerBlue
        //When radioDodgerBlue selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x1E90FF);
    }
    if (&src == &radioViolet)
    {
        //Violet
        //When radioViolet selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xEE82EE);
    }
    if (&src == &radioMagenta)
    {
        //Magenta
        //When radioMagenta selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFF00FF);
    }
    if (&src == &radioPurple)
    {
        //Purple
        //When radioPurple selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0x800080);
    }
    if (&src == &radioPink)
    {
        //Pink
        //When radioPink selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFF1493);
    }
    if (&src == &radioOrange)
    {
        //Orange
        //When radioOrange selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFFA500);
    }
    if (&src == &radioOrangeRed)
    {
        //OrangeRed
        //When radioOrangeRed selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFF4500);
    }
    if (&src == &radioCrimson)
    {
        //Crimson
        //When radioCrimson selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xDC143C);
    }
    if (&src == &radioRed)
    {
        //Red
        //When radioRed selected call ColorSelected on ColorContainer
        //Call ColorSelected
        ColorSelected(0xFF0000);
    }
}

void ColorContainerBase::ColorSelected(uint32_t value)
{
    //NewColorInteraction
    //When ColorSelected is called emit ColorSelected1 callback
    //Emit callback
    emitColorSelected1Callback(value);
}
