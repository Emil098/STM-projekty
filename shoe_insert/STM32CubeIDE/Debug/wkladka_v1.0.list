
wkladka_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08009050  08009050  00019050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009488  08009488  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009490  08009490  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da4  20000100  08009598  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ea4  08009598  00021ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019852  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef7  00000000  00000000  0003997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  0003eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8d  00000000  00000000  00040358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b724  00000000  00000000  000590e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916bf  00000000  00000000  00074809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105ec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006760  00000000  00000000  00105f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000100 	.word	0x20000100
 800015c:	00000000 	.word	0x00000000
 8000160:	08009038 	.word	0x08009038

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000104 	.word	0x20000104
 800017c:	08009038 	.word	0x08009038

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__gedf2>:
 800051c:	f04f 3cff 	mov.w	ip, #4294967295
 8000520:	e006      	b.n	8000530 <__cmpdf2+0x4>
 8000522:	bf00      	nop

08000524 <__ledf2>:
 8000524:	f04f 0c01 	mov.w	ip, #1
 8000528:	e002      	b.n	8000530 <__cmpdf2+0x4>
 800052a:	bf00      	nop

0800052c <__cmpdf2>:
 800052c:	f04f 0c01 	mov.w	ip, #1
 8000530:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	bf18      	it	ne
 8000542:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000546:	d01b      	beq.n	8000580 <__cmpdf2+0x54>
 8000548:	b001      	add	sp, #4
 800054a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800054e:	bf0c      	ite	eq
 8000550:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000554:	ea91 0f03 	teqne	r1, r3
 8000558:	bf02      	ittt	eq
 800055a:	ea90 0f02 	teqeq	r0, r2
 800055e:	2000      	moveq	r0, #0
 8000560:	4770      	bxeq	lr
 8000562:	f110 0f00 	cmn.w	r0, #0
 8000566:	ea91 0f03 	teq	r1, r3
 800056a:	bf58      	it	pl
 800056c:	4299      	cmppl	r1, r3
 800056e:	bf08      	it	eq
 8000570:	4290      	cmpeq	r0, r2
 8000572:	bf2c      	ite	cs
 8000574:	17d8      	asrcs	r0, r3, #31
 8000576:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800057a:	f040 0001 	orr.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000588:	d102      	bne.n	8000590 <__cmpdf2+0x64>
 800058a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800058e:	d107      	bne.n	80005a0 <__cmpdf2+0x74>
 8000590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	d1d6      	bne.n	8000548 <__cmpdf2+0x1c>
 800059a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800059e:	d0d3      	beq.n	8000548 <__cmpdf2+0x1c>
 80005a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__aeabi_cdrcmple>:
 80005a8:	4684      	mov	ip, r0
 80005aa:	4610      	mov	r0, r2
 80005ac:	4662      	mov	r2, ip
 80005ae:	468c      	mov	ip, r1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4663      	mov	r3, ip
 80005b4:	e000      	b.n	80005b8 <__aeabi_cdcmpeq>
 80005b6:	bf00      	nop

080005b8 <__aeabi_cdcmpeq>:
 80005b8:	b501      	push	{r0, lr}
 80005ba:	f7ff ffb7 	bl	800052c <__cmpdf2>
 80005be:	2800      	cmp	r0, #0
 80005c0:	bf48      	it	mi
 80005c2:	f110 0f00 	cmnmi.w	r0, #0
 80005c6:	bd01      	pop	{r0, pc}

080005c8 <__aeabi_dcmpeq>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff fff4 	bl	80005b8 <__aeabi_cdcmpeq>
 80005d0:	bf0c      	ite	eq
 80005d2:	2001      	moveq	r0, #1
 80005d4:	2000      	movne	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmplt>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffea 	bl	80005b8 <__aeabi_cdcmpeq>
 80005e4:	bf34      	ite	cc
 80005e6:	2001      	movcc	r0, #1
 80005e8:	2000      	movcs	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmple>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffe0 	bl	80005b8 <__aeabi_cdcmpeq>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpge>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffce 	bl	80005a8 <__aeabi_cdrcmple>
 800060c:	bf94      	ite	ls
 800060e:	2001      	movls	r0, #1
 8000610:	2000      	movhi	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_dcmpgt>:
 8000618:	f84d ed08 	str.w	lr, [sp, #-8]!
 800061c:	f7ff ffc4 	bl	80005a8 <__aeabi_cdrcmple>
 8000620:	bf34      	ite	cc
 8000622:	2001      	movcc	r0, #1
 8000624:	2000      	movcs	r0, #0
 8000626:	f85d fb08 	ldr.w	pc, [sp], #8
 800062a:	bf00      	nop

0800062c <__aeabi_frsub>:
 800062c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000630:	e002      	b.n	8000638 <__addsf3>
 8000632:	bf00      	nop

08000634 <__aeabi_fsub>:
 8000634:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000638 <__addsf3>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	bf1f      	itttt	ne
 800063c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000640:	ea92 0f03 	teqne	r2, r3
 8000644:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000648:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064c:	d06a      	beq.n	8000724 <__addsf3+0xec>
 800064e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000652:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000656:	bfc1      	itttt	gt
 8000658:	18d2      	addgt	r2, r2, r3
 800065a:	4041      	eorgt	r1, r0
 800065c:	4048      	eorgt	r0, r1
 800065e:	4041      	eorgt	r1, r0
 8000660:	bfb8      	it	lt
 8000662:	425b      	neglt	r3, r3
 8000664:	2b19      	cmp	r3, #25
 8000666:	bf88      	it	hi
 8000668:	4770      	bxhi	lr
 800066a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000672:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000676:	bf18      	it	ne
 8000678:	4240      	negne	r0, r0
 800067a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000682:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4249      	negne	r1, r1
 800068a:	ea92 0f03 	teq	r2, r3
 800068e:	d03f      	beq.n	8000710 <__addsf3+0xd8>
 8000690:	f1a2 0201 	sub.w	r2, r2, #1
 8000694:	fa41 fc03 	asr.w	ip, r1, r3
 8000698:	eb10 000c 	adds.w	r0, r0, ip
 800069c:	f1c3 0320 	rsb	r3, r3, #32
 80006a0:	fa01 f103 	lsl.w	r1, r1, r3
 80006a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a8:	d502      	bpl.n	80006b0 <__addsf3+0x78>
 80006aa:	4249      	negs	r1, r1
 80006ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b4:	d313      	bcc.n	80006de <__addsf3+0xa6>
 80006b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ba:	d306      	bcc.n	80006ca <__addsf3+0x92>
 80006bc:	0840      	lsrs	r0, r0, #1
 80006be:	ea4f 0131 	mov.w	r1, r1, rrx
 80006c2:	f102 0201 	add.w	r2, r2, #1
 80006c6:	2afe      	cmp	r2, #254	; 0xfe
 80006c8:	d251      	bcs.n	800076e <__addsf3+0x136>
 80006ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006d2:	bf08      	it	eq
 80006d4:	f020 0001 	biceq.w	r0, r0, #1
 80006d8:	ea40 0003 	orr.w	r0, r0, r3
 80006dc:	4770      	bx	lr
 80006de:	0049      	lsls	r1, r1, #1
 80006e0:	eb40 0000 	adc.w	r0, r0, r0
 80006e4:	3a01      	subs	r2, #1
 80006e6:	bf28      	it	cs
 80006e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006ec:	d2ed      	bcs.n	80006ca <__addsf3+0x92>
 80006ee:	fab0 fc80 	clz	ip, r0
 80006f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f6:	ebb2 020c 	subs.w	r2, r2, ip
 80006fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fe:	bfaa      	itet	ge
 8000700:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000704:	4252      	neglt	r2, r2
 8000706:	4318      	orrge	r0, r3
 8000708:	bfbc      	itt	lt
 800070a:	40d0      	lsrlt	r0, r2
 800070c:	4318      	orrlt	r0, r3
 800070e:	4770      	bx	lr
 8000710:	f092 0f00 	teq	r2, #0
 8000714:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000718:	bf06      	itte	eq
 800071a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071e:	3201      	addeq	r2, #1
 8000720:	3b01      	subne	r3, #1
 8000722:	e7b5      	b.n	8000690 <__addsf3+0x58>
 8000724:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000728:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800072c:	bf18      	it	ne
 800072e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000732:	d021      	beq.n	8000778 <__addsf3+0x140>
 8000734:	ea92 0f03 	teq	r2, r3
 8000738:	d004      	beq.n	8000744 <__addsf3+0x10c>
 800073a:	f092 0f00 	teq	r2, #0
 800073e:	bf08      	it	eq
 8000740:	4608      	moveq	r0, r1
 8000742:	4770      	bx	lr
 8000744:	ea90 0f01 	teq	r0, r1
 8000748:	bf1c      	itt	ne
 800074a:	2000      	movne	r0, #0
 800074c:	4770      	bxne	lr
 800074e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000752:	d104      	bne.n	800075e <__addsf3+0x126>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	bf28      	it	cs
 8000758:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000762:	bf3c      	itt	cc
 8000764:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000768:	4770      	bxcc	lr
 800076a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000772:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000776:	4770      	bx	lr
 8000778:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800077c:	bf16      	itet	ne
 800077e:	4608      	movne	r0, r1
 8000780:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000784:	4601      	movne	r1, r0
 8000786:	0242      	lsls	r2, r0, #9
 8000788:	bf06      	itte	eq
 800078a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078e:	ea90 0f01 	teqeq	r0, r1
 8000792:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000796:	4770      	bx	lr

08000798 <__aeabi_ui2f>:
 8000798:	f04f 0300 	mov.w	r3, #0
 800079c:	e004      	b.n	80007a8 <__aeabi_i2f+0x8>
 800079e:	bf00      	nop

080007a0 <__aeabi_i2f>:
 80007a0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	ea5f 0c00 	movs.w	ip, r0
 80007ac:	bf08      	it	eq
 80007ae:	4770      	bxeq	lr
 80007b0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b4:	4601      	mov	r1, r0
 80007b6:	f04f 0000 	mov.w	r0, #0
 80007ba:	e01c      	b.n	80007f6 <__aeabi_l2f+0x2a>

080007bc <__aeabi_ul2f>:
 80007bc:	ea50 0201 	orrs.w	r2, r0, r1
 80007c0:	bf08      	it	eq
 80007c2:	4770      	bxeq	lr
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	e00a      	b.n	80007e0 <__aeabi_l2f+0x14>
 80007ca:	bf00      	nop

080007cc <__aeabi_l2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__aeabi_l2f+0x14>
 80007da:	4240      	negs	r0, r0
 80007dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007e0:	ea5f 0c01 	movs.w	ip, r1
 80007e4:	bf02      	ittt	eq
 80007e6:	4684      	moveq	ip, r0
 80007e8:	4601      	moveq	r1, r0
 80007ea:	2000      	moveq	r0, #0
 80007ec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007f0:	bf08      	it	eq
 80007f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007fa:	fabc f28c 	clz	r2, ip
 80007fe:	3a08      	subs	r2, #8
 8000800:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000804:	db10      	blt.n	8000828 <__aeabi_l2f+0x5c>
 8000806:	fa01 fc02 	lsl.w	ip, r1, r2
 800080a:	4463      	add	r3, ip
 800080c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000810:	f1c2 0220 	rsb	r2, r2, #32
 8000814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000818:	fa20 f202 	lsr.w	r2, r0, r2
 800081c:	eb43 0002 	adc.w	r0, r3, r2
 8000820:	bf08      	it	eq
 8000822:	f020 0001 	biceq.w	r0, r0, #1
 8000826:	4770      	bx	lr
 8000828:	f102 0220 	add.w	r2, r2, #32
 800082c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000830:	f1c2 0220 	rsb	r2, r2, #32
 8000834:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000838:	fa21 f202 	lsr.w	r2, r1, r2
 800083c:	eb43 0002 	adc.w	r0, r3, r2
 8000840:	bf08      	it	eq
 8000842:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000846:	4770      	bx	lr

08000848 <__aeabi_fmul>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d06f      	beq.n	8000940 <__aeabi_fmul+0xf8>
 8000860:	441a      	add	r2, r3
 8000862:	ea80 0c01 	eor.w	ip, r0, r1
 8000866:	0240      	lsls	r0, r0, #9
 8000868:	bf18      	it	ne
 800086a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086e:	d01e      	beq.n	80008ae <__aeabi_fmul+0x66>
 8000870:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000874:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000878:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800087c:	fba0 3101 	umull	r3, r1, r0, r1
 8000880:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000884:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000888:	bf3e      	ittt	cc
 800088a:	0049      	lslcc	r1, r1, #1
 800088c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000890:	005b      	lslcc	r3, r3, #1
 8000892:	ea40 0001 	orr.w	r0, r0, r1
 8000896:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800089a:	2afd      	cmp	r2, #253	; 0xfd
 800089c:	d81d      	bhi.n	80008da <__aeabi_fmul+0x92>
 800089e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a6:	bf08      	it	eq
 80008a8:	f020 0001 	biceq.w	r0, r0, #1
 80008ac:	4770      	bx	lr
 80008ae:	f090 0f00 	teq	r0, #0
 80008b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b6:	bf08      	it	eq
 80008b8:	0249      	lsleq	r1, r1, #9
 80008ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008c2:	3a7f      	subs	r2, #127	; 0x7f
 80008c4:	bfc2      	ittt	gt
 80008c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ce:	4770      	bxgt	lr
 80008d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	3a01      	subs	r2, #1
 80008da:	dc5d      	bgt.n	8000998 <__aeabi_fmul+0x150>
 80008dc:	f112 0f19 	cmn.w	r2, #25
 80008e0:	bfdc      	itt	le
 80008e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e6:	4770      	bxle	lr
 80008e8:	f1c2 0200 	rsb	r2, r2, #0
 80008ec:	0041      	lsls	r1, r0, #1
 80008ee:	fa21 f102 	lsr.w	r1, r1, r2
 80008f2:	f1c2 0220 	rsb	r2, r2, #32
 80008f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80008fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fe:	f140 0000 	adc.w	r0, r0, #0
 8000902:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000906:	bf08      	it	eq
 8000908:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800090c:	4770      	bx	lr
 800090e:	f092 0f00 	teq	r2, #0
 8000912:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000916:	bf02      	ittt	eq
 8000918:	0040      	lsleq	r0, r0, #1
 800091a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091e:	3a01      	subeq	r2, #1
 8000920:	d0f9      	beq.n	8000916 <__aeabi_fmul+0xce>
 8000922:	ea40 000c 	orr.w	r0, r0, ip
 8000926:	f093 0f00 	teq	r3, #0
 800092a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092e:	bf02      	ittt	eq
 8000930:	0049      	lsleq	r1, r1, #1
 8000932:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000936:	3b01      	subeq	r3, #1
 8000938:	d0f9      	beq.n	800092e <__aeabi_fmul+0xe6>
 800093a:	ea41 010c 	orr.w	r1, r1, ip
 800093e:	e78f      	b.n	8000860 <__aeabi_fmul+0x18>
 8000940:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000944:	ea92 0f0c 	teq	r2, ip
 8000948:	bf18      	it	ne
 800094a:	ea93 0f0c 	teqne	r3, ip
 800094e:	d00a      	beq.n	8000966 <__aeabi_fmul+0x11e>
 8000950:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000954:	bf18      	it	ne
 8000956:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800095a:	d1d8      	bne.n	800090e <__aeabi_fmul+0xc6>
 800095c:	ea80 0001 	eor.w	r0, r0, r1
 8000960:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000964:	4770      	bx	lr
 8000966:	f090 0f00 	teq	r0, #0
 800096a:	bf17      	itett	ne
 800096c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000970:	4608      	moveq	r0, r1
 8000972:	f091 0f00 	teqne	r1, #0
 8000976:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800097a:	d014      	beq.n	80009a6 <__aeabi_fmul+0x15e>
 800097c:	ea92 0f0c 	teq	r2, ip
 8000980:	d101      	bne.n	8000986 <__aeabi_fmul+0x13e>
 8000982:	0242      	lsls	r2, r0, #9
 8000984:	d10f      	bne.n	80009a6 <__aeabi_fmul+0x15e>
 8000986:	ea93 0f0c 	teq	r3, ip
 800098a:	d103      	bne.n	8000994 <__aeabi_fmul+0x14c>
 800098c:	024b      	lsls	r3, r1, #9
 800098e:	bf18      	it	ne
 8000990:	4608      	movne	r0, r1
 8000992:	d108      	bne.n	80009a6 <__aeabi_fmul+0x15e>
 8000994:	ea80 0001 	eor.w	r0, r0, r1
 8000998:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800099c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a4:	4770      	bx	lr
 80009a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_fdiv>:
 80009b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b8:	bf1e      	ittt	ne
 80009ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009be:	ea92 0f0c 	teqne	r2, ip
 80009c2:	ea93 0f0c 	teqne	r3, ip
 80009c6:	d069      	beq.n	8000a9c <__aeabi_fdiv+0xec>
 80009c8:	eba2 0203 	sub.w	r2, r2, r3
 80009cc:	ea80 0c01 	eor.w	ip, r0, r1
 80009d0:	0249      	lsls	r1, r1, #9
 80009d2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d6:	d037      	beq.n	8000a48 <__aeabi_fdiv+0x98>
 80009d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009dc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009e0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e8:	428b      	cmp	r3, r1
 80009ea:	bf38      	it	cc
 80009ec:	005b      	lslcc	r3, r3, #1
 80009ee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009f2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f6:	428b      	cmp	r3, r1
 80009f8:	bf24      	itt	cs
 80009fa:	1a5b      	subcs	r3, r3, r1
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a04:	bf24      	itt	cs
 8000a06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a12:	bf24      	itt	cs
 8000a14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a20:	bf24      	itt	cs
 8000a22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	bf18      	it	ne
 8000a2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a32:	d1e0      	bne.n	80009f6 <__aeabi_fdiv+0x46>
 8000a34:	2afd      	cmp	r2, #253	; 0xfd
 8000a36:	f63f af50 	bhi.w	80008da <__aeabi_fmul+0x92>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a40:	bf08      	it	eq
 8000a42:	f020 0001 	biceq.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a50:	327f      	adds	r2, #127	; 0x7f
 8000a52:	bfc2      	ittt	gt
 8000a54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5c:	4770      	bxgt	lr
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	3a01      	subs	r2, #1
 8000a68:	e737      	b.n	80008da <__aeabi_fmul+0x92>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0040      	lsleq	r0, r0, #1
 8000a76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a7a:	3a01      	subeq	r2, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fdiv+0xc2>
 8000a7e:	ea40 000c 	orr.w	r0, r0, ip
 8000a82:	f093 0f00 	teq	r3, #0
 8000a86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	bf02      	ittt	eq
 8000a8c:	0049      	lsleq	r1, r1, #1
 8000a8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a92:	3b01      	subeq	r3, #1
 8000a94:	d0f9      	beq.n	8000a8a <__aeabi_fdiv+0xda>
 8000a96:	ea41 010c 	orr.w	r1, r1, ip
 8000a9a:	e795      	b.n	80009c8 <__aeabi_fdiv+0x18>
 8000a9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aa0:	ea92 0f0c 	teq	r2, ip
 8000aa4:	d108      	bne.n	8000ab8 <__aeabi_fdiv+0x108>
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	f47f af7d 	bne.w	80009a6 <__aeabi_fmul+0x15e>
 8000aac:	ea93 0f0c 	teq	r3, ip
 8000ab0:	f47f af70 	bne.w	8000994 <__aeabi_fmul+0x14c>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e776      	b.n	80009a6 <__aeabi_fmul+0x15e>
 8000ab8:	ea93 0f0c 	teq	r3, ip
 8000abc:	d104      	bne.n	8000ac8 <__aeabi_fdiv+0x118>
 8000abe:	024b      	lsls	r3, r1, #9
 8000ac0:	f43f af4c 	beq.w	800095c <__aeabi_fmul+0x114>
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e76e      	b.n	80009a6 <__aeabi_fmul+0x15e>
 8000ac8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000acc:	bf18      	it	ne
 8000ace:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ad2:	d1ca      	bne.n	8000a6a <__aeabi_fdiv+0xba>
 8000ad4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad8:	f47f af5c 	bne.w	8000994 <__aeabi_fmul+0x14c>
 8000adc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ae0:	f47f af3c 	bne.w	800095c <__aeabi_fmul+0x114>
 8000ae4:	e75f      	b.n	80009a6 <__aeabi_fmul+0x15e>
 8000ae6:	bf00      	nop

08000ae8 <__gesf2>:
 8000ae8:	f04f 3cff 	mov.w	ip, #4294967295
 8000aec:	e006      	b.n	8000afc <__cmpsf2+0x4>
 8000aee:	bf00      	nop

08000af0 <__lesf2>:
 8000af0:	f04f 0c01 	mov.w	ip, #1
 8000af4:	e002      	b.n	8000afc <__cmpsf2+0x4>
 8000af6:	bf00      	nop

08000af8 <__cmpsf2>:
 8000af8:	f04f 0c01 	mov.w	ip, #1
 8000afc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d011      	beq.n	8000b38 <__cmpsf2+0x40>
 8000b14:	b001      	add	sp, #4
 8000b16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b1a:	bf18      	it	ne
 8000b1c:	ea90 0f01 	teqne	r0, r1
 8000b20:	bf58      	it	pl
 8000b22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b26:	bf88      	it	hi
 8000b28:	17c8      	asrhi	r0, r1, #31
 8000b2a:	bf38      	it	cc
 8000b2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b30:	bf18      	it	ne
 8000b32:	f040 0001 	orrne.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	d102      	bne.n	8000b44 <__cmpsf2+0x4c>
 8000b3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b42:	d105      	bne.n	8000b50 <__cmpsf2+0x58>
 8000b44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b48:	d1e4      	bne.n	8000b14 <__cmpsf2+0x1c>
 8000b4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b4e:	d0e1      	beq.n	8000b14 <__cmpsf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cfrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	4661      	mov	r1, ip
 8000b5e:	e7ff      	b.n	8000b60 <__aeabi_cfcmpeq>

08000b60 <__aeabi_cfcmpeq>:
 8000b60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b62:	f7ff ffc9 	bl	8000af8 <__cmpsf2>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	bf48      	it	mi
 8000b6a:	f110 0f00 	cmnmi.w	r0, #0
 8000b6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b70 <__aeabi_fcmpeq>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff fff4 	bl	8000b60 <__aeabi_cfcmpeq>
 8000b78:	bf0c      	ite	eq
 8000b7a:	2001      	moveq	r0, #1
 8000b7c:	2000      	movne	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_fcmplt>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffea 	bl	8000b60 <__aeabi_cfcmpeq>
 8000b8c:	bf34      	ite	cc
 8000b8e:	2001      	movcc	r0, #1
 8000b90:	2000      	movcs	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_fcmple>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffe0 	bl	8000b60 <__aeabi_cfcmpeq>
 8000ba0:	bf94      	ite	ls
 8000ba2:	2001      	movls	r0, #1
 8000ba4:	2000      	movhi	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_fcmpge>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffd2 	bl	8000b58 <__aeabi_cfrcmple>
 8000bb4:	bf94      	ite	ls
 8000bb6:	2001      	movls	r0, #1
 8000bb8:	2000      	movhi	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fcmpgt>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffc8 	bl	8000b58 <__aeabi_cfrcmple>
 8000bc8:	bf34      	ite	cc
 8000bca:	2001      	movcc	r0, #1
 8000bcc:	2000      	movcs	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_f2uiz>:
 8000bd4:	0042      	lsls	r2, r0, #1
 8000bd6:	d20e      	bcs.n	8000bf6 <__aeabi_f2uiz+0x22>
 8000bd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bdc:	d30b      	bcc.n	8000bf6 <__aeabi_f2uiz+0x22>
 8000bde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000be2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000be6:	d409      	bmi.n	8000bfc <__aeabi_f2uiz+0x28>
 8000be8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr
 8000bfc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c00:	d101      	bne.n	8000c06 <__aeabi_f2uiz+0x32>
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	d102      	bne.n	8000c0c <__aeabi_f2uiz+0x38>
 8000c06:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0a:	4770      	bx	lr
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <__aeabi_uldivmod>:
 8000c14:	b953      	cbnz	r3, 8000c2c <__aeabi_uldivmod+0x18>
 8000c16:	b94a      	cbnz	r2, 8000c2c <__aeabi_uldivmod+0x18>
 8000c18:	2900      	cmp	r1, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	2800      	cmpeq	r0, #0
 8000c1e:	bf1c      	itt	ne
 8000c20:	f04f 31ff 	movne.w	r1, #4294967295
 8000c24:	f04f 30ff 	movne.w	r0, #4294967295
 8000c28:	f000 b976 	b.w	8000f18 <__aeabi_idiv0>
 8000c2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c34:	f000 f806 	bl	8000c44 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4770      	bx	lr

08000c44 <__udivmoddi4>:
 8000c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	9e08      	ldr	r6, [sp, #32]
 8000c4a:	460d      	mov	r5, r1
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4688      	mov	r8, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14d      	bne.n	8000cf0 <__udivmoddi4+0xac>
 8000c54:	428a      	cmp	r2, r1
 8000c56:	4694      	mov	ip, r2
 8000c58:	d968      	bls.n	8000d2c <__udivmoddi4+0xe8>
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	b152      	cbz	r2, 8000c76 <__udivmoddi4+0x32>
 8000c60:	fa01 f302 	lsl.w	r3, r1, r2
 8000c64:	f1c2 0120 	rsb	r1, r2, #32
 8000c68:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	ea41 0803 	orr.w	r8, r1, r3
 8000c74:	4094      	lsls	r4, r2
 8000c76:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c7a:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	fb01 8817 	mls	r8, r1, r7, r8
 8000c86:	fb07 f00e 	mul.w	r0, r7, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	4298      	cmp	r0, r3
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x66>
 8000c94:	eb1c 0303 	adds.w	r3, ip, r3
 8000c98:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c9c:	f080 811e 	bcs.w	8000edc <__udivmoddi4+0x298>
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	f240 811b 	bls.w	8000edc <__udivmoddi4+0x298>
 8000ca6:	3f02      	subs	r7, #2
 8000ca8:	4463      	add	r3, ip
 8000caa:	1a1b      	subs	r3, r3, r0
 8000cac:	fbb3 f0f1 	udiv	r0, r3, r1
 8000cb0:	fb01 3310 	mls	r3, r1, r0, r3
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	b2a4      	uxth	r4, r4
 8000cba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x94>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8109 	bcs.w	8000ee0 <__udivmoddi4+0x29c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8106 	bls.w	8000ee0 <__udivmoddi4+0x29c>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	2100      	movs	r1, #0
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa8>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	40d4      	lsrs	r4, r2
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0xc2>
 8000cf4:	2e00      	cmp	r6, #0
 8000cf6:	f000 80ee 	beq.w	8000ed6 <__udivmoddi4+0x292>
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	e9c6 0500 	strd	r0, r5, [r6]
 8000d00:	4608      	mov	r0, r1
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f183 	clz	r1, r3
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x160>
 8000d0e:	42ab      	cmp	r3, r5
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0xd4>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80fc 	bhi.w	8000f10 <__udivmoddi4+0x2cc>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	4698      	mov	r8, r3
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0e2      	beq.n	8000cec <__udivmoddi4+0xa8>
 8000d26:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0xa8>
 8000d2c:	b902      	cbnz	r2, 8000d30 <__udivmoddi4+0xec>
 8000d2e:	deff      	udf	#255	; 0xff
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	f040 8091 	bne.w	8000e5c <__udivmoddi4+0x218>
 8000d3a:	eba1 000c 	sub.w	r0, r1, ip
 8000d3e:	2101      	movs	r1, #1
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d4c:	fb07 0013 	mls	r0, r7, r3, r0
 8000d50:	0c25      	lsrs	r5, r4, #16
 8000d52:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d56:	fb0e f003 	mul.w	r0, lr, r3
 8000d5a:	42a8      	cmp	r0, r5
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x12c>
 8000d5e:	eb1c 0505 	adds.w	r5, ip, r5
 8000d62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x12a>
 8000d68:	42a8      	cmp	r0, r5
 8000d6a:	f200 80ce 	bhi.w	8000f0a <__udivmoddi4+0x2c6>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	1a2d      	subs	r5, r5, r0
 8000d72:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d76:	fb07 5510 	mls	r5, r7, r0, r5
 8000d7a:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d84:	45a6      	cmp	lr, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x156>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x154>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f200 80b6 	bhi.w	8000f04 <__udivmoddi4+0x2c0>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	eba4 040e 	sub.w	r4, r4, lr
 8000d9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da2:	e79e      	b.n	8000ce2 <__udivmoddi4+0x9e>
 8000da4:	f1c1 0720 	rsb	r7, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db2:	fa25 fa07 	lsr.w	sl, r5, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fbba f8f9 	udiv	r8, sl, r9
 8000dbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc2:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dc6:	408d      	lsls	r5, r1
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	431d      	orrs	r5, r3
 8000dce:	fa00 f301 	lsl.w	r3, r0, r1
 8000dd2:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000ddc:	42a0      	cmp	r0, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b8>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dec:	f080 8088 	bcs.w	8000f00 <__udivmoddi4+0x2bc>
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	f240 8085 	bls.w	8000f00 <__udivmoddi4+0x2bc>
 8000df6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfa:	4464      	add	r4, ip
 8000dfc:	1a24      	subs	r4, r4, r0
 8000dfe:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e02:	fb09 4410 	mls	r4, r9, r0, r4
 8000e06:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1e2>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e1c:	d26c      	bcs.n	8000ef8 <__udivmoddi4+0x2b4>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	d96a      	bls.n	8000ef8 <__udivmoddi4+0x2b4>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2a:	fba0 9502 	umull	r9, r5, r0, r2
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	46c8      	mov	r8, r9
 8000e36:	46ae      	mov	lr, r5
 8000e38:	d356      	bcc.n	8000ee8 <__udivmoddi4+0x2a4>
 8000e3a:	d053      	beq.n	8000ee4 <__udivmoddi4+0x2a0>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2d0>
 8000e40:	ebb3 0208 	subs.w	r2, r3, r8
 8000e44:	eb64 040e 	sbc.w	r4, r4, lr
 8000e48:	fa22 f301 	lsr.w	r3, r2, r1
 8000e4c:	fa04 f707 	lsl.w	r7, r4, r7
 8000e50:	431f      	orrs	r7, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c6 7400 	strd	r7, r4, [r6]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa8>
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	f1c2 0120 	rsb	r1, r2, #32
 8000e64:	fa25 f301 	lsr.w	r3, r5, r1
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e70:	4095      	lsls	r5, r2
 8000e72:	430d      	orrs	r5, r1
 8000e74:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e78:	fb07 3311 	mls	r3, r7, r1, r3
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	0c28      	lsrs	r0, r5, #16
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	fb01 f30e 	mul.w	r3, r1, lr
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x260>
 8000e92:	eb1c 0000 	adds.w	r0, ip, r0
 8000e96:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e9a:	d22f      	bcs.n	8000efc <__udivmoddi4+0x2b8>
 8000e9c:	4283      	cmp	r3, r0
 8000e9e:	d92d      	bls.n	8000efc <__udivmoddi4+0x2b8>
 8000ea0:	3902      	subs	r1, #2
 8000ea2:	4460      	add	r0, ip
 8000ea4:	1ac0      	subs	r0, r0, r3
 8000ea6:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eaa:	fb07 0013 	mls	r0, r7, r3, r0
 8000eae:	b2ad      	uxth	r5, r5
 8000eb0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000eb4:	fb03 f00e 	mul.w	r0, r3, lr
 8000eb8:	42a8      	cmp	r0, r5
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x28a>
 8000ebc:	eb1c 0505 	adds.w	r5, ip, r5
 8000ec0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec4:	d216      	bcs.n	8000ef4 <__udivmoddi4+0x2b0>
 8000ec6:	42a8      	cmp	r0, r5
 8000ec8:	d914      	bls.n	8000ef4 <__udivmoddi4+0x2b0>
 8000eca:	3b02      	subs	r3, #2
 8000ecc:	4465      	add	r5, ip
 8000ece:	1a28      	subs	r0, r5, r0
 8000ed0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed4:	e738      	b.n	8000d48 <__udivmoddi4+0x104>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e707      	b.n	8000cec <__udivmoddi4+0xa8>
 8000edc:	462f      	mov	r7, r5
 8000ede:	e6e4      	b.n	8000caa <__udivmoddi4+0x66>
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	e6f9      	b.n	8000cd8 <__udivmoddi4+0x94>
 8000ee4:	454b      	cmp	r3, r9
 8000ee6:	d2a9      	bcs.n	8000e3c <__udivmoddi4+0x1f8>
 8000ee8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef0:	3801      	subs	r0, #1
 8000ef2:	e7a3      	b.n	8000e3c <__udivmoddi4+0x1f8>
 8000ef4:	4643      	mov	r3, r8
 8000ef6:	e7ea      	b.n	8000ece <__udivmoddi4+0x28a>
 8000ef8:	4628      	mov	r0, r5
 8000efa:	e794      	b.n	8000e26 <__udivmoddi4+0x1e2>
 8000efc:	4641      	mov	r1, r8
 8000efe:	e7d1      	b.n	8000ea4 <__udivmoddi4+0x260>
 8000f00:	46d0      	mov	r8, sl
 8000f02:	e77b      	b.n	8000dfc <__udivmoddi4+0x1b8>
 8000f04:	4464      	add	r4, ip
 8000f06:	3802      	subs	r0, #2
 8000f08:	e747      	b.n	8000d9a <__udivmoddi4+0x156>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4465      	add	r5, ip
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x12c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e706      	b.n	8000d22 <__udivmoddi4+0xde>
 8000f14:	4631      	mov	r1, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa8>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <vApplicationGetIdleTaskMemory+0x28>)
 8000f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2280      	movs	r2, #128	; 0x80
 8000f38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	2000011c 	.word	0x2000011c
 8000f48:	200001d0 	.word	0x200001d0

08000f4c <HAL_ADC_ConvCpltCallback>:
void StartBtTask(void const * argument);
void StartLraGyroTask(void const * argument);
void StartSensorsTask(void const * argument);

/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  // I set adc_conv_complete_flag variable to 1 when,
  // HAL_ADC_ConvCpltCallback function is call.
  adc_conv_complete_flag = true;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
  if(lpm)
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d013      	beq.n	8000f8a <HAL_ADC_ConvCpltCallback+0x3e>
  {
    for(uint8_t i=0;i<adc_channel_count;i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e00b      	b.n	8000f80 <HAL_ADC_ConvCpltCallback+0x34>
      if(adc_dma_result[i] > 40)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <HAL_ADC_ConvCpltCallback+0x50>)
 8000f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2b28      	cmp	r3, #40	; 0x28
 8000f74:	d901      	bls.n	8000f7a <HAL_ADC_ConvCpltCallback+0x2e>
        HAL_NVIC_SystemReset();
 8000f76:	f001 fb94 	bl	80026a2 <HAL_NVIC_SystemReset>
    for(uint8_t i=0;i<adc_channel_count;i++)
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dbee      	blt.n	8000f68 <HAL_ADC_ConvCpltCallback+0x1c>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000522 	.word	0x20000522
 8000f98:	20000514 	.word	0x20000514
 8000f9c:	20000518 	.word	0x20000518
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
//  HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, 1);
//  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *) adc_dma_result , adc_channel_count) != HAL_OK)
//  {
//    Error_Handler();
//  }
  if(GPIO_Pin == GPIO_PIN_13 && Haptic_DRV2605_inited())
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb4:	d106      	bne.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x20>
 8000fb6:	f004 fde7 	bl	8005b88 <Haptic_DRV2605_inited>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_GPIO_EXTI_Callback+0x20>
  {
//     Haptic_DRV2605_go();
     Haptic_DRV2605_inited();
 8000fc0:	f004 fde2 	bl	8005b88 <Haptic_DRV2605_inited>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b09c      	sub	sp, #112	; 0x70
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fd9a 	bl	8001b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f885 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 f9d9 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f000 f9b9 	bl	8001354 <MX_DMA_Init>
  MX_ADC_Init();
 8000fe2:	f000 f8cb 	bl	800117c <MX_ADC_Init>
  MX_I2C2_Init();
 8000fe6:	f000 f95d 	bl	80012a4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 f989 	bl	8001300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <main+0xe8>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d103      	bne.n	8001002 <main+0x36>
  {
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8000ffa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ffe:	f002 feef 	bl	8003de0 <HAL_PWR_DisableWakeUpPin>

  assert_param(STAND_SIT_TIMEOUT >= WALK_TIMEOUT);
  assert_param(check_are_calibrated_values_ok() == true);


  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *) adc_dma_result , adc_channel_count) != HAL_OK)
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <main+0xec>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	492c      	ldr	r1, [pc, #176]	; (80010bc <main+0xf0>)
 800100a:	482d      	ldr	r0, [pc, #180]	; (80010c0 <main+0xf4>)
 800100c:	f000 fef8 	bl	8001e00 <HAL_ADC_Start_DMA>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <main+0x4e>
  {
    Error_Handler();
 8001016:	f000 fb25 	bl	8001664 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <main+0xf8>)
 800101c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001020:	461d      	mov	r5, r3
 8001022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001026:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800102e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fc3b 	bl	80068b0 <osThreadCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <main+0xfc>)
 800103e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BtTask */
  osThreadDef(BtTask, StartBtTask, osPriorityNormal, 0, 450);
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <main+0x100>)
 8001042:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BtTaskHandle = osThreadCreate(osThread(BtTask), NULL);
 8001054:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f005 fc28 	bl	80068b0 <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <main+0x104>)
 8001064:	6013      	str	r3, [r2, #0]

  /* definition and creation of LraGyroTask */
  osThreadDef(LraGyroTask, StartLraGyroTask, osPriorityNormal, 0, 128);
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <main+0x108>)
 8001068:	f107 041c 	add.w	r4, r7, #28
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LraGyroTaskHandle = osThreadCreate(osThread(LraGyroTask), NULL);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f005 fc15 	bl	80068b0 <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <main+0x10c>)
 800108a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 256);
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <main+0x110>)
 800108e:	463c      	mov	r4, r7
 8001090:	461d      	mov	r5, r3
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 800109e:	463b      	mov	r3, r7
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 fc04 	bl	80068b0 <osThreadCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <main+0x114>)
 80010ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ae:	f005 fbf8 	bl	80068a2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0xe6>
 80010b4:	40007000 	.word	0x40007000
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000518 	.word	0x20000518
 80010c0:	200003d0 	.word	0x200003d0
 80010c4:	0800907c 	.word	0x0800907c
 80010c8:	20000504 	.word	0x20000504
 80010cc:	08009098 	.word	0x08009098
 80010d0:	20000508 	.word	0x20000508
 80010d4:	080090b4 	.word	0x080090b4
 80010d8:	2000050c 	.word	0x2000050c
 80010dc:	080090d0 	.word	0x080090d0
 80010e0:	20000510 	.word	0x20000510

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b092      	sub	sp, #72	; 0x48
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2234      	movs	r2, #52	; 0x34
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fdfc 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <SystemClock_Config+0x94>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <SystemClock_Config+0x94>)
 8001110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001114:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800112e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fe85 	bl	8003e48 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001144:	f000 fa8e 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2303      	movs	r3, #3
 800114e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f9a1 	bl	80044a8 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800116c:	f000 fa7a 	bl	8001664 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3748      	adds	r7, #72	; 0x48
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40007000 	.word	0x40007000

0800117c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <MX_ADC_Init+0x120>)
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <MX_ADC_Init+0x124>)
 8001190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <MX_ADC_Init+0x120>)
 8001194:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001198:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800119a:	4b40      	ldr	r3, [pc, #256]	; (800129c <MX_ADC_Init+0x120>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a0:	4b3e      	ldr	r3, [pc, #248]	; (800129c <MX_ADC_Init+0x120>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <MX_ADC_Init+0x120>)
 80011a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <MX_ADC_Init+0x120>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_255_APBCLOCKCYCLES;
 80011b4:	4b39      	ldr	r3, [pc, #228]	; (800129c <MX_ADC_Init+0x120>)
 80011b6:	2270      	movs	r2, #112	; 0x70
 80011b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_IDLE_PHASE;
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <MX_ADC_Init+0x120>)
 80011bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c0:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_ADC_Init+0x120>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <MX_ADC_Init+0x120>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 5;
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_ADC_Init+0x120>)
 80011d2:	2205      	movs	r2, #5
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <MX_ADC_Init+0x120>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_ADC_Init+0x120>)
 80011e0:	2210      	movs	r2, #16
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_ADC_Init+0x120>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <MX_ADC_Init+0x120>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <MX_ADC_Init+0x120>)
 80011f4:	f000 fcbe 	bl	8001b74 <HAL_ADC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_ADC_Init+0x86>
  {
    Error_Handler();
 80011fe:	f000 fa31 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001202:	2302      	movs	r3, #2
 8001204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001206:	2301      	movs	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 800120a:	2307      	movs	r3, #7
 800120c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4822      	ldr	r0, [pc, #136]	; (800129c <MX_ADC_Init+0x120>)
 8001214:	f000 fee6 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800121e:	f000 fa21 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001222:	2303      	movs	r3, #3
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001226:	2302      	movs	r3, #2
 8001228:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_ADC_Init+0x120>)
 8001230:	f000 fed8 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 800123a:	f000 fa13 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800123e:	2305      	movs	r3, #5
 8001240:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001242:	2303      	movs	r3, #3
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_ADC_Init+0x120>)
 800124c:	f000 feca 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001256:	f000 fa05 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800125a:	2306      	movs	r3, #6
 800125c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800125e:	2304      	movs	r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_ADC_Init+0x120>)
 8001268:	f000 febc 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC_Init+0xfa>
  {
    Error_Handler();
 8001272:	f000 f9f7 	bl	8001664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001276:	2307      	movs	r3, #7
 8001278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800127a:	2305      	movs	r3, #5
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_ADC_Init+0x120>)
 8001284:	f000 feae 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC_Init+0x116>
  {
    Error_Handler();
 800128e:	f000 f9e9 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200003d0 	.word	0x200003d0
 80012a0:	40012400 	.word	0x40012400

080012a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_I2C2_Init+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_I2C2_Init+0x58>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C2_Init+0x50>)
 80012e2:	f001 fd67 	bl	8002db4 <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 f9ba 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000468 	.word	0x20000468
 80012f8:	40005800 	.word	0x40005800
 80012fc:	000186a0 	.word	0x000186a0

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART1_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800130c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001338:	f003 fd66 	bl	8004e08 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f98f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200004bc 	.word	0x200004bc
 8001350:	40013800 	.word	0x40013800

08001354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_DMA_Init+0x38>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <MX_DMA_Init+0x38>)
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_DMA_Init+0x38>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	210f      	movs	r1, #15
 8001376:	200b      	movs	r0, #11
 8001378:	f001 f969 	bl	800264e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800137c:	200b      	movs	r0, #11
 800137e:	f001 f982 	bl	8002686 <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a63      	ldr	r2, [pc, #396]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b61      	ldr	r3, [pc, #388]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b55      	ldr	r3, [pc, #340]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a51      	ldr	r2, [pc, #324]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <MX_GPIO_Init+0x1a8>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LRA_EN_Pin|LRA_TRG_Pin|LED_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f240 1103 	movw	r1, #259	; 0x103
 800140c:	484b      	ldr	r0, [pc, #300]	; (800153c <MX_GPIO_Init+0x1ac>)
 800140e:	f001 fca1 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BT_KEY_Pin|SENS_EN_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f248 0101 	movw	r1, #32769	; 0x8001
 8001418:	4849      	ldr	r0, [pc, #292]	; (8001540 <MX_GPIO_Init+0x1b0>)
 800141a:	f001 fc9b 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001424:	4846      	ldr	r0, [pc, #280]	; (8001540 <MX_GPIO_Init+0x1b0>)
 8001426:	f001 fc95 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001430:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4840      	ldr	r0, [pc, #256]	; (8001544 <MX_GPIO_Init+0x1b4>)
 8001442:	f001 fb07 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001446:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144c:	2303      	movs	r3, #3
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	483a      	ldr	r0, [pc, #232]	; (8001544 <MX_GPIO_Init+0x1b4>)
 800145c:	f001 fafa 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001460:	2303      	movs	r3, #3
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001464:	2303      	movs	r3, #3
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4835      	ldr	r0, [pc, #212]	; (8001548 <MX_GPIO_Init+0x1b8>)
 8001474:	f001 faee 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin LRA_TRG_Pin LED_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|LRA_TRG_Pin|LED_Pin;
 8001478:	f240 1303 	movw	r3, #259	; 0x103
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	482a      	ldr	r0, [pc, #168]	; (800153c <MX_GPIO_Init+0x1ac>)
 8001492:	f001 fadf 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001496:	f649 0310 	movw	r3, #38928	; 0x9810
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4824      	ldr	r0, [pc, #144]	; (800153c <MX_GPIO_Init+0x1ac>)
 80014ac:	f001 fad2 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_KEY_Pin SENS_EN_Pin BT_RST_Pin */
  GPIO_InitStruct.Pin = BT_KEY_Pin|SENS_EN_Pin|BT_RST_Pin;
 80014b0:	f248 1301 	movw	r3, #33025	; 0x8101
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <MX_GPIO_Init+0x1b0>)
 80014ca:	f001 fac3 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5
                           PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80014ce:	f240 23f6 	movw	r3, #758	; 0x2f6
 80014d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <MX_GPIO_Init+0x1b0>)
 80014e4:	f001 fab6 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <MX_GPIO_Init+0x1b0>)
 8001500:	f001 faa8 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : P_GOOD_Pin */
  GPIO_InitStruct.Pin = P_GOOD_Pin;
 8001504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(P_GOOD_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <MX_GPIO_Init+0x1b0>)
 800151a:	f001 fa9b 	bl	8002a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2105      	movs	r1, #5
 8001522:	2028      	movs	r0, #40	; 0x28
 8001524:	f001 f893 	bl	800264e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001528:	2028      	movs	r0, #40	; 0x28
 800152a:	f001 f8ac 	bl	8002686 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40021400 	.word	0x40021400

0800154c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    lpm = stats.status == HM10_SLEEP_MODE ? true : false;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <StartDefaultTask+0x68>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b07      	cmp	r3, #7
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <StartDefaultTask+0x6c>)
 8001564:	701a      	strb	r2, [r3, #0]

//    if(sleep_mode && !last_cycle_sleep_mode)
    if(lpm)
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <StartDefaultTask+0x6c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f2      	beq.n	8001554 <StartDefaultTask+0x8>
    {
      // as soon as ble enters sleep mode uC need to disable all peripheral and enter standby mode
      HAL_GPIO_WritePin(SENS_EN_GPIO_Port, SENS_EN_Pin, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <StartDefaultTask+0x70>)
 8001576:	f001 fbed 	bl	8002d54 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LRA_EN_GPIO_Port, LRA_EN_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2101      	movs	r1, #1
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <StartDefaultTask+0x74>)
 8001580:	f001 fbe8 	bl	8002d54 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800158a:	480c      	ldr	r0, [pc, #48]	; (80015bc <StartDefaultTask+0x70>)
 800158c:	f001 fbe2 	bl	8002d54 <HAL_GPIO_WritePin>
      HAL_SuspendTick();
 8001590:	f000 fa0e 	bl	80019b0 <HAL_SuspendTick>
      HAL_ADC_Stop_DMA(&hadc);
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <StartDefaultTask+0x78>)
 8001596:	f000 fcc1 	bl	8001f1c <HAL_ADC_Stop_DMA>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <StartDefaultTask+0x7c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <StartDefaultTask+0x7c>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6013      	str	r3, [r2, #0]
      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 80015a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015aa:	f002 fbfd 	bl	8003da8 <HAL_PWR_EnableWakeUpPin>
      HAL_PWR_EnterSTANDBYMode();
 80015ae:	f002 fc33 	bl	8003e18 <HAL_PWR_EnterSTANDBYMode>
    lpm = stats.status == HM10_SLEEP_MODE ? true : false;
 80015b2:	e7cf      	b.n	8001554 <StartDefaultTask+0x8>
 80015b4:	20000010 	.word	0x20000010
 80015b8:	20000514 	.word	0x20000514
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020000 	.word	0x40020000
 80015c4:	200003d0 	.word	0x200003d0
 80015c8:	40007000 	.word	0x40007000

080015cc <StartBtTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBtTask */
void StartBtTask(void const * argument)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBtTask */
//  HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, 1);
  HM10_configure_device();
 80015d4:	f003 fe86 	bl	80052e4 <HM10_configure_device>
  /* Infinite loop */
  for(;;)
  {
    HM10_handle_connection();
 80015d8:	f004 f882 	bl	80056e0 <HM10_handle_connection>
    osDelay(50);
 80015dc:	2032      	movs	r0, #50	; 0x32
 80015de:	f005 f9b3 	bl	8006948 <osDelay>
    HM10_handle_connection();
 80015e2:	e7f9      	b.n	80015d8 <StartBtTask+0xc>

080015e4 <StartLraGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLraGyroTask */
void StartLraGyroTask(void const * argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLraGyroTask */
  /* Infinite loop */

  // enable drv module
  HAL_GPIO_WritePin(LRA_EN_GPIO_Port, LRA_EN_Pin, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2101      	movs	r1, #1
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <StartLraGyroTask+0x34>)
 80015f2:	f001 fbaf 	bl	8002d54 <HAL_GPIO_WritePin>
  osDelay(10);
 80015f6:	200a      	movs	r0, #10
 80015f8:	f005 f9a6 	bl	8006948 <osDelay>
  // initialize drv regs
  Haptic_DRV2605_begin();
 80015fc:	f004 face 	bl	8005b9c <Haptic_DRV2605_begin>
  // initialize lsm regs (to compare step detection)
  lsm_init();
 8001600:	f004 fcee 	bl	8005fe0 <lsm_init>
  for(;;)
  {
    handle_vibration();
 8001604:	f004 fd70 	bl	80060e8 <handle_vibration>
    handle_lsm_steps();
 8001608:	f004 fd28 	bl	800605c <handle_lsm_steps>
    osDelay(500);
 800160c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001610:	f005 f99a 	bl	8006948 <osDelay>
    handle_vibration();
 8001614:	e7f6      	b.n	8001604 <StartLraGyroTask+0x20>
 8001616:	bf00      	nop
 8001618:	40020000 	.word	0x40020000

0800161c <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  HAL_GPIO_WritePin(SENS_EN_GPIO_Port, SENS_EN_Pin, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <StartSensorsTask+0x20>)
 800162c:	f001 fb92 	bl	8002d54 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    sens_handler();
 8001630:	f005 f898 	bl	8006764 <sens_handler>
    osDelay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f005 f987 	bl	8006948 <osDelay>
    sens_handler();
 800163a:	e7f9      	b.n	8001630 <StartSensorsTask+0x14>
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001652:	f000 fa73 	bl	8001b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40011000 	.word	0x40011000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_MspInit+0x64>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_MspInit+0x64>)
 800167c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001680:	6253      	str	r3, [r2, #36]	; 0x24
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_MspInit+0x64>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_MspInit+0x64>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_MspInit+0x64>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_MspInit+0x64>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_MspInit+0x64>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_MspInit+0x64>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6253      	str	r3, [r2, #36]	; 0x24
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_MspInit+0x64>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	210f      	movs	r1, #15
 80016c2:	f06f 0001 	mvn.w	r0, #1
 80016c6:	f000 ffc2 	bl	800264e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a29      	ldr	r2, [pc, #164]	; (800179c <HAL_ADC_MspInit+0xc4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d14b      	bne.n	8001792 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 8001700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_ADC_MspInit+0xc8>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 800172a:	23ec      	movs	r3, #236	; 0xec
 800172c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172e:	2303      	movs	r3, #3
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4819      	ldr	r0, [pc, #100]	; (80017a4 <HAL_ADC_MspInit+0xcc>)
 800173e:	f001 f989 	bl	8002a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_ADC_MspInit+0xd4>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 800175c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001760:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001768:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 800176c:	2220      	movs	r2, #32
 800176e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 8001778:	f000 ff98 	bl	80026ac <HAL_DMA_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8001782:	f7ff ff6f 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 800178a:	645a      	str	r2, [r3, #68]	; 0x44
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_ADC_MspInit+0xd0>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012400 	.word	0x40012400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	20000424 	.word	0x20000424
 80017ac:	40026008 	.word	0x40026008

080017b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_I2C_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d128      	bne.n	8001824 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_I2C_MspInit+0x80>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <HAL_I2C_MspInit+0x80>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_I2C_MspInit+0x80>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <HAL_I2C_MspInit+0x84>)
 8001808:	f001 f924 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_I2C_MspInit+0x80>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_I2C_MspInit+0x80>)
 8001812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001816:	6253      	str	r3, [r2, #36]	; 0x24
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_I2C_MspInit+0x80>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005800 	.word	0x40005800
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d130      	bne.n	80018bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189c:	2307      	movs	r3, #7
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_UART_MspInit+0x94>)
 80018a8:	f001 f8d4 	bl	8002a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2105      	movs	r1, #5
 80018b0:	2025      	movs	r0, #37	; 0x25
 80018b2:	f000 fecc 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b6:	2025      	movs	r0, #37	; 0x25
 80018b8:	f000 fee5 	bl	8002686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_InitTick+0xcc>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a2c      	ldr	r2, [pc, #176]	; (800199c <HAL_InitTick+0xcc>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_InitTick+0xcc>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018fe:	f107 020c 	add.w	r2, r7, #12
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fff1 	bl	80048f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800190e:	f002 ffdb 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8001912:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_InitTick+0xd0>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	3b01      	subs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_InitTick+0xd4>)
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_InitTick+0xd8>)
 8001926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_InitTick+0xd4>)
 800192a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192e:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_InitTick+0xd4>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_InitTick+0xd4>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_InitTick+0xd4>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim11);
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <HAL_InitTick+0xd4>)
 8001944:	f003 f864 	bl	8004a10 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11b      	bne.n	800198e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001956:	4813      	ldr	r0, [pc, #76]	; (80019a4 <HAL_InitTick+0xd4>)
 8001958:	f003 f8a2 	bl	8004aa0 <HAL_TIM_Base_Start_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d111      	bne.n	800198e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM11_IRQn);
 800196a:	201b      	movs	r0, #27
 800196c:	f000 fe8b 	bl	8002686 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	d808      	bhi.n	8001988 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM11_IRQn, TickPriority, 0U);
 8001976:	2200      	movs	r2, #0
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	201b      	movs	r0, #27
 800197c:	f000 fe67 	bl	800264e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0xdc>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e002      	b.n	800198e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800198e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001992:	4618      	mov	r0, r3
 8001994:	3730      	adds	r7, #48	; 0x30
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	20000524 	.word	0x20000524
 80019a8:	40011000 	.word	0x40011000
 80019ac:	20000008 	.word	0x20000008

080019b0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM11 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* Disable TIM11 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim11, TIM_IT_UPDATE);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_SuspendTick+0x1c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_SuspendTick+0x1c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	60da      	str	r2, [r3, #12]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000524 	.word	0x20000524

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA1_Channel1_IRQHandler+0x10>)
 8001a02:	f000 ff48 	bl	8002896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000424 	.word	0x20000424

08001a10 <TIM11_IRQHandler>:

/**
  * @brief This function handles TIM11 global interrupt.
  */
void TIM11_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM11_IRQHandler+0x10>)
 8001a16:	f003 f895 	bl	8004b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM11_IRQn 1 */

  /* USER CODE END TIM11_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000524 	.word	0x20000524

08001a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  // custom uart it handle
  HM10_io_cmd_irq_handler();
 8001a28:	f004 f9b6 	bl	8005d98 <HM10_io_cmd_irq_handler>
  return;
 8001a2c:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001a34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a38:	f001 f9a4 	bl	8002d84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a40:	f001 f9a0 	bl	8002d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f006 f900 	bl	8007c7c <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20008000 	.word	0x20008000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000564 	.word	0x20000564
 8001ab0:	20001ea8 	.word	0x20001ea8

08001ab4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f000 f823 	bl	8001afe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aba:	490c      	ldr	r1, [pc, #48]	; (8001aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ad0:	4c09      	ldr	r4, [pc, #36]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ade:	f006 f8d3 	bl	8007c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae2:	f7ff fa73 	bl	8000fcc <main>
  bx lr
 8001ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001af0:	08009498 	.word	0x08009498
  ldr r2, =_sbss
 8001af4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001af8:	20001ea4 	.word	0x20001ea4

08001afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_IRQHandler>

08001afe <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 fd8f 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f7ff fed8 	bl	80018d0 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e001      	b.n	8001b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b2c:	f7ff fda0 	bl	8001670 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x1c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_IncTick+0x20>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_IncTick+0x1c>)
 8001b4c:	6013      	str	r3, [r2, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000568 	.word	0x20000568
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <HAL_GetTick+0x10>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	20000568 	.word	0x20000568

08001b74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e127      	b.n	8001de4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d115      	bne.n	8001bce <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <HAL_ADC_Init+0x278>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a8d      	ldr	r2, [pc, #564]	; (8001dec <HAL_ADC_Init+0x278>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_ADC_Init+0x278>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fd85 	bl	80016d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80ff 	bne.w	8001dda <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be4:	f023 0302 	bic.w	r3, r3, #2
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_ADC_Init+0x27c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	497c      	ldr	r1, [pc, #496]	; (8001df0 <HAL_ADC_Init+0x27c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c0a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c12:	4619      	mov	r1, r3
 8001c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c18:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001c2e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2302      	movs	r3, #2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c56:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c72:	4313      	orrs	r3, r2
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b40      	cmp	r3, #64	; 0x40
 8001c82:	d04f      	beq.n	8001d24 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c96:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6912      	ldr	r2, [r2, #16]
 8001c9c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001ca0:	d003      	beq.n	8001caa <HAL_ADC_Init+0x136>
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6912      	ldr	r2, [r2, #16]
 8001ca6:	2a01      	cmp	r2, #1
 8001ca8:	d102      	bne.n	8001cb0 <HAL_ADC_Init+0x13c>
 8001caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cae:	e000      	b.n	8001cb2 <HAL_ADC_Init+0x13e>
 8001cb0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001cb2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d125      	bne.n	8001d10 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d114      	bne.n	8001cf8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001cd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	fa92 f2a2 	rbit	r2, r2
 8001ce0:	617a      	str	r2, [r7, #20]
  return result;
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf6:	e00b      	b.n	8001d10 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_ADC_Init+0x280>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_ADC_Init+0x284>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_Init+0x1d6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d119      	bne.n	8001d7e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001d5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	60fa      	str	r2, [r7, #12]
  return result;
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	fa03 f202 	lsl.w	r2, r3, r2
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7c:	e007      	b.n	8001d8e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_ADC_Init+0x288>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	f023 0303 	bic.w	r3, r3, #3
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001db4:	e014      	b.n	8001de0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f023 0312 	bic.w	r3, r3, #18
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3738      	adds	r7, #56	; 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40012700 	.word	0x40012700
 8001df4:	fcfc16ff 	.word	0xfcfc16ff
 8001df8:	c0fff18d 	.word	0xc0fff18d
 8001dfc:	bf80fffe 	.word	0xbf80fffe

08001e00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x1e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e074      	b.n	8001f08 <HAL_ADC_Start_DMA+0x108>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fa2c 	bl	8002284 <ADC_Enable>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d167      	bne.n	8001f06 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	f023 0206 	bic.w	r2, r3, #6
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50
 8001e82:	e002      	b.n	8001e8a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <HAL_ADC_Start_DMA+0x110>)
 8001e98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_ADC_Start_DMA+0x114>)
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_ADC_Start_DMA+0x118>)
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ec2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3358      	adds	r3, #88	; 0x58
 8001ede:	4619      	mov	r1, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f000 fc3a 	bl	800275c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f04:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	080023bf 	.word	0x080023bf
 8001f14:	08002467 	.word	0x08002467
 8001f18:	08002483 	.word	0x08002483

08001f1c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Stop_DMA+0x1a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e03f      	b.n	8001fb6 <HAL_ADC_Stop_DMA+0x9a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f9fc 	bl	800233c <ADC_ConversionStop_Disable>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d12e      	bne.n	8001fac <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d10d      	bne.n	8001f88 <HAL_ADC_Stop_DMA+0x6c>
    {
      HAL_DMA_Abort(hadc->DMA_Handle);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fc53 	bl	800281c <HAL_DMA_Abort>
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001faa:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x20>
 8002000:	2302      	movs	r3, #2
 8002002:	e134      	b.n	800226e <HAL_ADC_ConfigChannel+0x28a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d81c      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b05      	subs	r3, #5
 8002026:	221f      	movs	r2, #31
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	4019      	ands	r1, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b05      	subs	r3, #5
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
 800204c:	e07e      	b.n	800214c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d81c      	bhi.n	8002090 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b23      	subs	r3, #35	; 0x23
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b23      	subs	r3, #35	; 0x23
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
 800208e:	e05d      	b.n	800214c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b12      	cmp	r3, #18
 8002096:	d81c      	bhi.n	80020d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b41      	subs	r3, #65	; 0x41
 80020aa:	221f      	movs	r2, #31
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	639a      	str	r2, [r3, #56]	; 0x38
 80020d0:	e03c      	b.n	800214c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b18      	cmp	r3, #24
 80020d8:	d81c      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b5f      	subs	r3, #95	; 0x5f
 80020ec:	221f      	movs	r2, #31
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4019      	ands	r1, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b5f      	subs	r3, #95	; 0x5f
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
 8002112:	e01b      	b.n	800214c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b7d      	subs	r3, #125	; 0x7d
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b7d      	subs	r3, #125	; 0x7d
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d81a      	bhi.n	800218a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6959      	ldr	r1, [r3, #20]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	4019      	ands	r1, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6898      	ldr	r0, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	fa00 f203 	lsl.w	r2, r0, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	e042      	b.n	8002210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b13      	cmp	r3, #19
 8002190:	d81c      	bhi.n	80021cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	3b1e      	subs	r3, #30
 80021a4:	2207      	movs	r2, #7
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4019      	ands	r1, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6898      	ldr	r0, [r3, #8]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	3b1e      	subs	r3, #30
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e021      	b.n	8002210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b1a      	cmp	r3, #26
 80021d2:	d81c      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68d9      	ldr	r1, [r3, #12]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b3c      	subs	r3, #60	; 0x3c
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4019      	ands	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b3c      	subs	r3, #60	; 0x3c
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	e000      	b.n	8002210 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800220e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b10      	cmp	r3, #16
 8002216:	d003      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800221c:	2b11      	cmp	r3, #17
 800221e:	d121      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_ADC_ConfigChannel+0x294>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_ADC_ConfigChannel+0x294>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_ADC_ConfigChannel+0x294>)
 8002232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002236:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d111      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_ADC_ConfigChannel+0x298>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_ADC_ConfigChannel+0x29c>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9a      	lsrs	r2, r3, #18
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002256:	e002      	b.n	800225e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012700 	.word	0x40012700
 800227c:	20000004 	.word	0x20000004
 8002280:	431bde83 	.word	0x431bde83

08002284 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d043      	beq.n	800232a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <ADC_Enable+0xb0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <ADC_Enable+0xb4>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9a      	lsrs	r2, r3, #18
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80022c6:	e002      	b.n	80022ce <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80022d4:	f7ff fc44 	bl	8001b60 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022da:	e01f      	b.n	800231c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80022dc:	f7ff fc40 	bl	8001b60 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d918      	bls.n	800231c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b40      	cmp	r3, #64	; 0x40
 80022f6:	d011      	beq.n	800231c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d1d8      	bne.n	80022dc <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000004 	.word	0x20000004
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d12e      	bne.n	80023b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002366:	f7ff fbfb 	bl	8001b60 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800236c:	e01b      	b.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800236e:	f7ff fbf7 	bl	8001b60 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d914      	bls.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d10d      	bne.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d0dc      	beq.n	800236e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13d      	bne.n	8002454 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12c      	bne.n	800244c <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d127      	bne.n	800244c <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002414:	2b00      	cmp	r3, #0
 8002416:	d119      	bne.n	800244c <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0220 	bic.w	r2, r2, #32
 8002426:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7fe fd7d 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002452:	e004      	b.n	800245e <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fda2 	bl	8001fbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fd91 	bl	8001fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4906      	ldr	r1, [pc, #24]	; (8002550 <__NVIC_EnableIRQ+0x34>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002610:	f3bf 8f4f 	dsb	sy
}
 8002614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <__NVIC_SystemReset+0x24>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <__NVIC_SystemReset+0x24>)
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_SystemReset+0x28>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002626:	f3bf 8f4f 	dsb	sy
}
 800262a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <__NVIC_SystemReset+0x20>
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	05fa0004 	.word	0x05fa0004

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff39 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002660:	f7ff ff4e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	6978      	ldr	r0, [r7, #20]
 800266c:	f7ff ff9c 	bl	80025a8 <NVIC_EncodePriority>
 8002670:	4602      	mov	r2, r0
 8002672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff6b 	bl	8002554 <__NVIC_SetPriority>
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff41 	bl	800251c <__NVIC_EnableIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80026a6:	f7ff ffb1 	bl	800260c <__NVIC_SystemReset>
	...

080026ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e043      	b.n	8002746 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_DMA_Init+0xa4>)
 80026c6:	4413      	add	r3, r2
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_DMA_Init+0xa8>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	009a      	lsls	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Init+0xac>)
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	bffd9ff8 	.word	0xbffd9ff8
 8002754:	cccccccd 	.word	0xcccccccd
 8002758:	40026000 	.word	0x40026000

0800275c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_DMA_Start_IT+0x20>
 8002778:	2302      	movs	r3, #2
 800277a:	e04b      	b.n	8002814 <HAL_DMA_Start_IT+0xb8>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d13a      	bne.n	8002806 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0201 	bic.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f91d 	bl	80029f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 020e 	orr.w	r2, r2, #14
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e00f      	b.n	80027f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0204 	bic.w	r2, r2, #4
 80027e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 020a 	orr.w	r2, r2, #10
 80027f2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e005      	b.n	8002812 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800280e:	2302      	movs	r3, #2
 8002810:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d008      	beq.n	8002846 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2204      	movs	r2, #4
 8002838:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 020e 	bic.w	r2, r2, #14
 8002854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 021c 	and.w	r2, r3, #28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f202 	lsl.w	r2, r1, r2
 8002878:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 031c 	and.w	r3, r3, #28
 80028b6:	2204      	movs	r2, #4
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d026      	beq.n	8002910 <HAL_DMA_IRQHandler+0x7a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d021      	beq.n	8002910 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0204 	bic.w	r2, r2, #4
 80028e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 021c 	and.w	r2, r3, #28
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2104      	movs	r1, #4
 80028f8:	fa01 f202 	lsl.w	r2, r1, r2
 80028fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d071      	beq.n	80029ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800290e:	e06c      	b.n	80029ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f003 031c 	and.w	r3, r3, #28
 8002918:	2202      	movs	r2, #2
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d02e      	beq.n	8002982 <HAL_DMA_IRQHandler+0xec>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d029      	beq.n	8002982 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020a 	bic.w	r2, r2, #10
 800294a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f003 021c 	and.w	r2, r3, #28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2102      	movs	r1, #2
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d038      	beq.n	80029ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002980:	e033      	b.n	80029ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 031c 	and.w	r3, r3, #28
 800298a:	2208      	movs	r2, #8
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d025      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 020e 	bic.w	r2, r2, #14
 80029ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 021c 	and.w	r2, r3, #28
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
}
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 021c 	and.w	r2, r3, #28
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d108      	bne.n	8002a38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a36:	e007      	b.n	8002a48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6a:	e154      	b.n	8002d16 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8146 	beq.w	8002d10 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d005      	beq.n	8002a9c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d130      	bne.n	8002afe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0201 	and.w	r2, r3, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d017      	beq.n	8002b3a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d123      	bne.n	8002b8e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	6939      	ldr	r1, [r7, #16]
 8002b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0203 	and.w	r2, r3, #3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80a0 	beq.w	8002d10 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_GPIO_Init+0x2e0>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002be8:	4a53      	ldr	r2, [pc, #332]	; (8002d38 <HAL_GPIO_Init+0x2e4>)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	220f      	movs	r2, #15
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d019      	beq.n	8002c48 <HAL_GPIO_Init+0x1f4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_GPIO_Init+0x1f0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00d      	beq.n	8002c40 <HAL_GPIO_Init+0x1ec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2f4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <HAL_GPIO_Init+0x1e8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_GPIO_Init+0x2f8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_GPIO_Init+0x1e4>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e008      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c38:	2305      	movs	r3, #5
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e004      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	4093      	lsls	r3, r2
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c5a:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_GPIO_Init+0x2e4>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c8c:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cb6:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f aea3 	bne.w	8002a6c <HAL_GPIO_Init+0x18>
  }
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f8fe 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fce8 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 fd42 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7fe fd86 	bl	8001b60 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80e0 	bne.w	8003224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	4970      	ldr	r1, [pc, #448]	; (8003230 <HAL_I2C_Master_Transmit+0x1f4>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fc64 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	e0d3      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x50>
 8003088:	2302      	movs	r3, #2
 800308a:	e0cc      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 face 	bl	800369c <I2C_MasterRequestWrite>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003120:	e066      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fd22 	bl	8003b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fd19 	bl	8003c00 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d194      	bne.n	8003122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000

08003238 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7fe fc88 	bl	8001b60 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 8217 	bne.w	800368e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	497c      	ldr	r1, [pc, #496]	; (800345c <HAL_I2C_Master_Receive+0x224>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fb66 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e20a      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Receive+0x50>
 8003284:	2302      	movs	r3, #2
 8003286:	e203      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d007      	beq.n	80032ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2222      	movs	r2, #34	; 0x22
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a5c      	ldr	r2, [pc, #368]	; (8003460 <HAL_I2C_Master_Receive+0x228>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa52 	bl	80037a0 <I2C_MasterRequestRead>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c4      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d113      	bne.n	8003336 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e198      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11b      	bne.n	8003376 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e178      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b02      	cmp	r3, #2
 800337c:	d11b      	bne.n	80033b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	e158      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033dc:	e144      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	f200 80f1 	bhi.w	80035ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d123      	bne.n	8003438 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fc4b 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e145      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003436:	e117      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d14e      	bne.n	80034de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2200      	movs	r2, #0
 8003448:	4906      	ldr	r1, [pc, #24]	; (8003464 <HAL_I2C_Master_Receive+0x22c>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa76 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e11a      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
 800345a:	bf00      	nop
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000
 8003464:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034dc:	e0c4      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	2200      	movs	r2, #0
 80034e6:	496c      	ldr	r1, [pc, #432]	; (8003698 <HAL_I2C_Master_Receive+0x460>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa27 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cb      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2200      	movs	r2, #0
 8003542:	4955      	ldr	r1, [pc, #340]	; (8003698 <HAL_I2C_Master_Receive+0x460>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9f9 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e09d      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c8:	e04e      	b.n	8003668 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fb5e 	bl	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e058      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d124      	bne.n	8003668 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b03      	cmp	r3, #3
 8003624:	d107      	bne.n	8003636 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f aeb6 	bne.w	80033de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010004 	.word	0x00010004

0800369c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	460b      	mov	r3, r1
 80036aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d006      	beq.n	80036c6 <I2C_MasterRequestWrite+0x2a>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d003      	beq.n	80036c6 <I2C_MasterRequestWrite+0x2a>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c4:	d108      	bne.n	80036d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e00b      	b.n	80036f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b12      	cmp	r3, #18
 80036de:	d107      	bne.n	80036f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f91d 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003716:	d103      	bne.n	8003720 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e035      	b.n	8003790 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800373c:	611a      	str	r2, [r3, #16]
 800373e:	e01b      	b.n	8003778 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003740:	897b      	ldrh	r3, [r7, #10]
 8003742:	11db      	asrs	r3, r3, #7
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0306 	and.w	r3, r3, #6
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f063 030f 	orn	r3, r3, #15
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <I2C_MasterRequestWrite+0xfc>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f966 	bl	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e010      	b.n	8003790 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800376e:	897b      	ldrh	r3, [r7, #10]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4907      	ldr	r1, [pc, #28]	; (800379c <I2C_MasterRequestWrite+0x100>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f956 	bl	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	00010008 	.word	0x00010008
 800379c:	00010002 	.word	0x00010002

080037a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	460b      	mov	r3, r1
 80037ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d006      	beq.n	80037da <I2C_MasterRequestRead+0x3a>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d003      	beq.n	80037da <I2C_MasterRequestRead+0x3a>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037d8:	d108      	bne.n	80037ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e00b      	b.n	8003804 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	2b11      	cmp	r3, #17
 80037f2:	d107      	bne.n	8003804 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 f893 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382a:	d103      	bne.n	8003834 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e079      	b.n	800392c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003840:	d108      	bne.n	8003854 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	e05f      	b.n	8003914 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	11db      	asrs	r3, r3, #7
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0306 	and.w	r3, r3, #6
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f063 030f 	orn	r3, r3, #15
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4930      	ldr	r1, [pc, #192]	; (8003934 <I2C_MasterRequestRead+0x194>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f8dc 	bl	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e054      	b.n	800392c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4929      	ldr	r1, [pc, #164]	; (8003938 <I2C_MasterRequestRead+0x198>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8cc 	bl	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e044      	b.n	800392c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f831 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d103      	bne.n	80038f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e017      	b.n	800392c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	11db      	asrs	r3, r3, #7
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f063 030e 	orn	r3, r3, #14
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <I2C_MasterRequestRead+0x198>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f888 	bl	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	00010008 	.word	0x00010008
 8003938:	00010002 	.word	0x00010002

0800393c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394c:	e048      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d044      	beq.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe f903 	bl	8001b60 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d139      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10d      	bne.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	43da      	mvns	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4013      	ands	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	e00c      	b.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	43da      	mvns	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d116      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e023      	b.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	0c1b      	lsrs	r3, r3, #16
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10d      	bne.n	8003a06 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	43da      	mvns	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4013      	ands	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	e00c      	b.n	8003a20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d093      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a3e:	e071      	b.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d123      	bne.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e067      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d041      	beq.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa0:	f7fe f85e 	bl	8001b60 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d136      	bne.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10c      	bne.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e00b      	b.n	8003af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f043 0220 	orr.w	r2, r3, #32
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e021      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10c      	bne.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e00b      	b.n	8003b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4013      	ands	r3, r2
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f af6d 	bne.w	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b7c:	e034      	b.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f8e3 	bl	8003d4a <I2C_IsAcknowledgeFailed>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e034      	b.n	8003bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d028      	beq.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7fd ffe3 	bl	8001b60 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11d      	bne.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d016      	beq.n	8003be8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e007      	b.n	8003bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d1c3      	bne.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c0c:	e034      	b.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f89b 	bl	8003d4a <I2C_IsAcknowledgeFailed>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e034      	b.n	8003c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d028      	beq.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fd ff9b 	bl	8001b60 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d11d      	bne.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d016      	beq.n	8003c78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e007      	b.n	8003c88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d1c3      	bne.n	8003c0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c9c:	e049      	b.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d119      	bne.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0210 	mvn.w	r2, #16
 8003cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e030      	b.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fd ff3e 	bl	8001b60 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11d      	bne.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d016      	beq.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e007      	b.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d1ae      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d11b      	bne.n	8003d9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0204 	orr.w	r2, r3, #4
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	60bb      	str	r3, [r7, #8]
  return result;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_PWR_EnableWakeUpPin+0x34>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2301      	movs	r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	420e0080 	.word	0x420e0080

08003de0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	60bb      	str	r3, [r7, #8]
  return result;
 8003df4:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003e02:	4413      	add	r3, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6013      	str	r3, [r2, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	420e0080 	.word	0x420e0080

08003e18 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 2 (PC13) if enabled.
  *          - WKUP pin 3 (PE6) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003e34:	bf30      	wfi
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40007000 	.word	0x40007000
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e31d      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5a:	4b94      	ldr	r3, [pc, #592]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e64:	4b91      	ldr	r3, [pc, #580]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d07b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d006      	beq.n	8003e8e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x5e>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8e:	4b87      	ldr	r3, [pc, #540]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d06a      	beq.n	8003f70 <HAL_RCC_OscConfig+0x128>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d166      	bne.n	8003f70 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e2f7      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x74>
 8003eae:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e02d      	b.n	8003f18 <HAL_RCC_OscConfig+0xd0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x96>
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a78      	ldr	r2, [pc, #480]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b76      	ldr	r3, [pc, #472]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a75      	ldr	r2, [pc, #468]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e01c      	b.n	8003f18 <HAL_RCC_OscConfig+0xd0>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0xb8>
 8003ee6:	4b71      	ldr	r3, [pc, #452]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a70      	ldr	r2, [pc, #448]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b6e      	ldr	r3, [pc, #440]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a6d      	ldr	r2, [pc, #436]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xd0>
 8003f00:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a69      	ldr	r2, [pc, #420]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b67      	ldr	r3, [pc, #412]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a66      	ldr	r2, [pc, #408]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd fe1e 	bl	8001b60 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd fe1a 	bl	8001b60 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e2ad      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f3a:	4b5c      	ldr	r3, [pc, #368]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0xe0>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fe0a 	bl	8001b60 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fd fe06 	bl	8001b60 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e299      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f62:	4b52      	ldr	r3, [pc, #328]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x108>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d05a      	beq.n	8004034 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d119      	bne.n	8003fbe <HAL_RCC_OscConfig+0x176>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d116      	bne.n	8003fbe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f90:	4b46      	ldr	r3, [pc, #280]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x160>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e276      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b40      	ldr	r3, [pc, #256]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	493d      	ldr	r1, [pc, #244]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbc:	e03a      	b.n	8004034 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <HAL_RCC_OscConfig+0x268>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fdc8 	bl	8001b60 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fd fdc4 	bl	8001b60 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e257      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	492a      	ldr	r1, [pc, #168]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
 8004006:	e015      	b.n	8004034 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCC_OscConfig+0x268>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fd fda7 	bl	8001b60 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004016:	f7fd fda3 	bl	8001b60 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e236      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80b8 	beq.w	80041b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d170      	bne.n	800412a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x218>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e21a      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	4b11      	ldr	r3, [pc, #68]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800406c:	429a      	cmp	r2, r3
 800406e:	d921      	bls.n	80040b4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fc6b 	bl	8004950 <RCC_SetFlashLatencyFromMSIRange>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e208      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4906      	ldr	r1, [pc, #24]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	4901      	ldr	r1, [pc, #4]	; (80040ac <HAL_RCC_OscConfig+0x264>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
 80040aa:	e020      	b.n	80040ee <HAL_RCC_OscConfig+0x2a6>
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040b4:	4b99      	ldr	r3, [pc, #612]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	4996      	ldr	r1, [pc, #600]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c6:	4b95      	ldr	r3, [pc, #596]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	4991      	ldr	r1, [pc, #580]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc36 	bl	8004950 <RCC_SetFlashLatencyFromMSIRange>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e1d3      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	0b5b      	lsrs	r3, r3, #13
 80040f4:	3301      	adds	r3, #1
 80040f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040fe:	4a87      	ldr	r2, [pc, #540]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004100:	6892      	ldr	r2, [r2, #8]
 8004102:	0912      	lsrs	r2, r2, #4
 8004104:	f002 020f 	and.w	r2, r2, #15
 8004108:	4985      	ldr	r1, [pc, #532]	; (8004320 <HAL_RCC_OscConfig+0x4d8>)
 800410a:	5c8a      	ldrb	r2, [r1, r2]
 800410c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800410e:	4a85      	ldr	r2, [pc, #532]	; (8004324 <HAL_RCC_OscConfig+0x4dc>)
 8004110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004112:	4b85      	ldr	r3, [pc, #532]	; (8004328 <HAL_RCC_OscConfig+0x4e0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fbda 	bl	80018d0 <HAL_InitTick>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d045      	beq.n	80041b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	e1b5      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d029      	beq.n	8004186 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004132:	4b7e      	ldr	r3, [pc, #504]	; (800432c <HAL_RCC_OscConfig+0x4e4>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd fd12 	bl	8001b60 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004140:	f7fd fd0e 	bl	8001b60 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1a1      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004152:	4b72      	ldr	r3, [pc, #456]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415e:	4b6f      	ldr	r3, [pc, #444]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	496c      	ldr	r1, [pc, #432]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004170:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	4967      	ldr	r1, [pc, #412]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004186:	4b69      	ldr	r3, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0x4e4>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd fce8 	bl	8001b60 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004194:	f7fd fce4 	bl	8001b60 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e177      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041a6:	4b5d      	ldr	r3, [pc, #372]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d030      	beq.n	8004220 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b5a      	ldr	r3, [pc, #360]	; (8004330 <HAL_RCC_OscConfig+0x4e8>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fd fcc8 	bl	8001b60 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd fcc4 	bl	8001b60 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e157      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041e6:	4b4d      	ldr	r3, [pc, #308]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x38c>
 80041f2:	e015      	b.n	8004220 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <HAL_RCC_OscConfig+0x4e8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fd fcb1 	bl	8001b60 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004202:	f7fd fcad 	bl	8001b60 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e140      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80b5 	beq.w	8004398 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b3a      	ldr	r3, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	4a36      	ldr	r2, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	6253      	str	r3, [r2, #36]	; 0x24
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	2301      	movs	r3, #1
 8004258:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4b36      	ldr	r3, [pc, #216]	; (8004334 <HAL_RCC_OscConfig+0x4ec>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d118      	bne.n	8004298 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004266:	4b33      	ldr	r3, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x4ec>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_RCC_OscConfig+0x4ec>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004272:	f7fd fc75 	bl	8001b60 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427a:	f7fd fc71 	bl	8001b60 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b64      	cmp	r3, #100	; 0x64
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e104      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_RCC_OscConfig+0x4ec>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x466>
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042aa:	6353      	str	r3, [r2, #52]	; 0x34
 80042ac:	e02d      	b.n	800430a <HAL_RCC_OscConfig+0x4c2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x488>
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c0:	6353      	str	r3, [r2, #52]	; 0x34
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042cc:	6353      	str	r3, [r2, #52]	; 0x34
 80042ce:	e01c      	b.n	800430a <HAL_RCC_OscConfig+0x4c2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4aa>
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	4a0f      	ldr	r2, [pc, #60]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e2:	6353      	str	r3, [r2, #52]	; 0x34
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	4a0c      	ldr	r2, [pc, #48]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ee:	6353      	str	r3, [r2, #52]	; 0x34
 80042f0:	e00b      	b.n	800430a <HAL_RCC_OscConfig+0x4c2>
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 80042f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fc:	6353      	str	r3, [r2, #52]	; 0x34
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	4a06      	ldr	r2, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x4d4>)
 8004304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004308:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d024      	beq.n	800435c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fd fc25 	bl	8001b60 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004318:	e019      	b.n	800434e <HAL_RCC_OscConfig+0x506>
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	08009270 	.word	0x08009270
 8004324:	20000004 	.word	0x20000004
 8004328:	20000008 	.word	0x20000008
 800432c:	42470020 	.word	0x42470020
 8004330:	42470680 	.word	0x42470680
 8004334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd fc12 	bl	8001b60 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0a3      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434e:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ee      	beq.n	8004338 <HAL_RCC_OscConfig+0x4f0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fd fc00 	bl	8001b60 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004364:	f7fd fbfc 	bl	8001b60 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e08d      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800437a:	4b49      	ldr	r3, [pc, #292]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1ee      	bne.n	8004364 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004386:	7ffb      	ldrb	r3, [r7, #31]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 8004392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004396:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d079      	beq.n	8004494 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d056      	beq.n	8004454 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d13b      	bne.n	8004426 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_OscConfig+0x65c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fd fbd4 	bl	8001b60 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fd fbd0 	bl	8001b60 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e063      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4319      	orrs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	430b      	orrs	r3, r1
 80043f2:	492b      	ldr	r1, [pc, #172]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x65c>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd fbaf 	bl	8001b60 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004406:	f7fd fbab 	bl	8001b60 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e03e      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x5be>
 8004424:	e036      	b.n	8004494 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_RCC_OscConfig+0x65c>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fb98 	bl	8001b60 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fb94 	bl	8001b60 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e027      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x5ec>
 8004452:	e01f      	b.n	8004494 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01a      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_RCC_OscConfig+0x658>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	429a      	cmp	r2, r3
 8004472:	d10d      	bne.n	8004490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800
 80044a4:	42470060 	.word	0x42470060

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e11a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b8f      	ldr	r3, [pc, #572]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d919      	bls.n	80044fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_ClockConfig+0x34>
 80044d0:	4b8a      	ldr	r3, [pc, #552]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a89      	ldr	r2, [pc, #548]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b87      	ldr	r3, [pc, #540]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 0201 	bic.w	r2, r3, #1
 80044e4:	4985      	ldr	r1, [pc, #532]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ec:	4b83      	ldr	r3, [pc, #524]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0f9      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450a:	4b7d      	ldr	r3, [pc, #500]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	497a      	ldr	r1, [pc, #488]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 808e 	beq.w	8004646 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004532:	4b73      	ldr	r3, [pc, #460]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d121      	bne.n	8004582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0d7      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800454a:	4b6d      	ldr	r3, [pc, #436]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d115      	bne.n	8004582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e0cb      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0bf      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0b7      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b5f      	ldr	r3, [pc, #380]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	495c      	ldr	r1, [pc, #368]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004594:	f7fd fae4 	bl	8001b60 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d112      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fd fadc 	bl	8001b60 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e09b      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d1ee      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xfc>
 80045c6:	e03e      	b.n	8004646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d112      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d2:	f7fd fac5 	bl	8001b60 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e084      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 030c 	and.w	r3, r3, #12
 80045f0:	2b0c      	cmp	r3, #12
 80045f2:	d1ee      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x12a>
 80045f4:	e027      	b.n	8004646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11d      	bne.n	800463a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fd faae 	bl	8001b60 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e06d      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_ClockConfig+0x158>
 8004622:	e010      	b.n	8004646 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd fa9c 	bl	8001b60 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e05b      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800463a:	4b31      	ldr	r3, [pc, #196]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d219      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1be>
 800465a:	4b28      	ldr	r3, [pc, #160]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a27      	ldr	r2, [pc, #156]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	4923      	ldr	r1, [pc, #140]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_ClockConfig+0x254>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e034      	b.n	80046f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4917      	ldr	r1, [pc, #92]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490f      	ldr	r1, [pc, #60]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f823 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCC_ClockConfig+0x258>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490b      	ldr	r1, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x25c>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x260>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x264>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd f8f2 	bl	80018d0 <HAL_InitTick>
 80046ec:	4603      	mov	r3, r0
 80046ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80046f0:	7afb      	ldrb	r3, [r7, #11]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023c00 	.word	0x40023c00
 8004700:	40023800 	.word	0x40023800
 8004704:	08009270 	.word	0x08009270
 8004708:	20000004 	.word	0x20000004
 800470c:	20000008 	.word	0x20000008

08004710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b08e      	sub	sp, #56	; 0x38
 8004716:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004718:	4b58      	ldr	r3, [pc, #352]	; (800487c <HAL_RCC_GetSysClockFreq+0x16c>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d00d      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x34>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	f200 8092 	bhi.w	8004852 <HAL_RCC_GetSysClockFreq+0x142>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x28>
 8004732:	2b08      	cmp	r3, #8
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x2e>
 8004736:	e08c      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCC_GetSysClockFreq+0x170>)
 800473a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800473c:	e097      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCC_GetSysClockFreq+0x174>)
 8004740:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004742:	e094      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	4b4e      	ldr	r3, [pc, #312]	; (8004888 <HAL_RCC_GetSysClockFreq+0x178>)
 800474e:	5c9b      	ldrb	r3, [r3, r2]
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	0d9b      	lsrs	r3, r3, #22
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	3301      	adds	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800475e:	4b47      	ldr	r3, [pc, #284]	; (800487c <HAL_RCC_GetSysClockFreq+0x16c>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d021      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2200      	movs	r2, #0
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	61fa      	str	r2, [r7, #28]
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCC_GetSysClockFreq+0x174>)
 8004774:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004778:	464a      	mov	r2, r9
 800477a:	fb03 f202 	mul.w	r2, r3, r2
 800477e:	2300      	movs	r3, #0
 8004780:	4644      	mov	r4, r8
 8004782:	fb04 f303 	mul.w	r3, r4, r3
 8004786:	4413      	add	r3, r2
 8004788:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_RCC_GetSysClockFreq+0x174>)
 800478a:	4644      	mov	r4, r8
 800478c:	fba4 0102 	umull	r0, r1, r4, r2
 8004790:	440b      	add	r3, r1
 8004792:	4619      	mov	r1, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	2200      	movs	r2, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	617a      	str	r2, [r7, #20]
 800479c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047a0:	f7fc fa38 	bl	8000c14 <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
 80047ac:	e04e      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	2200      	movs	r2, #0
 80047b2:	469a      	mov	sl, r3
 80047b4:	4693      	mov	fp, r2
 80047b6:	4652      	mov	r2, sl
 80047b8:	465b      	mov	r3, fp
 80047ba:	f04f 0000 	mov.w	r0, #0
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	0159      	lsls	r1, r3, #5
 80047c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c8:	0150      	lsls	r0, r2, #5
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	ebb2 080a 	subs.w	r8, r2, sl
 80047d2:	eb63 090b 	sbc.w	r9, r3, fp
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ea:	ebb2 0408 	subs.w	r4, r2, r8
 80047ee:	eb63 0509 	sbc.w	r5, r3, r9
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	00eb      	lsls	r3, r5, #3
 80047fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004800:	00e2      	lsls	r2, r4, #3
 8004802:	4614      	mov	r4, r2
 8004804:	461d      	mov	r5, r3
 8004806:	eb14 030a 	adds.w	r3, r4, sl
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	eb45 030b 	adc.w	r3, r5, fp
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	4604      	mov	r4, r0
 8004828:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800482c:	4601      	mov	r1, r0
 800482e:	028a      	lsls	r2, r1, #10
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	2200      	movs	r2, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	60fa      	str	r2, [r7, #12]
 800483c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004840:	f7fc f9e8 	bl	8000c14 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004850:	e00d      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCC_GetSysClockFreq+0x16c>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	3301      	adds	r3, #1
 8004862:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004870:	4618      	mov	r0, r3
 8004872:	3738      	adds	r7, #56	; 0x38
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	016e3600 	.word	0x016e3600
 8004888:	08009264 	.word	0x08009264

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <HAL_RCC_GetHCLKFreq+0x10>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff2 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08009280 	.word	0x08009280

080048c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048cc:	f7ff ffde 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0adb      	lsrs	r3, r3, #11
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40023800 	.word	0x40023800
 80048ec:	08009280 	.word	0x08009280

080048f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	220f      	movs	r2, #15
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004900:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0203 	and.w	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_RCC_GetClockConfig+0x58>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_GetClockConfig+0x5c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0201 	and.w	r2, r3, #1
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40023800 	.word	0x40023800
 800494c:	40023c00 	.word	0x40023c00

08004950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d12c      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004968:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004974:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e016      	b.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6253      	str	r3, [r2, #36]	; 0x24
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80049a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049b4:	d105      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049bc:	d101      	bne.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80049be:	2301      	movs	r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d105      	bne.n	80049d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 0201 	bic.w	r2, r3, #1
 80049dc:	490b      	ldr	r1, [pc, #44]	; (8004a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d001      	beq.n	80049f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40007000 	.word	0x40007000
 8004a0c:	40023c00 	.word	0x40023c00

08004a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e031      	b.n	8004a86 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f829 	bl	8004a8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f000 f978 	bl	8004d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d001      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e03a      	b.n	8004b2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_TIM_Base_Start_IT+0x98>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_TIM_Base_Start_IT+0x9c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <HAL_TIM_Base_Start_IT+0xa0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d111      	bne.n	8004b1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d010      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	e007      	b.n	8004b2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40010800 	.word	0x40010800

08004b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0202 	mvn.w	r2, #2
 8004b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8c1 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8b4 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f8c3 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0204 	mvn.w	r2, #4
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f897 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f88a 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f899 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0208 	mvn.w	r2, #8
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f86d 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f860 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f86f 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d122      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d11b      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0210 	mvn.w	r2, #16
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2208      	movs	r2, #8
 8004c72:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f843 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f836 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f845 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0201 	mvn.w	r2, #1
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc fcbc 	bl	8001640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f81f 	bl	8004d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x28>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a25      	ldr	r2, [pc, #148]	; (8004df4 <TIM_Base_SetConfig+0xb0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x28>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <TIM_Base_SetConfig+0xb4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d013      	beq.n	8004dae <TIM_Base_SetConfig+0x6a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <TIM_Base_SetConfig+0xb0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <TIM_Base_SetConfig+0x6a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <TIM_Base_SetConfig+0xb4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00b      	beq.n	8004dae <TIM_Base_SetConfig+0x6a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_Base_SetConfig+0x6a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <TIM_Base_SetConfig+0xbc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_Base_SetConfig+0x6a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <TIM_Base_SetConfig+0xc0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40010800 	.word	0x40010800
 8004e00:	40010c00 	.word	0x40010c00
 8004e04:	40011000 	.word	0x40011000

08004e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e042      	b.n	8004ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc fd02 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2224      	movs	r2, #36	; 0x24
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f82b 	bl	8004ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ee8:	f023 030c 	bic.w	r3, r3, #12
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a55      	ldr	r2, [pc, #340]	; (8005068 <UART_SetConfig+0x1c0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d103      	bne.n	8004f1e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f16:	f7ff fcd7 	bl	80048c8 <HAL_RCC_GetPCLK2Freq>
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	e002      	b.n	8004f24 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f1e:	f7ff fcbf 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8004f22:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d14c      	bne.n	8004fc8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	4a49      	ldr	r2, [pc, #292]	; (800506c <UART_SetConfig+0x1c4>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	0119      	lsls	r1, r3, #4
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009a      	lsls	r2, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f64:	4b41      	ldr	r3, [pc, #260]	; (800506c <UART_SetConfig+0x1c4>)
 8004f66:	fba3 0302 	umull	r0, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2064      	movs	r0, #100	; 0x64
 8004f6e:	fb00 f303 	mul.w	r3, r0, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a3c      	ldr	r2, [pc, #240]	; (800506c <UART_SetConfig+0x1c4>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f86:	4419      	add	r1, r3
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009a      	lsls	r2, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <UART_SetConfig+0x1c4>)
 8004fa0:	fba3 0302 	umull	r0, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	2064      	movs	r0, #100	; 0x64
 8004fa8:	fb00 f303 	mul.w	r3, r0, r3
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3332      	adds	r3, #50	; 0x32
 8004fb2:	4a2e      	ldr	r2, [pc, #184]	; (800506c <UART_SetConfig+0x1c4>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fc6:	e04a      	b.n	800505e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009a      	lsls	r2, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	4a23      	ldr	r2, [pc, #140]	; (800506c <UART_SetConfig+0x1c4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	0119      	lsls	r1, r3, #4
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009a      	lsls	r2, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <UART_SetConfig+0x1c4>)
 8005000:	fba3 0302 	umull	r0, r3, r3, r2
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	2064      	movs	r0, #100	; 0x64
 8005008:	fb00 f303 	mul.w	r3, r0, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	3332      	adds	r3, #50	; 0x32
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <UART_SetConfig+0x1c4>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501e:	4419      	add	r1, r3
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009a      	lsls	r2, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	fbb2 f2f3 	udiv	r2, r2, r3
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <UART_SetConfig+0x1c4>)
 8005038:	fba3 0302 	umull	r0, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2064      	movs	r0, #100	; 0x64
 8005040:	fb00 f303 	mul.w	r3, r0, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	3332      	adds	r3, #50	; 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <UART_SetConfig+0x1c4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 020f 	and.w	r2, r3, #15
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	440a      	add	r2, r1
 800505c:	609a      	str	r2, [r3, #8]
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40013800 	.word	0x40013800
 800506c:	51eb851f 	.word	0x51eb851f

08005070 <HM10_AT_SendData>:
HM10_stat_s stats = {HM10_NOT_INITED, {}, DO_NOT_CHANGE};
extern all_sens_info sens;

// basic send string function
static void HM10_AT_SendData(const char* cmd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  while (*cmd) {
 8005078:	e00f      	b.n	800509a <HM10_AT_SendData+0x2a>
    if (!HM10_io_cmd_putc(*cmd, 1000))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005082:	4618      	mov	r0, r3
 8005084:	f000 ff1c 	bl	8005ec0 <HM10_io_cmd_putc>
 8005088:	4603      	mov	r3, r0
 800508a:	f083 0301 	eor.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HM10_AT_SendData+0x34>
      break;
    cmd++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
  while (*cmd) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1eb      	bne.n	800507a <HM10_AT_SendData+0xa>
  }
}
 80050a2:	e000      	b.n	80050a6 <HM10_AT_SendData+0x36>
      break;
 80050a4:	bf00      	nop
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HM10_AT_SendnData>:

// sometimes we need to send api binary data (sending '0' would end transmission too soon)
static void HM10_AT_SendnData(const char* cmd,uint16_t qt)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	807b      	strh	r3, [r7, #2]
  while (qt) {
 80050ba:	e012      	b.n	80050e2 <HM10_AT_SendnData+0x34>
    if (!HM10_io_cmd_putc(*cmd, 1000))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fefb 	bl	8005ec0 <HM10_io_cmd_putc>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HM10_AT_SendnData+0x3c>
      break;
    cmd++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3301      	adds	r3, #1
 80050da:	607b      	str	r3, [r7, #4]
    qt--;
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	3b01      	subs	r3, #1
 80050e0:	807b      	strh	r3, [r7, #2]
  while (qt) {
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e9      	bne.n	80050bc <HM10_AT_SendnData+0xe>
  }
}
 80050e8:	e000      	b.n	80050ec <HM10_AT_SendnData+0x3e>
      break;
 80050ea:	bf00      	nop
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HM10_hard_reset>:

static void HM10_hard_reset()
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, 0);
 80050f8:	2200      	movs	r2, #0
 80050fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050fe:	4807      	ldr	r0, [pc, #28]	; (800511c <HM10_hard_reset+0x28>)
 8005100:	f7fd fe28 	bl	8002d54 <HAL_GPIO_WritePin>
  osDelay(500);
 8005104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005108:	f001 fc1e 	bl	8006948 <osDelay>
  HAL_GPIO_WritePin(BT_RST_GPIO_Port, BT_RST_Pin, 1);
 800510c:	2201      	movs	r2, #1
 800510e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005112:	4802      	ldr	r0, [pc, #8]	; (800511c <HM10_hard_reset+0x28>)
 8005114:	f7fd fe1e 	bl	8002d54 <HAL_GPIO_WritePin>
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40020400 	.word	0x40020400

08005120 <HM10_AT_GetResponse>:

static HM10_err_t HM10_AT_GetResponse(const char *cmd, const char *resp_ok, uint32_t timeout_ms)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  uint8_t   d = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	74fb      	strb	r3, [r7, #19]
  uint32_t  start = HAL_GetTick();
 8005130:	f7fc fd16 	bl	8001b60 <HAL_GetTick>
 8005134:	61b8      	str	r0, [r7, #24]
  uint32_t  respos = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  uint16_t  resp_len = strlen(resp_ok);
 800513a:	68b8      	ldr	r0, [r7, #8]
 800513c:	f7fb f82a 	bl	8000194 <strlen>
 8005140:	4603      	mov	r3, r0
 8005142:	82fb      	strh	r3, [r7, #22]

  // clearing response buffer
  memset(response_buf,0,RESPONSE_BUF_SIZE);
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	2100      	movs	r1, #0
 8005148:	4820      	ldr	r0, [pc, #128]	; (80051cc <HM10_AT_GetResponse+0xac>)
 800514a:	f002 fdd1 	bl	8007cf0 <memset>

  while (HAL_GetTick() - start <= timeout_ms)
 800514e:	e028      	b.n	80051a2 <HM10_AT_GetResponse+0x82>
  {
    if (HM10_io_cmd_getc(&d)) {
 8005150:	f107 0313 	add.w	r3, r7, #19
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe8b 	bl	8005e70 <HM10_io_cmd_getc>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HM10_AT_GetResponse+0x82>
      // adding next char to string, calculating pointer to compare module answer with the right one, until timeout will occur
      response_buf[respos] = d;
 8005160:	7cf9      	ldrb	r1, [r7, #19]
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <HM10_AT_GetResponse+0xac>)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	460a      	mov	r2, r1
 800516a:	701a      	strb	r2, [r3, #0]
      respos++;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
      uint16_t resp_pt = respos > resp_len ? respos - resp_len : 0;
 8005172:	8afb      	ldrh	r3, [r7, #22]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	429a      	cmp	r2, r3
 8005178:	d905      	bls.n	8005186 <HM10_AT_GetResponse+0x66>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	b29a      	uxth	r2, r3
 800517e:	8afb      	ldrh	r3, [r7, #22]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	e000      	b.n	8005188 <HM10_AT_GetResponse+0x68>
 8005186:	2300      	movs	r3, #0
 8005188:	82bb      	strh	r3, [r7, #20]
      if(strcmp(response_buf + resp_pt,resp_ok) == 0)
 800518a:	8abb      	ldrh	r3, [r7, #20]
 800518c:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <HM10_AT_GetResponse+0xac>)
 800518e:	4413      	add	r3, r2
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fa fff4 	bl	8000180 <strcmp>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HM10_AT_GetResponse+0x82>
        return HM10_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e00f      	b.n	80051c2 <HM10_AT_GetResponse+0xa2>
  while (HAL_GetTick() - start <= timeout_ms)
 80051a2:	f7fc fcdd 	bl	8001b60 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d2ce      	bcs.n	8005150 <HM10_AT_GetResponse+0x30>
    }
  }

  // error when hm10 sent something but it didn't match
  if(respos != 0)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HM10_AT_GetResponse+0x9e>
    return HM10_RESP_ERROR;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	e001      	b.n	80051c2 <HM10_AT_GetResponse+0xa2>

  // if buffer is empty
  return HM10_NO_RESPONSE;
 80051be:	f06f 0301 	mvn.w	r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2000056c 	.word	0x2000056c

080051d0 <HM10_AT_SetParamCommand>:


static HM10_err_t HM10_AT_SetParamCommand(const char* cmd, const char* param, uint32_t timeout_ms)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b090      	sub	sp, #64	; 0x40
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HM10_err_t status;
  uint8_t repeat = 3; // maybe it's unnecessary
 80051dc:	2303      	movs	r3, #3
 80051de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  char tx_cmd[20] = {};
 80051e2:	2300      	movs	r3, #0
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	60da      	str	r2, [r3, #12]
  char rx_resp[20] = {};
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	f107 0318 	add.w	r3, r7, #24
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	60da      	str	r2, [r3, #12]

  // preparing tx data to be sent, and rx expected answer
  sprintf(tx_cmd,"%s%s",cmd,param);
 8005206:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	491e      	ldr	r1, [pc, #120]	; (8005288 <HM10_AT_SetParamCommand+0xb8>)
 8005210:	f002 fe84 	bl	8007f1c <siprintf>
  sprintf(rx_resp,"OK+Set:%s",param); // for most of the set commands it's OK+Set:param but not for all
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	491c      	ldr	r1, [pc, #112]	; (800528c <HM10_AT_SetParamCommand+0xbc>)
 800521c:	4618      	mov	r0, r3
 800521e:	f002 fe7d 	bl	8007f1c <siprintf>


  // cleaning rx buffer
  while(HM10_io_cmd_getc(NULL));
 8005222:	bf00      	nop
 8005224:	2000      	movs	r0, #0
 8005226:	f000 fe23 	bl	8005e70 <HM10_io_cmd_getc>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f9      	bne.n	8005224 <HM10_AT_SetParamCommand+0x54>

  if (repeat <= 0)
 8005230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HM10_AT_SetParamCommand+0x6e>
    repeat = 1;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  do {
    // repeated send receive routine
    HM10_AT_SendData(tx_cmd);
 800523e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff ff14 	bl	8005070 <HM10_AT_SendData>
    status = HM10_AT_GetResponse(cmd, rx_resp, timeout_ms);
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff65 	bl	8005120 <HM10_AT_GetResponse>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    repeat--;
 800525c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005260:	3b01      	subs	r3, #1
 8005262:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    osDelay(10);
 8005266:	200a      	movs	r0, #10
 8005268:	f001 fb6e 	bl	8006948 <osDelay>
  }
  while ((repeat > 0) && (status != HM10_OK));
 800526c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HM10_AT_SetParamCommand+0xac>
 8005274:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e0      	bne.n	800523e <HM10_AT_SetParamCommand+0x6e>

  return status;
 800527c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
}
 8005280:	4618      	mov	r0, r3
 8005282:	3740      	adds	r7, #64	; 0x40
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	080090ec 	.word	0x080090ec
 800528c:	080090f4 	.word	0x080090f4

08005290 <HM10_AT_SendCommandAndGetResponse>:

static HM10_err_t HM10_AT_SendCommandAndGetResponse(const char* cmd, const char *resp_ok, uint32_t timeout_ms, int repeat)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  HM10_err_t err;

  if (repeat <= 0)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc01      	bgt.n	80052a8 <HM10_AT_SendCommandAndGetResponse+0x18>
    repeat = 1;
 80052a4:	2301      	movs	r3, #1
 80052a6:	603b      	str	r3, [r7, #0]

  do {
    // simplified send receive routine for non param commands
    HM10_AT_SendData(cmd);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff fee1 	bl	8005070 <HM10_AT_SendData>
    err = HM10_AT_GetResponse(cmd, resp_ok, timeout_ms);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff ff34 	bl	8005120 <HM10_AT_GetResponse>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]
    repeat--;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	603b      	str	r3, [r7, #0]
    osDelay(10);
 80052c2:	200a      	movs	r0, #10
 80052c4:	f001 fb40 	bl	8006948 <osDelay>
  }
  while ((repeat > 0) && (err != HM10_OK));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dd03      	ble.n	80052d6 <HM10_AT_SendCommandAndGetResponse+0x46>
 80052ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e8      	bne.n	80052a8 <HM10_AT_SendCommandAndGetResponse+0x18>

  return err;
 80052d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HM10_configure_device>:

HM10_status_info HM10_configure_device()
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  HM10_err_t resp = HM10_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	71fb      	strb	r3, [r7, #7]

  HM10_io_init();  // init uart interrupts (interrupt handle function is added in stm32l1xx_it.c)
 80052ee:	f000 fcc1 	bl	8005c74 <HM10_io_init>

  resp = HM10_AT_SendCommandAndGetResponse("AT", "OK", HM10_SHORT_TIMEOUT, 5); // checking is ble available
 80052f2:	2305      	movs	r3, #5
 80052f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052f8:	4975      	ldr	r1, [pc, #468]	; (80054d0 <HM10_configure_device+0x1ec>)
 80052fa:	4876      	ldr	r0, [pc, #472]	; (80054d4 <HM10_configure_device+0x1f0>)
 80052fc:	f7ff ffc8 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_NO_RESPONSE)
 8005304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005308:	f113 0f02 	cmn.w	r3, #2
 800530c:	d105      	bne.n	800531a <HM10_configure_device+0x36>
  {
    stats.status = HM10_NOT_RESPONDING;
 800530e:	4b72      	ldr	r3, [pc, #456]	; (80054d8 <HM10_configure_device+0x1f4>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
    return stats.status;
 8005314:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HM10_configure_device+0x1f4>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	e0d5      	b.n	80054c6 <HM10_configure_device+0x1e2>
  }

  if(resp == HM10_OK)
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <HM10_configure_device+0x4e>
    resp = HM10_AT_SetParamCommand("AT+IMME", "1", HM10_SHORT_TIMEOUT); // 1 - answer AT commands after waking or exiting sleep mode (0 - default do not answer)
 8005322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005326:	496d      	ldr	r1, [pc, #436]	; (80054dc <HM10_configure_device+0x1f8>)
 8005328:	486d      	ldr	r0, [pc, #436]	; (80054e0 <HM10_configure_device+0x1fc>)
 800532a:	f7ff ff51 	bl	80051d0 <HM10_AT_SetParamCommand>
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 8005332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d107      	bne.n	800534a <HM10_configure_device+0x66>
    resp = HM10_AT_SetParamCommand("AT+NOTI", "1", HM10_SHORT_TIMEOUT); //inform about connecting and disconnecting ble (OK+CONN, OK+LOST)
 800533a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800533e:	4967      	ldr	r1, [pc, #412]	; (80054dc <HM10_configure_device+0x1f8>)
 8005340:	4868      	ldr	r0, [pc, #416]	; (80054e4 <HM10_configure_device+0x200>)
 8005342:	f7ff ff45 	bl	80051d0 <HM10_AT_SetParamCommand>
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <HM10_configure_device+0x7e>
    resp = HM10_AT_SetParamCommand("AT+NOTP", "1", HM10_SHORT_TIMEOUT); //print address of device after establishing connection
 8005352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005356:	4961      	ldr	r1, [pc, #388]	; (80054dc <HM10_configure_device+0x1f8>)
 8005358:	4863      	ldr	r0, [pc, #396]	; (80054e8 <HM10_configure_device+0x204>)
 800535a:	f7ff ff39 	bl	80051d0 <HM10_AT_SetParamCommand>
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <HM10_configure_device+0x96>
    resp = HM10_AT_SetParamCommand("AT+SHOW", "1", HM10_SHORT_TIMEOUT); //show device names during searching
 800536a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800536e:	495b      	ldr	r1, [pc, #364]	; (80054dc <HM10_configure_device+0x1f8>)
 8005370:	485e      	ldr	r0, [pc, #376]	; (80054ec <HM10_configure_device+0x208>)
 8005372:	f7ff ff2d 	bl	80051d0 <HM10_AT_SetParamCommand>
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d107      	bne.n	8005392 <HM10_configure_device+0xae>
    resp = HM10_AT_SetParamCommand("AT+NAME", BT_NAME            , HM10_SHORT_TIMEOUT);   // ble name
 8005382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005386:	495a      	ldr	r1, [pc, #360]	; (80054f0 <HM10_configure_device+0x20c>)
 8005388:	485a      	ldr	r0, [pc, #360]	; (80054f4 <HM10_configure_device+0x210>)
 800538a:	f7ff ff21 	bl	80051d0 <HM10_AT_SetParamCommand>
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 8005392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HM10_configure_device+0xc6>
    resp = HM10_AT_SetParamCommand("AT+UUID", SERVICE_UUID       , HM10_SHORT_TIMEOUT);    // service
 800539a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539e:	4956      	ldr	r1, [pc, #344]	; (80054f8 <HM10_configure_device+0x214>)
 80053a0:	4856      	ldr	r0, [pc, #344]	; (80054fc <HM10_configure_device+0x218>)
 80053a2:	f7ff ff15 	bl	80051d0 <HM10_AT_SetParamCommand>
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <HM10_configure_device+0xde>
      resp = HM10_AT_SetParamCommand("AT+CHAR", STATUS_CHAR_UUID, HM10_SHORT_TIMEOUT);    // characteristic
 80053b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b6:	4952      	ldr	r1, [pc, #328]	; (8005500 <HM10_configure_device+0x21c>)
 80053b8:	4852      	ldr	r0, [pc, #328]	; (8005504 <HM10_configure_device+0x220>)
 80053ba:	f7ff ff09 	bl	80051d0 <HM10_AT_SetParamCommand>
 80053be:	4603      	mov	r3, r0
 80053c0:	71fb      	strb	r3, [r7, #7]


  if(resp == HM10_OK)
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HM10_configure_device+0xf6>
    resp = HM10_AT_SetParamCommand("AT+ROLE", "0", HM10_SHORT_TIMEOUT); // 0 - slave 1 - master
 80053ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ce:	494e      	ldr	r1, [pc, #312]	; (8005508 <HM10_configure_device+0x224>)
 80053d0:	484e      	ldr	r0, [pc, #312]	; (800550c <HM10_configure_device+0x228>)
 80053d2:	f7ff fefd 	bl	80051d0 <HM10_AT_SetParamCommand>
 80053d6:	4603      	mov	r3, r0
 80053d8:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HM10_configure_device+0x10e>
    resp = HM10_AT_SetParamCommand("AT+ADVI", "8", HM10_SHORT_TIMEOUT); // advertise every 1s
 80053e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e6:	494a      	ldr	r1, [pc, #296]	; (8005510 <HM10_configure_device+0x22c>)
 80053e8:	484a      	ldr	r0, [pc, #296]	; (8005514 <HM10_configure_device+0x230>)
 80053ea:	f7ff fef1 	bl	80051d0 <HM10_AT_SetParamCommand>
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <HM10_configure_device+0x126>
    resp = HM10_AT_SetParamCommand("AT+IBEA", "0", HM10_SHORT_TIMEOUT); //turn off iBeacone
 80053fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053fe:	4942      	ldr	r1, [pc, #264]	; (8005508 <HM10_configure_device+0x224>)
 8005400:	4845      	ldr	r0, [pc, #276]	; (8005518 <HM10_configure_device+0x234>)
 8005402:	f7ff fee5 	bl	80051d0 <HM10_AT_SetParamCommand>
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <HM10_configure_device+0x13e>
    resp = HM10_AT_SetParamCommand("AT+ADTY", "0", HM10_SHORT_TIMEOUT); // Advertising, ScanResponse, Connectable
 8005412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005416:	493c      	ldr	r1, [pc, #240]	; (8005508 <HM10_configure_device+0x224>)
 8005418:	4840      	ldr	r0, [pc, #256]	; (800551c <HM10_configure_device+0x238>)
 800541a:	f7ff fed9 	bl	80051d0 <HM10_AT_SetParamCommand>
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 8005422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d108      	bne.n	800543c <HM10_configure_device+0x158>
    resp = HM10_AT_SendCommandAndGetResponse("AT+FLAG0", "OK+FLAG0", HM10_SHORT_TIMEOUT, 2); // anything must be set to make ble visible
 800542a:	2302      	movs	r3, #2
 800542c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005430:	493b      	ldr	r1, [pc, #236]	; (8005520 <HM10_configure_device+0x23c>)
 8005432:	483c      	ldr	r0, [pc, #240]	; (8005524 <HM10_configure_device+0x240>)
 8005434:	f7ff ff2c 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005438:	4603      	mov	r3, r0
 800543a:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800543c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <HM10_configure_device+0x172>
    resp = HM10_AT_SendCommandAndGetResponse("AT+RESET", "OK+RESET", HM10_LONG_TIMEOUT, 3);
 8005444:	2303      	movs	r3, #3
 8005446:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800544a:	4937      	ldr	r1, [pc, #220]	; (8005528 <HM10_configure_device+0x244>)
 800544c:	4837      	ldr	r0, [pc, #220]	; (800552c <HM10_configure_device+0x248>)
 800544e:	f7ff ff1f 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]

  if(resp != HM10_OK)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HM10_configure_device+0x186>
  {
    // return if ble is not responding properly and set status (for further attempts in task loop)
    stats.status = HM10_RESET_FAIL;
 800545e:	4b1e      	ldr	r3, [pc, #120]	; (80054d8 <HM10_configure_device+0x1f4>)
 8005460:	2202      	movs	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]
    return stats.status;
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HM10_configure_device+0x1f4>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	e02d      	b.n	80054c6 <HM10_configure_device+0x1e2>
  }

  // waiting for completing reset (it takes about 1.5s)
  osDelay(HM10_LONG_TIMEOUT);
 800546a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800546e:	f001 fa6b 	bl	8006948 <osDelay>

  if(resp == HM10_OK)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <HM10_configure_device+0x1a8>
    resp = HM10_AT_SendCommandAndGetResponse("AT", "OK", HM10_SHORT_TIMEOUT, 2); // is ble responding?
 800547a:	2302      	movs	r3, #2
 800547c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005480:	4913      	ldr	r1, [pc, #76]	; (80054d0 <HM10_configure_device+0x1ec>)
 8005482:	4814      	ldr	r0, [pc, #80]	; (80054d4 <HM10_configure_device+0x1f0>)
 8005484:	f7ff ff04 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005488:	4603      	mov	r3, r0
 800548a:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d108      	bne.n	80054a6 <HM10_configure_device+0x1c2>
    resp = HM10_AT_SendCommandAndGetResponse("AT+START", "OK+START", HM10_LONG_TIMEOUT, 3);  // sending start command to make ble visible
 8005494:	2303      	movs	r3, #3
 8005496:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800549a:	4925      	ldr	r1, [pc, #148]	; (8005530 <HM10_configure_device+0x24c>)
 800549c:	4825      	ldr	r0, [pc, #148]	; (8005534 <HM10_configure_device+0x250>)
 800549e:	f7ff fef7 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HM10_configure_device+0x1d8>
  {
    // if everything went well set status and vibrate shortly to inform user that ble is ready for establishing connection
    stats.status = HM10_READY;
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HM10_configure_device+0x1f4>)
 80054b0:	2204      	movs	r2, #4
 80054b2:	701a      	strb	r2, [r3, #0]
    motor_vibrate(SHORT_WIBRATION);
 80054b4:	2001      	movs	r0, #1
 80054b6:	f000 fdf5 	bl	80060a4 <motor_vibrate>
 80054ba:	e002      	b.n	80054c2 <HM10_configure_device+0x1de>
  }
  else
    stats.status = HM10_START_FAIL; // if after reset command we got error ble need to be started again
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HM10_configure_device+0x1f4>)
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]

  return stats.status;
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HM10_configure_device+0x1f4>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08009100 	.word	0x08009100
 80054d4:	08009104 	.word	0x08009104
 80054d8:	20000010 	.word	0x20000010
 80054dc:	08009108 	.word	0x08009108
 80054e0:	0800910c 	.word	0x0800910c
 80054e4:	08009114 	.word	0x08009114
 80054e8:	0800911c 	.word	0x0800911c
 80054ec:	08009124 	.word	0x08009124
 80054f0:	0800912c 	.word	0x0800912c
 80054f4:	08009134 	.word	0x08009134
 80054f8:	0800913c 	.word	0x0800913c
 80054fc:	08009144 	.word	0x08009144
 8005500:	0800914c 	.word	0x0800914c
 8005504:	08009154 	.word	0x08009154
 8005508:	0800915c 	.word	0x0800915c
 800550c:	08009160 	.word	0x08009160
 8005510:	08009168 	.word	0x08009168
 8005514:	0800916c 	.word	0x0800916c
 8005518:	08009174 	.word	0x08009174
 800551c:	0800917c 	.word	0x0800917c
 8005520:	08009184 	.word	0x08009184
 8005524:	08009190 	.word	0x08009190
 8005528:	0800919c 	.word	0x0800919c
 800552c:	080091a8 	.word	0x080091a8
 8005530:	080091b4 	.word	0x080091b4
 8005534:	080091c0 	.word	0x080091c0

08005538 <HM10_restart_session>:
//  if(HM10_AT_SendCommandAndGetResponse("AT+RESET", "OK+RESET", HM10_LONG_TIMEOUT, 3) != HM10_OK)
//    stats.status = HM10_NOT_RESPONDING;
//}

static void HM10_restart_session()
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
  // characteristic won't appear until flag isn't set (after disconnecting)
  HM10_err_t resp = HM10_AT_SendCommandAndGetResponse("AT+FLAG0", "OK+FLAG0", HM10_SHORT_TIMEOUT, 3);
 800553e:	2303      	movs	r3, #3
 8005540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005544:	4921      	ldr	r1, [pc, #132]	; (80055cc <HM10_restart_session+0x94>)
 8005546:	4822      	ldr	r0, [pc, #136]	; (80055d0 <HM10_restart_session+0x98>)
 8005548:	f7ff fea2 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 800554c:	4603      	mov	r3, r0
 800554e:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 8005550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d108      	bne.n	800556a <HM10_restart_session+0x32>
    resp = HM10_AT_SendCommandAndGetResponse("AT+RESET", "OK+RESET", HM10_SHORT_TIMEOUT, 3);  // trzeba wyslac reset (bez tego start nie zadziala)
 8005558:	2303      	movs	r3, #3
 800555a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800555e:	491d      	ldr	r1, [pc, #116]	; (80055d4 <HM10_restart_session+0x9c>)
 8005560:	481d      	ldr	r0, [pc, #116]	; (80055d8 <HM10_restart_session+0xa0>)
 8005562:	f7ff fe95 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]

  osDelay(HM10_LONG_TIMEOUT);
 800556a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800556e:	f001 f9eb 	bl	8006948 <osDelay>

  if(resp == HM10_OK)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <HM10_restart_session+0x54>
    resp = HM10_AT_SendCommandAndGetResponse("AT", "OK", HM10_SHORT_TIMEOUT, 3);
 800557a:	2303      	movs	r3, #3
 800557c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005580:	4916      	ldr	r1, [pc, #88]	; (80055dc <HM10_restart_session+0xa4>)
 8005582:	4817      	ldr	r0, [pc, #92]	; (80055e0 <HM10_restart_session+0xa8>)
 8005584:	f7ff fe84 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005588:	4603      	mov	r3, r0
 800558a:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 800558c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d108      	bne.n	80055a6 <HM10_restart_session+0x6e>
    resp = HM10_AT_SendCommandAndGetResponse("AT+START", "OK+START", HM10_SHORT_TIMEOUT, 2);  // trzeba wyslac start zeby tel mogl sie polaczyc
 8005594:	2302      	movs	r3, #2
 8005596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800559a:	4912      	ldr	r1, [pc, #72]	; (80055e4 <HM10_restart_session+0xac>)
 800559c:	4812      	ldr	r0, [pc, #72]	; (80055e8 <HM10_restart_session+0xb0>)
 800559e:	f7ff fe77 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]

  if(resp == HM10_OK)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HM10_restart_session+0x84>
  {
    stats.status = HM10_READY;
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <HM10_restart_session+0xb4>)
 80055b0:	2204      	movs	r2, #4
 80055b2:	701a      	strb	r2, [r3, #0]
    motor_vibrate(SHORT_WIBRATION);
 80055b4:	2001      	movs	r0, #1
 80055b6:	f000 fd75 	bl	80060a4 <motor_vibrate>
  }
  else
    stats.status = HM10_NOT_RESPONDING;
}
 80055ba:	e002      	b.n	80055c2 <HM10_restart_session+0x8a>
    stats.status = HM10_NOT_RESPONDING;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HM10_restart_session+0xb4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08009184 	.word	0x08009184
 80055d0:	08009190 	.word	0x08009190
 80055d4:	0800919c 	.word	0x0800919c
 80055d8:	080091a8 	.word	0x080091a8
 80055dc:	08009100 	.word	0x08009100
 80055e0:	08009104 	.word	0x08009104
 80055e4:	080091b4 	.word	0x080091b4
 80055e8:	080091c0 	.word	0x080091c0
 80055ec:	20000010 	.word	0x20000010

080055f0 <HM10_set_sleep_mode>:

static void HM10_set_sleep_mode(bool sleep)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	71fb      	strb	r3, [r7, #7]
  HM10_err_t  status    = HM10_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
//  memset(msg,'>',100); // sending 80 bytes should cause exiting sleep mode (but it's not working)


  if(sleep)
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d027      	beq.n	8005654 <HM10_set_sleep_mode+0x64>
  {

    // if device is connected ble will send "OK+LOST" after using "AT" command | otherwise ble will response with "OK"
    char *resp = stats.status == HM10_CONNECTED ? "OK+LOST" : "OK";
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <HM10_set_sleep_mode+0x88>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b05      	cmp	r3, #5
 800560a:	d101      	bne.n	8005610 <HM10_set_sleep_mode+0x20>
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HM10_set_sleep_mode+0x8c>)
 800560e:	e000      	b.n	8005612 <HM10_set_sleep_mode+0x22>
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <HM10_set_sleep_mode+0x90>)
 8005612:	60bb      	str	r3, [r7, #8]

    status = HM10_AT_SendCommandAndGetResponse("AT", resp, HM10_LONG_TIMEOUT, 2);
 8005614:	2302      	movs	r3, #2
 8005616:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4819      	ldr	r0, [pc, #100]	; (8005684 <HM10_set_sleep_mode+0x94>)
 800561e:	f7ff fe37 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]

    if(status == HM10_OK)
 8005626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HM10_set_sleep_mode+0x50>
      status = HM10_AT_SendCommandAndGetResponse("AT+SLEEP", "OK+SLEEP", HM10_LONG_TIMEOUT, 2);
 800562e:	2302      	movs	r3, #2
 8005630:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005634:	4914      	ldr	r1, [pc, #80]	; (8005688 <HM10_set_sleep_mode+0x98>)
 8005636:	4815      	ldr	r0, [pc, #84]	; (800568c <HM10_set_sleep_mode+0x9c>)
 8005638:	f7ff fe2a 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]

    // jak uda sie wywolac komende uspienia obudzenia resetujemy zmienne wywolujace ta funkcje (jakby komenda nie dotarla do modulu resetujemy go i jezeli mial isc spac to funkcja sie wywola jeszcze raz)
    // after executing sleep command we need to update status (if something went wrong this function will be executed repeatedly in task routine as long as we'll get success)
    stats.status = status == HM10_OK ? HM10_SLEEP_MODE : HM10_NOT_RESPONDING;
 8005640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HM10_set_sleep_mode+0x5c>
 8005648:	2207      	movs	r2, #7
 800564a:	e000      	b.n	800564e <HM10_set_sleep_mode+0x5e>
 800564c:	2200      	movs	r2, #0
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HM10_set_sleep_mode+0x88>)
 8005650:	701a      	strb	r2, [r3, #0]
    stats.status = HM10_NOT_INITED;

    // po poprawnym wybudzeniu nalezy po resecie zrobic reinit aby modul mogl nawiazac polaczenie (bez staru nie nawiaze)
  }

}
 8005652:	e00d      	b.n	8005670 <HM10_set_sleep_mode+0x80>
    stats.sleep_mode_change = DO_NOT_CHANGE;
 8005654:	4b08      	ldr	r3, [pc, #32]	; (8005678 <HM10_set_sleep_mode+0x88>)
 8005656:	2200      	movs	r2, #0
 8005658:	741a      	strb	r2, [r3, #16]
    HM10_hard_reset();
 800565a:	f7ff fd4b 	bl	80050f4 <HM10_hard_reset>
    HM10_AT_GetResponse(NULL, "OK+WAKE", HM10_LONG_TIMEOUT);
 800565e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005662:	490b      	ldr	r1, [pc, #44]	; (8005690 <HM10_set_sleep_mode+0xa0>)
 8005664:	2000      	movs	r0, #0
 8005666:	f7ff fd5b 	bl	8005120 <HM10_AT_GetResponse>
    stats.status = HM10_NOT_INITED;
 800566a:	4b03      	ldr	r3, [pc, #12]	; (8005678 <HM10_set_sleep_mode+0x88>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000010 	.word	0x20000010
 800567c:	080091cc 	.word	0x080091cc
 8005680:	08009100 	.word	0x08009100
 8005684:	08009104 	.word	0x08009104
 8005688:	080091d4 	.word	0x080091d4
 800568c:	080091e0 	.word	0x080091e0
 8005690:	080091ec 	.word	0x080091ec

08005694 <my_strstr>:

// this function is needed to search rx data buffer (between messages in there, module could send '0' byte and normal strstr would return NULL in that case)
static char *my_strstr(char *dest,char *src,uint32_t left_bytes)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t src_size = strlen(src);
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	f7fa fd77 	bl	8000194 <strlen>
 80056a6:	6178      	str	r0, [r7, #20]
  left_bytes -= src_size;
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	607b      	str	r3, [r7, #4]

  while(strncmp(dest,src,src_size) != 0)
 80056b0:	e009      	b.n	80056c6 <my_strstr+0x32>
  {
    dest++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]
    if(!(left_bytes--))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1e5a      	subs	r2, r3, #1
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <my_strstr+0x32>
      return 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e008      	b.n	80056d8 <my_strstr+0x44>
  while(strncmp(dest,src,src_size) != 0)
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f002 fc72 	bl	8007fb4 <strncmp>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ed      	bne.n	80056b2 <my_strstr+0x1e>
  }
  return dest;
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HM10_handle_connection>:
uint32_t last_msg_ts = 0;
uint32_t last_msg_t = 0;


void HM10_handle_connection()
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af02      	add	r7, sp, #8
  uint8_t     d;
  char *      msg_pt;
  bool        empty_buff = false;
 80056e6:	2300      	movs	r3, #0
 80056e8:	76fb      	strb	r3, [r7, #27]
  HM10_err_t  stat = HM10_NO_RESPONSE;
 80056ea:	23fe      	movs	r3, #254	; 0xfe
 80056ec:	76bb      	strb	r3, [r7, #26]
  int         id[3];
  uint32_t    now;

  // adding next received bytes from ble (till buffer overflow)
  while(HM10_io_cmd_getc(&d)) {
 80056ee:	e016      	b.n	800571e <HM10_handle_connection+0x3e>
    if(respos < RESPONSE_BUF_SIZE - 1)
 80056f0:	4b9b      	ldr	r3, [pc, #620]	; (8005960 <HM10_handle_connection+0x280>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b7e      	cmp	r3, #126	; 0x7e
 80056f6:	d80a      	bhi.n	800570e <HM10_handle_connection+0x2e>
    {
      response_buf[respos] = d;
 80056f8:	4b99      	ldr	r3, [pc, #612]	; (8005960 <HM10_handle_connection+0x280>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	7cb9      	ldrb	r1, [r7, #18]
 80056fe:	4a99      	ldr	r2, [pc, #612]	; (8005964 <HM10_handle_connection+0x284>)
 8005700:	54d1      	strb	r1, [r2, r3]
      respos++;
 8005702:	4b97      	ldr	r3, [pc, #604]	; (8005960 <HM10_handle_connection+0x280>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	4a95      	ldr	r2, [pc, #596]	; (8005960 <HM10_handle_connection+0x280>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e007      	b.n	800571e <HM10_handle_connection+0x3e>
    }
    else
    {
      memset(response_buf,0,RESPONSE_BUF_SIZE);
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	2100      	movs	r1, #0
 8005712:	4894      	ldr	r0, [pc, #592]	; (8005964 <HM10_handle_connection+0x284>)
 8005714:	f002 faec 	bl	8007cf0 <memset>
      respos = 0;
 8005718:	4b91      	ldr	r3, [pc, #580]	; (8005960 <HM10_handle_connection+0x280>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
  while(HM10_io_cmd_getc(&d)) {
 800571e:	f107 0312 	add.w	r3, r7, #18
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fba4 	bl	8005e70 <HM10_io_cmd_getc>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e0      	bne.n	80056f0 <HM10_handle_connection+0x10>
    }
  }


  // searching for messages from hm10 (connection status)
  msg_pt = my_strstr((char *)response_buf,"OK+",RESPONSE_BUF_SIZE);
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	498d      	ldr	r1, [pc, #564]	; (8005968 <HM10_handle_connection+0x288>)
 8005732:	488c      	ldr	r0, [pc, #560]	; (8005964 <HM10_handle_connection+0x284>)
 8005734:	f7ff ffae 	bl	8005694 <my_strstr>
 8005738:	61f8      	str	r0, [r7, #28]
  while((msg_pt = my_strstr(msg_pt,"OK+",RESPONSE_BUF_SIZE)) != NULL)
 800573a:	e040      	b.n	80057be <HM10_handle_connection+0xde>
  {
    uint8_t addr_size = sscanf(msg_pt, "OK+CONN:%4x%4x%4x", &id[0], &id[1], &id[2]);
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	1d19      	adds	r1, r3, #4
 8005740:	1d3a      	adds	r2, r7, #4
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	3308      	adds	r3, #8
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	460b      	mov	r3, r1
 800574a:	4988      	ldr	r1, [pc, #544]	; (800596c <HM10_handle_connection+0x28c>)
 800574c:	69f8      	ldr	r0, [r7, #28]
 800574e:	f002 fc05 	bl	8007f5c <siscanf>
 8005752:	4603      	mov	r3, r0
 8005754:	74fb      	strb	r3, [r7, #19]
    if ((addr_size <= 3 && addr_size > 0) || (strncmp(msg_pt, "OK+CONN",7) == 0))
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b03      	cmp	r3, #3
 800575a:	d802      	bhi.n	8005762 <HM10_handle_connection+0x82>
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <HM10_handle_connection+0x92>
 8005762:	2207      	movs	r2, #7
 8005764:	4982      	ldr	r1, [pc, #520]	; (8005970 <HM10_handle_connection+0x290>)
 8005766:	69f8      	ldr	r0, [r7, #28]
 8005768:	f002 fc24 	bl	8007fb4 <strncmp>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d113      	bne.n	800579a <HM10_handle_connection+0xba>
    {
      // after establishing new connection reset sleep mode time stamp
      sens_reset_timestamp();
 8005772:	f001 f80d 	bl	8006790 <sens_reset_timestamp>
      if(addr_size == 3)
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d105      	bne.n	8005788 <HM10_handle_connection+0xa8>
        memcpy(stats.master_addr,id,3);
 800577c:	1d3b      	adds	r3, r7, #4
 800577e:	2203      	movs	r2, #3
 8005780:	4619      	mov	r1, r3
 8005782:	487c      	ldr	r0, [pc, #496]	; (8005974 <HM10_handle_connection+0x294>)
 8005784:	f002 faa6 	bl	8007cd4 <memcpy>
      // in case we were in the sleep mode and just woke up
      stats.sleep_mode_change = DO_NOT_CHANGE;
 8005788:	4b7b      	ldr	r3, [pc, #492]	; (8005978 <HM10_handle_connection+0x298>)
 800578a:	2200      	movs	r2, #0
 800578c:	741a      	strb	r2, [r3, #16]
      stats.status = HM10_CONNECTED;
 800578e:	4b7a      	ldr	r3, [pc, #488]	; (8005978 <HM10_handle_connection+0x298>)
 8005790:	2205      	movs	r2, #5
 8005792:	701a      	strb	r2, [r3, #0]
      empty_buff = true;
 8005794:	2301      	movs	r3, #1
 8005796:	76fb      	strb	r3, [r7, #27]
 8005798:	e00e      	b.n	80057b8 <HM10_handle_connection+0xd8>
    }
    else if(strcmp(msg_pt, "OK+LOST") == 0)
 800579a:	4978      	ldr	r1, [pc, #480]	; (800597c <HM10_handle_connection+0x29c>)
 800579c:	69f8      	ldr	r0, [r7, #28]
 800579e:	f7fa fcef 	bl	8000180 <strcmp>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HM10_handle_connection+0xd4>
    {
      stats.status = HM10_CONN_LOST;
 80057a8:	4b73      	ldr	r3, [pc, #460]	; (8005978 <HM10_handle_connection+0x298>)
 80057aa:	2206      	movs	r2, #6
 80057ac:	701a      	strb	r2, [r3, #0]
      empty_buff = true;
 80057ae:	2301      	movs	r3, #1
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e001      	b.n	80057b8 <HM10_handle_connection+0xd8>
    }
    else
      empty_buff = false;
 80057b4:	2300      	movs	r3, #0
 80057b6:	76fb      	strb	r3, [r7, #27]

    // increasing pointer to search the rest of the buffer
    msg_pt += 3;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3303      	adds	r3, #3
 80057bc:	61fb      	str	r3, [r7, #28]
  while((msg_pt = my_strstr(msg_pt,"OK+",RESPONSE_BUF_SIZE)) != NULL)
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	4969      	ldr	r1, [pc, #420]	; (8005968 <HM10_handle_connection+0x288>)
 80057c2:	69f8      	ldr	r0, [r7, #28]
 80057c4:	f7ff ff66 	bl	8005694 <my_strstr>
 80057c8:	61f8      	str	r0, [r7, #28]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1b5      	bne.n	800573c <HM10_handle_connection+0x5c>
  }

  // searching for api commands (from the beginning of the buffer)
  msg_pt = my_strstr((char *)response_buf,"MS+",RESPONSE_BUF_SIZE);
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	496b      	ldr	r1, [pc, #428]	; (8005980 <HM10_handle_connection+0x2a0>)
 80057d4:	4863      	ldr	r0, [pc, #396]	; (8005964 <HM10_handle_connection+0x284>)
 80057d6:	f7ff ff5d 	bl	8005694 <my_strstr>
 80057da:	61f8      	str	r0, [r7, #28]
  while((msg_pt = my_strstr(msg_pt,"MS+",RESPONSE_BUF_SIZE)) != NULL)
 80057dc:	e05d      	b.n	800589a <HM10_handle_connection+0x1ba>
  {

    if(strncmp(msg_pt,MS_GET_SENS_VAL_U8,strlen(MS_GET_SENS_VAL_U8)) == 0)
 80057de:	2209      	movs	r2, #9
 80057e0:	4968      	ldr	r1, [pc, #416]	; (8005984 <HM10_handle_connection+0x2a4>)
 80057e2:	69f8      	ldr	r0, [r7, #28]
 80057e4:	f002 fbe6 	bl	8007fb4 <strncmp>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d112      	bne.n	8005814 <HM10_handle_connection+0x134>
    {
      now = HAL_GetTick();
 80057ee:	f7fc f9b7 	bl	8001b60 <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]
      last_msg_t = now - last_msg_ts;
 80057f4:	4b64      	ldr	r3, [pc, #400]	; (8005988 <HM10_handle_connection+0x2a8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	4a63      	ldr	r2, [pc, #396]	; (800598c <HM10_handle_connection+0x2ac>)
 80057fe:	6013      	str	r3, [r2, #0]
      last_msg_ts = now;
 8005800:	4a61      	ldr	r2, [pc, #388]	; (8005988 <HM10_handle_connection+0x2a8>)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6013      	str	r3, [r2, #0]
      // user app requested weight data
      HM10_AT_SendnData(sens.wei_tx_data,10);
 8005806:	210a      	movs	r1, #10
 8005808:	4861      	ldr	r0, [pc, #388]	; (8005990 <HM10_handle_connection+0x2b0>)
 800580a:	f7ff fc50 	bl	80050ae <HM10_AT_SendnData>
      stat = HM10_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	76bb      	strb	r3, [r7, #26]
 8005812:	e031      	b.n	8005878 <HM10_handle_connection+0x198>
    }

    else if(strncmp(msg_pt,MS_GET_SENS_COLOURS,strlen(MS_GET_SENS_COLOURS)) == 0)
 8005814:	220a      	movs	r2, #10
 8005816:	495f      	ldr	r1, [pc, #380]	; (8005994 <HM10_handle_connection+0x2b4>)
 8005818:	69f8      	ldr	r0, [r7, #28]
 800581a:	f002 fbcb 	bl	8007fb4 <strncmp>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <HM10_handle_connection+0x152>
    {
      // user app requested weight colors data
      HM10_AT_SendnData(sens.col_tx_data,10);
 8005824:	210a      	movs	r1, #10
 8005826:	485c      	ldr	r0, [pc, #368]	; (8005998 <HM10_handle_connection+0x2b8>)
 8005828:	f7ff fc41 	bl	80050ae <HM10_AT_SendnData>
      stat = HM10_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	76bb      	strb	r3, [r7, #26]
 8005830:	e022      	b.n	8005878 <HM10_handle_connection+0x198>
    }
    else if(strncmp(msg_pt,MS_GET_STATUS,strlen(MS_GET_STATUS)) == 0)
 8005832:	220a      	movs	r2, #10
 8005834:	4959      	ldr	r1, [pc, #356]	; (800599c <HM10_handle_connection+0x2bc>)
 8005836:	69f8      	ldr	r0, [r7, #28]
 8005838:	f002 fbbc 	bl	8007fb4 <strncmp>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HM10_handle_connection+0x170>
    {
      // user app requested feet position
      HM10_AT_SendnData(sens.stat_tx_data,3);
 8005842:	2103      	movs	r1, #3
 8005844:	4856      	ldr	r0, [pc, #344]	; (80059a0 <HM10_handle_connection+0x2c0>)
 8005846:	f7ff fc32 	bl	80050ae <HM10_AT_SendnData>
      stat = HM10_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	76bb      	strb	r3, [r7, #26]
 800584e:	e013      	b.n	8005878 <HM10_handle_connection+0x198>
    }
    else if(strncmp(msg_pt,MS_SET_NEIGHBOUR_VALS,strlen(MS_SET_NEIGHBOUR_VALS)) == 0)
 8005850:	2207      	movs	r2, #7
 8005852:	4954      	ldr	r1, [pc, #336]	; (80059a4 <HM10_handle_connection+0x2c4>)
 8005854:	69f8      	ldr	r0, [r7, #28]
 8005856:	f002 fbad 	bl	8007fb4 <strncmp>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HM10_handle_connection+0x198>
    {
      // probably won't be needed
      // stat = HM10_neighbour_vals(msg_pt);
    }
    else if(strncmp(msg_pt,MS_CALIBRATE_SENSORS,strlen(MS_CALIBRATE_SENSORS)) == 0)
 8005860:	2208      	movs	r2, #8
 8005862:	4951      	ldr	r1, [pc, #324]	; (80059a8 <HM10_handle_connection+0x2c8>)
 8005864:	69f8      	ldr	r0, [r7, #28]
 8005866:	f002 fba5 	bl	8007fb4 <strncmp>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <HM10_handle_connection+0x198>
    {
      // user app requested immediate sensor calibration (currently user is standing in the proper position)
      stat = HM10_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	76bb      	strb	r3, [r7, #26]
      sens_calibrate();
 8005874:	f000 ff98 	bl	80067a8 <sens_calibrate>
    }

    // increasing pointer to search the rest of the buffer
    msg_pt += 3;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3303      	adds	r3, #3
 800587c:	61fb      	str	r3, [r7, #28]

    if(stat == HM10_OK && my_strstr(msg_pt,"MS+",RESPONSE_BUF_SIZE) == NULL)
 800587e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HM10_handle_connection+0x1ba>
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	493d      	ldr	r1, [pc, #244]	; (8005980 <HM10_handle_connection+0x2a0>)
 800588a:	69f8      	ldr	r0, [r7, #28]
 800588c:	f7ff ff02 	bl	8005694 <my_strstr>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HM10_handle_connection+0x1ba>
      empty_buff = true;
 8005896:	2301      	movs	r3, #1
 8005898:	76fb      	strb	r3, [r7, #27]
  while((msg_pt = my_strstr(msg_pt,"MS+",RESPONSE_BUF_SIZE)) != NULL)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	4938      	ldr	r1, [pc, #224]	; (8005980 <HM10_handle_connection+0x2a0>)
 800589e:	69f8      	ldr	r0, [r7, #28]
 80058a0:	f7ff fef8 	bl	8005694 <my_strstr>
 80058a4:	61f8      	str	r0, [r7, #28]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d198      	bne.n	80057de <HM10_handle_connection+0xfe>
  }


  if(empty_buff || (respos >= (RESPONSE_BUF_SIZE - 20)))
 80058ac:	7efb      	ldrb	r3, [r7, #27]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <HM10_handle_connection+0x1da>
 80058b2:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HM10_handle_connection+0x280>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b6b      	cmp	r3, #107	; 0x6b
 80058b8:	d907      	bls.n	80058ca <HM10_handle_connection+0x1ea>
  {
    // clearing buffer if we received full commands or buffer is about to overflow
    memset(response_buf,0,RESPONSE_BUF_SIZE);
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	2100      	movs	r1, #0
 80058be:	4829      	ldr	r0, [pc, #164]	; (8005964 <HM10_handle_connection+0x284>)
 80058c0:	f002 fa16 	bl	8007cf0 <memset>
    respos = 0;
 80058c4:	4b26      	ldr	r3, [pc, #152]	; (8005960 <HM10_handle_connection+0x280>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
  }

  // handling hm10 status
  switch(stats.status)
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HM10_handle_connection+0x298>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	d841      	bhi.n	8005956 <HM10_handle_connection+0x276>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <HM10_handle_connection+0x1f8>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	080058ff 	.word	0x080058ff
 80058dc:	08005927 	.word	0x08005927
 80058e0:	08005927 	.word	0x08005927
 80058e4:	080058f9 	.word	0x080058f9
 80058e8:	0800592d 	.word	0x0800592d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	080058f9 	.word	0x080058f9
 80058f4:	0800593d 	.word	0x0800593d
  {

  case HM10_CONN_LOST:
  case HM10_START_FAIL:
    // if ble lost connection or failed to start new session it needs to be restarted by AT commands
    HM10_restart_session();
 80058f8:	f7ff fe1e 	bl	8005538 <HM10_restart_session>
    break;
 80058fc:	e02b      	b.n	8005956 <HM10_handle_connection+0x276>

  case HM10_NOT_RESPONDING:
    // if module is not responding we will repeatedly reset ble till we got any communication
    HM10_hard_reset();
 80058fe:	f7ff fbf9 	bl	80050f4 <HM10_hard_reset>
    osDelay(1000);
 8005902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005906:	f001 f81f 	bl	8006948 <osDelay>
    if(HM10_AT_SendCommandAndGetResponse("AT", "OK", HM10_SHORT_TIMEOUT, 5) == HM10_OK)
 800590a:	2305      	movs	r3, #5
 800590c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005910:	4926      	ldr	r1, [pc, #152]	; (80059ac <HM10_handle_connection+0x2cc>)
 8005912:	4827      	ldr	r0, [pc, #156]	; (80059b0 <HM10_handle_connection+0x2d0>)
 8005914:	f7ff fcbc 	bl	8005290 <HM10_AT_SendCommandAndGetResponse>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d116      	bne.n	800594c <HM10_handle_connection+0x26c>
      stats.status = HM10_NOT_INITED;
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <HM10_handle_connection+0x298>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
    break;
 8005924:	e012      	b.n	800594c <HM10_handle_connection+0x26c>

  case HM10_NOT_INITED:
  case HM10_RESET_FAIL:
    //initializing ble after recovering communication or error during last init
    HM10_configure_device();
 8005926:	f7ff fcdd 	bl	80052e4 <HM10_configure_device>
    break;
 800592a:	e014      	b.n	8005956 <HM10_handle_connection+0x276>

  case HM10_CONNECTED:
  case HM10_READY:
    // if device is connected or just initialized and we got sleep mode request
    if(stats.sleep_mode_change == SET_N_STAY_SLEEP_MODE)
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HM10_handle_connection+0x298>)
 800592e:	7c1b      	ldrb	r3, [r3, #16]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10d      	bne.n	8005950 <HM10_handle_connection+0x270>
      HM10_set_sleep_mode(true);
 8005934:	2001      	movs	r0, #1
 8005936:	f7ff fe5b 	bl	80055f0 <HM10_set_sleep_mode>
    break;
 800593a:	e009      	b.n	8005950 <HM10_handle_connection+0x270>

  case HM10_SLEEP_MODE:
    // exiting sleep mode if we got request
    if(stats.sleep_mode_change == DISABLE_SLEEP_MODE)
 800593c:	4b0e      	ldr	r3, [pc, #56]	; (8005978 <HM10_handle_connection+0x298>)
 800593e:	7c1b      	ldrb	r3, [r3, #16]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d107      	bne.n	8005954 <HM10_handle_connection+0x274>
      HM10_set_sleep_mode(false);
 8005944:	2000      	movs	r0, #0
 8005946:	f7ff fe53 	bl	80055f0 <HM10_set_sleep_mode>
    break;
 800594a:	e003      	b.n	8005954 <HM10_handle_connection+0x274>
    break;
 800594c:	bf00      	nop
 800594e:	e002      	b.n	8005956 <HM10_handle_connection+0x276>
    break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HM10_handle_connection+0x276>
    break;
 8005954:	bf00      	nop

  }
}
 8005956:	bf00      	nop
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200005ec 	.word	0x200005ec
 8005964:	2000056c 	.word	0x2000056c
 8005968:	080091f4 	.word	0x080091f4
 800596c:	080091f8 	.word	0x080091f8
 8005970:	0800920c 	.word	0x0800920c
 8005974:	20000014 	.word	0x20000014
 8005978:	20000010 	.word	0x20000010
 800597c:	080091cc 	.word	0x080091cc
 8005980:	08009214 	.word	0x08009214
 8005984:	08009218 	.word	0x08009218
 8005988:	200005f0 	.word	0x200005f0
 800598c:	200005f4 	.word	0x200005f4
 8005990:	20000079 	.word	0x20000079
 8005994:	08009224 	.word	0x08009224
 8005998:	2000006f 	.word	0x2000006f
 800599c:	08009230 	.word	0x08009230
 80059a0:	2000006c 	.word	0x2000006c
 80059a4:	0800923c 	.word	0x0800923c
 80059a8:	08009244 	.word	0x08009244
 80059ac:	08009100 	.word	0x08009100
 80059b0:	08009104 	.word	0x08009104

080059b4 <ble_enable_sleep_mode>:

void ble_enable_sleep_mode() { stats.sleep_mode_change = SET_N_STAY_SLEEP_MODE;  };
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <ble_enable_sleep_mode+0x14>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	741a      	strb	r2, [r3, #16]
 80059be:	bf00      	nop
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20000010 	.word	0x20000010

080059cc <ble_disable_sleep_mode>:

void ble_disable_sleep_mode(){ stats.sleep_mode_change = stats.status == HM10_SLEEP_MODE ? DISABLE_SLEEP_MODE : DO_NOT_CHANGE;     };
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <ble_disable_sleep_mode+0x20>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d101      	bne.n	80059dc <ble_disable_sleep_mode+0x10>
 80059d8:	2202      	movs	r2, #2
 80059da:	e000      	b.n	80059de <ble_disable_sleep_mode+0x12>
 80059dc:	2200      	movs	r2, #0
 80059de:	4b03      	ldr	r3, [pc, #12]	; (80059ec <ble_disable_sleep_mode+0x20>)
 80059e0:	741a      	strb	r2, [r3, #16]
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000010 	.word	0x20000010

080059f0 <ble_am_i_sleeping>:

bool ble_am_i_sleeping()
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return (stats.sleep_mode_change == SET_N_STAY_SLEEP_MODE ? true : false);
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <ble_am_i_sleeping+0x1c>)
 80059f6:	7c1b      	ldrb	r3, [r3, #16]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000010 	.word	0x20000010

08005a10 <Haptic_DRV2605_Haptic_DRV2605>:
  ACTUATOR_AMP_PID_EN
};

extern I2C_HandleTypeDef hi2c2;

void Haptic_DRV2605_Haptic_DRV2605(){
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
Haptic_I2C_Address = DRV2605_I2C_ADDR;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <Haptic_DRV2605_Haptic_DRV2605+0x14>)
 8005a16:	22b4      	movs	r2, #180	; 0xb4
 8005a18:	701a      	strb	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	200005f8 	.word	0x200005f8

08005a28 <Haptic_DRV2605_readReg>:
/********************************************************************/

int Haptic_DRV2605_readReg(uint8_t reg) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_StatusTypeDef hal_status;

  hal_status = HAL_I2C_Master_Transmit(&hi2c2, Haptic_I2C_Address, &reg, 1, 10);
 8005a32:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <Haptic_DRV2605_readReg+0x58>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b299      	uxth	r1, r3
 8005a38:	1dfa      	adds	r2, r7, #7
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4810      	ldr	r0, [pc, #64]	; (8005a84 <Haptic_DRV2605_readReg+0x5c>)
 8005a42:	f7fd fafb 	bl	800303c <HAL_I2C_Master_Transmit>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]

  if(hal_status == HAL_OK)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10c      	bne.n	8005a6a <Haptic_DRV2605_readReg+0x42>
    hal_status = HAL_I2C_Master_Receive(&hi2c2, Haptic_I2C_Address, &data, 1, 10);
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <Haptic_DRV2605_readReg+0x58>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b299      	uxth	r1, r3
 8005a56:	f107 020e 	add.w	r2, r7, #14
 8005a5a:	230a      	movs	r3, #10
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4808      	ldr	r0, [pc, #32]	; (8005a84 <Haptic_DRV2605_readReg+0x5c>)
 8005a62:	f7fd fbe9 	bl	8003238 <HAL_I2C_Master_Receive>
 8005a66:	4603      	mov	r3, r0
 8005a68:	73fb      	strb	r3, [r7, #15]

  if(hal_status == HAL_OK)
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <Haptic_DRV2605_readReg+0x4c>
    return((int)data);
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	e001      	b.n	8005a78 <Haptic_DRV2605_readReg+0x50>

  return (HAPTIC_FAIL);
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200005f8 	.word	0x200005f8
 8005a84:	20000468 	.word	0x20000468

08005a88 <Haptic_DRV2605_writeReg>:

int Haptic_DRV2605_writeReg(uint8_t reg, uint8_t data) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460a      	mov	r2, r1
 8005a92:	71fb      	strb	r3, [r7, #7]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef hal_status;
  uint8_t tx_data[2] = {reg,data};
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	733b      	strb	r3, [r7, #12]
 8005a9c:	79bb      	ldrb	r3, [r7, #6]
 8005a9e:	737b      	strb	r3, [r7, #13]

  hal_status = HAL_I2C_Master_Transmit(&hi2c2, Haptic_I2C_Address, tx_data, 2, 20);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <Haptic_DRV2605_writeReg+0x48>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	b299      	uxth	r1, r3
 8005aa6:	f107 020c 	add.w	r2, r7, #12
 8005aaa:	2314      	movs	r3, #20
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2302      	movs	r3, #2
 8005ab0:	4808      	ldr	r0, [pc, #32]	; (8005ad4 <Haptic_DRV2605_writeReg+0x4c>)
 8005ab2:	f7fd fac3 	bl	800303c <HAL_I2C_Master_Transmit>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  if(hal_status == HAL_OK)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <Haptic_DRV2605_writeReg+0x3c>
    return(HAPTIC_SUCCESS);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e001      	b.n	8005ac8 <Haptic_DRV2605_writeReg+0x40>

  return (HAPTIC_FAIL);
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200005f8 	.word	0x200005f8
 8005ad4:	20000468 	.word	0x20000468

08005ad8 <Haptic_DRV2605_writeRegScript>:
  }
  return(HAPTIC_SUCCESS);
}

int Haptic_DRV2605_writeRegScript(const struct scr_type script[])
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  for (int i = 0; script[i].reg != ACTUATOR_SCRIPT_END; i++) {
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e02f      	b.n	8005b46 <Haptic_DRV2605_writeRegScript+0x6e>
    if (script[i].reg == ACTUATOR_SCRIPT_DELAY) {
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2bfe      	cmp	r3, #254	; 0xfe
 8005af2:	d108      	bne.n	8005b06 <Haptic_DRV2605_writeRegScript+0x2e>
      osDelay(script[i].val);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 ff22 	bl	8006948 <osDelay>
 8005b04:	e01c      	b.n	8005b40 <Haptic_DRV2605_writeRegScript+0x68>
    } else if (script[i].reg == ACTUATOR_SCRIPT_GOWAIT) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2bfd      	cmp	r3, #253	; 0xfd
 8005b12:	d102      	bne.n	8005b1a <Haptic_DRV2605_writeRegScript+0x42>
          Haptic_DRV2605_goWait();
 8005b14:	f000 f89b 	bl	8005c4e <Haptic_DRV2605_goWait>
 8005b18:	e012      	b.n	8005b40 <Haptic_DRV2605_writeRegScript+0x68>
    } else if (Haptic_DRV2605_writeReg(script[i].reg, script[i].val)) {
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	7818      	ldrb	r0, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f7ff ffaa 	bl	8005a88 <Haptic_DRV2605_writeReg>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <Haptic_DRV2605_writeRegScript+0x68>
//      printf("ERROR DRV2605: writeRegScript failure\n");
      return(HAPTIC_FAIL);
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	e00a      	b.n	8005b56 <Haptic_DRV2605_writeRegScript+0x7e>
  for (int i = 0; script[i].reg != ACTUATOR_SCRIPT_END; i++) {
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2bff      	cmp	r3, #255	; 0xff
 8005b52:	d1c8      	bne.n	8005ae6 <Haptic_DRV2605_writeRegScript+0xe>
    }
  }
  return(HAPTIC_SUCCESS);
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <Haptic_DRV2605_getDeviceID>:

int Haptic_DRV2605_getDeviceID(void) {
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
  int id = Haptic_DRV2605_readReg(DRV2605_REG_STATUS);
 8005b64:	2000      	movs	r0, #0
 8005b66:	f7ff ff5f 	bl	8005a28 <Haptic_DRV2605_readReg>
 8005b6a:	6078      	str	r0, [r7, #4]
  if (id == 0xFF) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	d102      	bne.n	8005b78 <Haptic_DRV2605_getDeviceID+0x1a>
    // unconnected I2C bus...
    return(HAPTIC_FAIL);
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295
 8005b76:	e003      	b.n	8005b80 <Haptic_DRV2605_getDeviceID+0x22>
  } else {
      return((id & 0xE0 ) >> 5); // read chip ID register
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	115b      	asrs	r3, r3, #5
 8005b7c:	f003 0307 	and.w	r3, r3, #7
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <Haptic_DRV2605_inited>:
bool inited = false;

bool Haptic_DRV2605_inited()
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
return inited;
 8005b8c:	4b02      	ldr	r3, [pc, #8]	; (8005b98 <Haptic_DRV2605_inited+0x10>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	2000067c 	.word	0x2000067c

08005b9c <Haptic_DRV2605_begin>:
/**************************************************************************/
/*!
    @brief  Initialize the DRV2605 Controller
*/
int Haptic_DRV2605_begin()
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0

  //! initialize an array of pointers to the scripts
  scriptList[SCRIPT_RESET] = haptic_reset;     //! 'reset' script always at index zero
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <Haptic_DRV2605_begin+0x44>)
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <Haptic_DRV2605_begin+0x48>)
 8005ba4:	601a      	str	r2, [r3, #0]
  scriptList[SCRIPT_ERM_BASIC] = haptic_ERM_basic; //! ERM (bar) basic setup
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <Haptic_DRV2605_begin+0x44>)
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <Haptic_DRV2605_begin+0x4c>)
 8005baa:	609a      	str	r2, [r3, #8]
  scriptList[SCRIPT_ERM_COIN] = haptic_ERM_coin;   //! ERM (coin) basic setup
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <Haptic_DRV2605_begin+0x44>)
 8005bae:	4a0f      	ldr	r2, [pc, #60]	; (8005bec <Haptic_DRV2605_begin+0x50>)
 8005bb0:	60da      	str	r2, [r3, #12]
  actuator.dev_scripts_max = SCRIPT_LAST + 1;
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <Haptic_DRV2605_begin+0x54>)
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	615a      	str	r2, [r3, #20]

  Haptic_DRV2605_Haptic_DRV2605();
 8005bb8:	f7ff ff2a 	bl	8005a10 <Haptic_DRV2605_Haptic_DRV2605>
  Haptic_DRV2605_playScript(SCRIPT_RESET);
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f000 f81b 	bl	8005bf8 <Haptic_DRV2605_playScript>

  if (Haptic_DRV2605_getDeviceID() == HAPTIC_CHIP_ID) //! verify that it is a DRV2605L
 8005bc2:	f7ff ffcc 	bl	8005b5e <Haptic_DRV2605_getDeviceID>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b07      	cmp	r3, #7
 8005bca:	d104      	bne.n	8005bd6 <Haptic_DRV2605_begin+0x3a>
  {
    inited = true;
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <Haptic_DRV2605_begin+0x58>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
    return (HAPTIC_SUCCESS);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e001      	b.n	8005bda <Haptic_DRV2605_begin+0x3e>
  }
  else
    return (HAPTIC_FAIL);
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295


  Haptic_DRV2605_go();


}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200005fc 	.word	0x200005fc
 8005be4:	08009288 	.word	0x08009288
 8005be8:	08009290 	.word	0x08009290
 8005bec:	080092b4 	.word	0x080092b4
 8005bf0:	20000024 	.word	0x20000024
 8005bf4:	2000067c 	.word	0x2000067c

08005bf8 <Haptic_DRV2605_playScript>:
    Haptic_DRV2605_writeReg(DRV2605_REG_WAVESEQ1+slot, wave);
  return(HAPTIC_SUCCESS);
}


int Haptic_DRV2605_playScript(int num) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if (num < 0 || num >= actuator.dev_scripts_max) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	db04      	blt.n	8005c10 <Haptic_DRV2605_playScript+0x18>
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <Haptic_DRV2605_playScript+0x3c>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	db02      	blt.n	8005c16 <Haptic_DRV2605_playScript+0x1e>
    return(HAPTIC_ILL_ARG);
 8005c10:	f06f 0303 	mvn.w	r3, #3
 8005c14:	e00a      	b.n	8005c2c <Haptic_DRV2605_playScript+0x34>
  }
  actuator.dev_script = num;
 8005c16:	4a07      	ldr	r2, [pc, #28]	; (8005c34 <Haptic_DRV2605_playScript+0x3c>)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6113      	str	r3, [r2, #16]
    return(Haptic_DRV2605_writeRegScript(scriptList[num]));
 8005c1c:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <Haptic_DRV2605_playScript+0x40>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff57 	bl	8005ad8 <Haptic_DRV2605_writeRegScript>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000024 	.word	0x20000024
 8005c38:	200005fc 	.word	0x200005fc

08005c3c <Haptic_DRV2605_go>:


/*! @brief go - trigger sequence play and return immediately
*/
int Haptic_DRV2605_go(void) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  Haptic_DRV2605_writeReg(DRV2605_REG_GO, 1);
 8005c40:	2101      	movs	r1, #1
 8005c42:	200c      	movs	r0, #12
 8005c44:	f7ff ff20 	bl	8005a88 <Haptic_DRV2605_writeReg>
  return(HAPTIC_SUCCESS);
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <Haptic_DRV2605_goWait>:

/*! @brief goWait - trigger sequence play and wait for completion
*/
int Haptic_DRV2605_goWait(void) {
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	af00      	add	r7, sp, #0
  Haptic_DRV2605_writeReg(DRV2605_REG_GO, 1);
 8005c52:	2101      	movs	r1, #1
 8005c54:	200c      	movs	r0, #12
 8005c56:	f7ff ff17 	bl	8005a88 <Haptic_DRV2605_writeReg>
  while (Haptic_DRV2605_readReg(DRV2605_REG_GO) & 0x01) {
 8005c5a:	bf00      	nop
 8005c5c:	200c      	movs	r0, #12
 8005c5e:	f7ff fee3 	bl	8005a28 <Haptic_DRV2605_readReg>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f7      	bne.n	8005c5c <Haptic_DRV2605_goWait+0xe>
   // yield(); // needed for RTOS based ESP8266/ESP32, etc.
  }
  return(HAPTIC_SUCCESS);
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HM10_io_init>:
static volatile uint32_t CmdTxTail;
static volatile uint32_t CmdRxHead;
static volatile uint32_t CmdRxTail;

void HM10_io_init(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  CmdTxHead = 0;
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <HM10_io_init+0x7c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
  CmdTxTail = 0;
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HM10_io_init+0x80>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
  CmdRxHead = 0;
 8005c84:	4b1c      	ldr	r3, [pc, #112]	; (8005cf8 <HM10_io_init+0x84>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
  CmdRxTail = 0;
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HM10_io_init+0x88>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]

  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_PE);
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <HM10_io_init+0x8c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <HM10_io_init+0x8c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9e:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_TC);
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <HM10_io_init+0x8c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <HM10_io_init+0x8c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_IDLE);
 8005cb0:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <HM10_io_init+0x8c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HM10_io_init+0x8c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0210 	bic.w	r2, r2, #16
 8005cbe:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_CTS);
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <HM10_io_init+0x8c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <HM10_io_init+0x8c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT( &HM10_CMD_HUART, UART_IT_RXNE);
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HM10_io_init+0x8c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <HM10_io_init+0x8c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0220 	orr.w	r2, r2, #32
 8005cde:	60da      	str	r2, [r3, #12]

  CmdUart = HM10_CMD_HUART.Instance; //must be at the end
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <HM10_io_init+0x8c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <HM10_io_init+0x90>)
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	20000784 	.word	0x20000784
 8005cf4:	20000788 	.word	0x20000788
 8005cf8:	2000078c 	.word	0x2000078c
 8005cfc:	20000790 	.word	0x20000790
 8005d00:	200004bc 	.word	0x200004bc
 8005d04:	20000680 	.word	0x20000680

08005d08 <HM10_io_deinit>:

void HM10_io_deinit(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  // disabling all uart interrupts
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_PE);
 8005d0c:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1a:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_TC);
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_IDLE);
 8005d2c:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0210 	bic.w	r2, r2, #16
 8005d3a:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_CTS);
 8005d3c:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4a:	615a      	str	r2, [r3, #20]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_LBD);
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5a:	611a      	str	r2, [r3, #16]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_ERR);
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	615a      	str	r2, [r3, #20]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_RXNE);
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0220 	bic.w	r2, r2, #32
 8005d7a:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_TXE);
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <HM10_io_deinit+0x8c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8a:	60da      	str	r2, [r3, #12]
}
 8005d8c:	bf00      	nop
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	200004bc 	.word	0x200004bc

08005d98 <HM10_io_cmd_irq_handler>:

void HM10_io_cmd_irq_handler(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
  if (!CmdUart) {
 8005d9e:	4b2c      	ldr	r3, [pc, #176]	; (8005e50 <HM10_io_cmd_irq_handler+0xb8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HM10_io_cmd_irq_handler+0x14>
    HM10_io_init();
 8005da6:	f7ff ff65 	bl	8005c74 <HM10_io_init>
    return;
 8005daa:	e04e      	b.n	8005e4a <HM10_io_cmd_irq_handler+0xb2>
  }

  uint32_t sr = CmdUart->SR;
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HM10_io_cmd_irq_handler+0xb8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
  __HAL_UART_CLEAR_OREFLAG(&HM10_CMD_HUART);
  __HAL_UART_CLEAR_FEFLAG(&HM10_CMD_HUART);
#endif

  //RXNE
  if (sr & (USART_SR_RXNE | USART_SR_ORE)) {  //FE flag is never alone without RXNE or ORE, so we don't have to check for it
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <HM10_io_cmd_irq_handler+0x68>
    uint8_t dr = CmdUart->DR;
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HM10_io_cmd_irq_handler+0xb8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	72fb      	strb	r3, [r7, #11]
    if ((sr & USART_SR_FE) == 0) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d117      	bne.n	8005e00 <HM10_io_cmd_irq_handler+0x68>
      uint32_t tmphead = (CmdRxHead + 1) & CMD_RX_BUF_MASK;
 8005dd0:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <HM10_io_cmd_irq_handler+0xbc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	607b      	str	r3, [r7, #4]
      if (tmphead == CmdRxTail) {
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <HM10_io_cmd_irq_handler+0xc0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d104      	bne.n	8005df0 <HM10_io_cmd_irq_handler+0x58>
        HM10_io_deinit();
 8005de6:	f7ff ff8f 	bl	8005d08 <HM10_io_deinit>
        HM10_io_init();
 8005dea:	f7ff ff43 	bl	8005c74 <HM10_io_init>
 8005dee:	e007      	b.n	8005e00 <HM10_io_cmd_irq_handler+0x68>
        //overflow
      } else {
        CmdRxHead = tmphead;
 8005df0:	4a18      	ldr	r2, [pc, #96]	; (8005e54 <HM10_io_cmd_irq_handler+0xbc>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6013      	str	r3, [r2, #0]
        CmdRxBuf[tmphead] = dr;
 8005df6:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HM10_io_cmd_irq_handler+0xc4>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	7afa      	ldrb	r2, [r7, #11]
 8005dfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  //TXE
  if (sr & USART_SR_TXE) {
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01f      	beq.n	8005e4a <HM10_io_cmd_irq_handler+0xb2>
    if (CmdTxHead != CmdTxTail) {
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <HM10_io_cmd_irq_handler+0xc8>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <HM10_io_cmd_irq_handler+0xcc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d011      	beq.n	8005e3a <HM10_io_cmd_irq_handler+0xa2>
      uint32_t tmptail = (CmdTxTail + 1) & CMD_TX_BUF_MASK;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <HM10_io_cmd_irq_handler+0xcc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e20:	603b      	str	r3, [r7, #0]
      CmdTxTail = tmptail;
 8005e22:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <HM10_io_cmd_irq_handler+0xcc>)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6013      	str	r3, [r2, #0]
      CmdUart->DR = CmdTxBuf[tmptail];
 8005e28:	4a0f      	ldr	r2, [pc, #60]	; (8005e68 <HM10_io_cmd_irq_handler+0xd0>)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HM10_io_cmd_irq_handler+0xb8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e007      	b.n	8005e4a <HM10_io_cmd_irq_handler+0xb2>
    } else
      __HAL_UART_DISABLE_IT(&HM10_CMD_HUART, UART_IT_TXE);
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HM10_io_cmd_irq_handler+0xd4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HM10_io_cmd_irq_handler+0xd4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e48:	60da      	str	r2, [r3, #12]
  }
}
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000680 	.word	0x20000680
 8005e54:	2000078c 	.word	0x2000078c
 8005e58:	20000790 	.word	0x20000790
 8005e5c:	20000704 	.word	0x20000704
 8005e60:	20000784 	.word	0x20000784
 8005e64:	20000788 	.word	0x20000788
 8005e68:	20000684 	.word	0x20000684
 8005e6c:	200004bc 	.word	0x200004bc

08005e70 <HM10_io_cmd_getc>:

bool HM10_io_cmd_getc(uint8_t *d)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  if (CmdRxHead == CmdRxTail)
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <HM10_io_cmd_getc+0x44>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <HM10_io_cmd_getc+0x48>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d101      	bne.n	8005e88 <HM10_io_cmd_getc+0x18>
    return false;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e010      	b.n	8005eaa <HM10_io_cmd_getc+0x3a>

  // increasing tail pointer after reaching max value tmptail will equal 0
  uint32_t tmptail = (CmdRxTail + 1) & CMD_RX_BUF_MASK;
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HM10_io_cmd_getc+0x48>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e92:	60fb      	str	r3, [r7, #12]
    CmdRxTail = tmptail;
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <HM10_io_cmd_getc+0x48>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6013      	str	r3, [r2, #0]

  // passing data from tail pt to argument pt
  *d = CmdRxBuf[tmptail];
 8005e9a:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <HM10_io_cmd_getc+0x4c>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	701a      	strb	r2, [r3, #0]

  return true;
 8005ea8:	2301      	movs	r3, #1
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	2000078c 	.word	0x2000078c
 8005eb8:	20000790 	.word	0x20000790
 8005ebc:	20000704 	.word	0x20000704

08005ec0 <HM10_io_cmd_putc>:

bool HM10_io_cmd_putc(uint8_t d, uint32_t timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	71fb      	strb	r3, [r7, #7]
  uint32_t tmphead = (CmdTxHead + 1) & CMD_TX_BUF_MASK;
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HM10_io_cmd_putc+0x74>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed6:	60fb      	str	r3, [r7, #12]

  uint32_t start = HAL_GetTick();
 8005ed8:	f7fb fe42 	bl	8001b60 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]
  // wait for completing last byte transfer (head + 1 = tail)
  while ((tmphead == CmdTxTail) && (HAL_GetTick() - start < timeout)) { }
 8005ede:	bf00      	nop
 8005ee0:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HM10_io_cmd_putc+0x78>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d107      	bne.n	8005efa <HM10_io_cmd_putc+0x3a>
 8005eea:	f7fb fe39 	bl	8001b60 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d8f2      	bhi.n	8005ee0 <HM10_io_cmd_putc+0x20>

  if (tmphead != CmdTxTail) {
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <HM10_io_cmd_putc+0x78>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d011      	beq.n	8005f28 <HM10_io_cmd_putc+0x68>
    // passing byte to buffer and updating head pt
    CmdTxBuf[tmphead] = d;
 8005f04:	4a0d      	ldr	r2, [pc, #52]	; (8005f3c <HM10_io_cmd_putc+0x7c>)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	79fa      	ldrb	r2, [r7, #7]
 8005f0c:	701a      	strb	r2, [r3, #0]
    CmdTxHead = tmphead;
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <HM10_io_cmd_putc+0x74>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6013      	str	r3, [r2, #0]
  } else
    return false;

  // enabling tx interrupt
  __HAL_UART_ENABLE_IT(&HM10_CMD_HUART, UART_IT_TXE);
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <HM10_io_cmd_putc+0x80>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <HM10_io_cmd_putc+0x80>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f22:	60da      	str	r2, [r3, #12]
  return true;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HM10_io_cmd_putc+0x6a>
    return false;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000784 	.word	0x20000784
 8005f38:	20000788 	.word	0x20000788
 8005f3c:	20000684 	.word	0x20000684
 8005f40:	200004bc 	.word	0x200004bc

08005f44 <LSM_readReg>:
volatile bool lsm_inited = false;


// read / write operations made on i2c hal functions

static bool LSM_readReg(uint8_t reg, uint8_t *data, uint8_t size) {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71bb      	strb	r3, [r7, #6]

  HAL_StatusTypeDef status;

  if((status = HAL_I2C_Master_Transmit(&hi2c2, LSM6_I2C_ADDR, &reg, 1, 20)) == HAL_OK)
 8005f54:	1dfa      	adds	r2, r7, #7
 8005f56:	2314      	movs	r3, #20
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	21d6      	movs	r1, #214	; 0xd6
 8005f5e:	480e      	ldr	r0, [pc, #56]	; (8005f98 <LSM_readReg+0x54>)
 8005f60:	f7fd f86c 	bl	800303c <HAL_I2C_Master_Transmit>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <LSM_readReg+0x40>
    status = HAL_I2C_Master_Receive(&hi2c2, LSM6_I2C_ADDR, data, size, 20);
 8005f6e:	79bb      	ldrb	r3, [r7, #6]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2214      	movs	r2, #20
 8005f74:	9200      	str	r2, [sp, #0]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	21d6      	movs	r1, #214	; 0xd6
 8005f7a:	4807      	ldr	r0, [pc, #28]	; (8005f98 <LSM_readReg+0x54>)
 8005f7c:	f7fd f95c 	bl	8003238 <HAL_I2C_Master_Receive>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]

  return(status);
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000468 	.word	0x20000468

08005f9c <LSM_writeReg>:

static bool LSM_writeReg(uint8_t reg, uint8_t data) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	460a      	mov	r2, r1
 8005fa6:	71fb      	strb	r3, [r7, #7]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_data[2] = {reg,data};
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	733b      	strb	r3, [r7, #12]
 8005fb0:	79bb      	ldrb	r3, [r7, #6]
 8005fb2:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(&hi2c2, LSM6_I2C_ADDR, tx_data, 2, 20) == HAL_OK)
 8005fb4:	f107 020c 	add.w	r2, r7, #12
 8005fb8:	2314      	movs	r3, #20
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	21d6      	movs	r1, #214	; 0xd6
 8005fc0:	4806      	ldr	r0, [pc, #24]	; (8005fdc <LSM_writeReg+0x40>)
 8005fc2:	f7fd f83b 	bl	800303c <HAL_I2C_Master_Transmit>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <LSM_writeReg+0x34>
    return true;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <LSM_writeReg+0x36>

  return false;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000468 	.word	0x20000468

08005fe0 <lsm_init>:

void lsm_init()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
  uint8_t who_i_am;
  LSM_readReg(LSM6_WHO_I_AM_REG, &who_i_am, 1);
 8005fe6:	1dfb      	adds	r3, r7, #7
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4619      	mov	r1, r3
 8005fec:	200f      	movs	r0, #15
 8005fee:	f7ff ffa9 	bl	8005f44 <LSM_readReg>

  //  1101011
  if(who_i_am == LSM6DSO_WHO_I_AM_REG_VAL) // just checking
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b6c      	cmp	r3, #108	; 0x6c
 8005ff6:	d12a      	bne.n	800604e <lsm_init+0x6e>
  {


    LSM_writeReg(LSM6DSO_FUNC_CFG_ACCESS, 0x80);// Enable access to embedded functions registers
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f7ff ffce 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_PAGE_RW,         0x40);// Select read operation mode
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	2017      	movs	r0, #23
 8006004:	f7ff ffca 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_PAGE_SEL,        0x11);// Select page 1
 8006008:	2111      	movs	r1, #17
 800600a:	2002      	movs	r0, #2
 800600c:	f7ff ffc6 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_PAGE_ADDR,       0x83);// Set address
 8006010:	2183      	movs	r1, #131	; 0x83
 8006012:	2008      	movs	r0, #8
 8006014:	f7ff ffc2 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_PAGE_VALUE,      0x04);// Set register value
 8006018:	2104      	movs	r1, #4
 800601a:	2009      	movs	r0, #9
 800601c:	f7ff ffbe 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_PAGE_RW,         0x00);// Write operation disabled
 8006020:	2100      	movs	r1, #0
 8006022:	2017      	movs	r0, #23
 8006024:	f7ff ffba 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_EMB_FUNC_EN_A,   0x08);// Enable step counting
 8006028:	2108      	movs	r1, #8
 800602a:	2004      	movs	r0, #4
 800602c:	f7ff ffb6 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_EMB_FUNC_INT1,   0x08);// Interrupt to set GPIO pin after step detection
 8006030:	2108      	movs	r1, #8
 8006032:	200a      	movs	r0, #10
 8006034:	f7ff ffb2 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_EMB_FUNC_INT2,   0x00);// Disable it
 8006038:	2100      	movs	r1, #0
 800603a:	200e      	movs	r0, #14
 800603c:	f7ff ffae 	bl	8005f9c <LSM_writeReg>
    LSM_writeReg(LSM6DSO_FUNC_CFG_ACCESS, 0x00);// Disable access to embedded functions registers
 8006040:	2100      	movs	r1, #0
 8006042:	2001      	movs	r0, #1
 8006044:	f7ff ffaa 	bl	8005f9c <LSM_writeReg>
//    LSM_writeReg(LSM6DSO_MD1_CFG,         0x02); testing
//    LSM_writeReg(LSM6DSO_CTRL1_XL,        0x28);
    lsm_inited = true;
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <lsm_init+0x78>)
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
  }
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000794 	.word	0x20000794

0800605c <handle_lsm_steps>:

uint16_t steps = 0;

void handle_lsm_steps()
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
  if(!lsm_inited)
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <handle_lsm_steps+0x40>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d110      	bne.n	8006094 <handle_lsm_steps+0x38>
    return;

  // function read quantity o detected steps
  uint8_t steps_reg_val[2];
  LSM_readReg(LSM6_STEP_COUNTER_L, steps_reg_val, 2);
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	2202      	movs	r2, #2
 8006076:	4619      	mov	r1, r3
 8006078:	204b      	movs	r0, #75	; 0x4b
 800607a:	f7ff ff63 	bl	8005f44 <LSM_readReg>

  steps = steps_reg_val[0] | (steps_reg_val[1] << 8);
 800607e:	793b      	ldrb	r3, [r7, #4]
 8006080:	b21a      	sxth	r2, r3
 8006082:	797b      	ldrb	r3, [r7, #5]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	b21b      	sxth	r3, r3
 8006088:	4313      	orrs	r3, r2
 800608a:	b21b      	sxth	r3, r3
 800608c:	b29a      	uxth	r2, r3
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <handle_lsm_steps+0x44>)
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e000      	b.n	8006096 <handle_lsm_steps+0x3a>
    return;
 8006094:	bf00      	nop

}
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000794 	.word	0x20000794
 80060a0:	20000796 	.word	0x20000796

080060a4 <motor_vibrate>:

motor_info motor = {};
uint32_t vibrate_untill_ts = 0;

void motor_vibrate(motor_state_info type)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
  // long vibration is a wrong position warning
  // short one informs that device is ready for establishing new bt connection
  switch(type)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d006      	beq.n	80060c2 <motor_vibrate+0x1e>
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	dc10      	bgt.n	80060da <motor_vibrate+0x36>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <motor_vibrate+0x34>
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d008      	beq.n	80060d2 <motor_vibrate+0x2e>
    break;
  case NO_WIBRATION:

    break;
  }
}
 80060c0:	e00b      	b.n	80060da <motor_vibrate+0x36>
    vibrate_untill_ts = HAL_GetTick() + LONG_VIBRATION_TIME;
 80060c2:	f7fb fd4d 	bl	8001b60 <HAL_GetTick>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80060cc:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <motor_vibrate+0x40>)
 80060ce:	6013      	str	r3, [r2, #0]
    break;
 80060d0:	e003      	b.n	80060da <motor_vibrate+0x36>
    Haptic_DRV2605_go();
 80060d2:	f7ff fdb3 	bl	8005c3c <Haptic_DRV2605_go>
    break;
 80060d6:	e000      	b.n	80060da <motor_vibrate+0x36>
    break;
 80060d8:	bf00      	nop
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000798 	.word	0x20000798

080060e8 <handle_vibration>:

void handle_vibration()
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  if(vibrate_untill_ts > HAL_GetTick())
 80060ec:	f7fb fd38 	bl	8001b60 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <handle_vibration+0x1c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d201      	bcs.n	80060fe <handle_vibration+0x16>
    Haptic_DRV2605_go();
 80060fa:	f7ff fd9f 	bl	8005c3c <Haptic_DRV2605_go>

}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000798 	.word	0x20000798

08006108 <map>:
all_sens_info sens = {{},{},{},{},{5,5,5,5,5}};
feet_info feet_prev;
feet_position_info pos_prev;


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7fa fa8b 	bl	8000634 <__aeabi_fsub>
 800611e:	4603      	mov	r3, r0
 8006120:	461c      	mov	r4, r3
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6a38      	ldr	r0, [r7, #32]
 8006126:	f7fa fa85 	bl	8000634 <__aeabi_fsub>
 800612a:	4603      	mov	r3, r0
 800612c:	4619      	mov	r1, r3
 800612e:	4620      	mov	r0, r4
 8006130:	f7fa fb8a 	bl	8000848 <__aeabi_fmul>
 8006134:	4603      	mov	r3, r0
 8006136:	461c      	mov	r4, r3
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fa fa7a 	bl	8000634 <__aeabi_fsub>
 8006140:	4603      	mov	r3, r0
 8006142:	4619      	mov	r1, r3
 8006144:	4620      	mov	r0, r4
 8006146:	f7fa fc33 	bl	80009b0 <__aeabi_fdiv>
 800614a:	4603      	mov	r3, r0
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa fa72 	bl	8000638 <__addsf3>
 8006154:	4603      	mov	r3, r0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}
	...

08006160 <floatToUintTab>:

static void floatToUintTab(float nr,char *tab)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  // weight is represented by 2 bytes  (integer and decimal part)
  uint16_t u_nr = (uint16_t)(nr*100);
 800616a:	4914      	ldr	r1, [pc, #80]	; (80061bc <floatToUintTab+0x5c>)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fa fb6b 	bl	8000848 <__aeabi_fmul>
 8006172:	4603      	mov	r3, r0
 8006174:	4618      	mov	r0, r3
 8006176:	f7fa fd2d 	bl	8000bd4 <__aeabi_f2uiz>
 800617a:	4603      	mov	r3, r0
 800617c:	81fb      	strh	r3, [r7, #14]
  // ble can't send '0' bytes so we need to add 1 to every byte to make sure that none of them get this value
  tab[0] = (u_nr / 100) + 1;
 800617e:	89fb      	ldrh	r3, [r7, #14]
 8006180:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <floatToUintTab+0x60>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	b29b      	uxth	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	3301      	adds	r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	701a      	strb	r2, [r3, #0]
  tab[1] = (u_nr % 100) + 1;
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <floatToUintTab+0x60>)
 8006198:	fba2 1203 	umull	r1, r2, r2, r3
 800619c:	0952      	lsrs	r2, r2, #5
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	fb01 f202 	mul.w	r2, r1, r2
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	3201      	adds	r2, #1
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	42c80000 	.word	0x42c80000
 80061c0:	51eb851f 	.word	0x51eb851f

080061c4 <transform_adc_to_weight>:

static void transform_adc_to_weight()
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af02      	add	r7, sp, #8
  for(uint8_t i=0;i<5;i++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	71fb      	strb	r3, [r7, #7]
 80061ce:	e033      	b.n	8006238 <transform_adc_to_weight+0x74>
  {
    if(adc_dma_result[i] < ADC_MIN_KG)
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <transform_adc_to_weight+0x84>)
 80061d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d8:	2b09      	cmp	r3, #9
 80061da:	d807      	bhi.n	80061ec <transform_adc_to_weight+0x28>
      sens.s[i].weight = 0;
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	4a1b      	ldr	r2, [pc, #108]	; (800624c <transform_adc_to_weight+0x88>)
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4413      	add	r3, r2
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	e014      	b.n	8006216 <transform_adc_to_weight+0x52>
      // if adc value is below minimum don't convert this
    else
      sens.s[i].weight  = map((float)adc_dma_result[i], ADC_MIN_KG, ADC_MAX_KG, MIN_KG, MAX_KG);
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <transform_adc_to_weight+0x84>)
 80061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fa facf 	bl	8000798 <__aeabi_ui2f>
 80061fa:	79fc      	ldrb	r4, [r7, #7]
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <transform_adc_to_weight+0x8c>)
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <transform_adc_to_weight+0x90>)
 8006206:	4912      	ldr	r1, [pc, #72]	; (8006250 <transform_adc_to_weight+0x8c>)
 8006208:	f7ff ff7e 	bl	8006108 <map>
 800620c:	4602      	mov	r2, r0
 800620e:	490f      	ldr	r1, [pc, #60]	; (800624c <transform_adc_to_weight+0x88>)
 8006210:	00e3      	lsls	r3, r4, #3
 8006212:	440b      	add	r3, r1
 8006214:	605a      	str	r2, [r3, #4]
      // if adc value is greater than minimum then map it to actual weight represented by sensor's resistance

    floatToUintTab(sens.s[i].weight, sens.wei_tx_data + (i*2)); // converting weight to binary data which will be sent by ble
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	4a0c      	ldr	r2, [pc, #48]	; (800624c <transform_adc_to_weight+0x88>)
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4619      	mov	r1, r3
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <transform_adc_to_weight+0x94>)
 8006228:	440b      	add	r3, r1
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7ff ff97 	bl	8006160 <floatToUintTab>
  for(uint8_t i=0;i<5;i++)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	3301      	adds	r3, #1
 8006236:	71fb      	strb	r3, [r7, #7]
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d9c8      	bls.n	80061d0 <transform_adc_to_weight+0xc>

  }
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}
 8006248:	20000518 	.word	0x20000518
 800624c:	20000044 	.word	0x20000044
 8006250:	41200000 	.word	0x41200000
 8006254:	44610000 	.word	0x44610000
 8006258:	20000079 	.word	0x20000079

0800625c <generate_colours>:
void generate_colours()
{
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b085      	sub	sp, #20
 8006260:	af02      	add	r7, sp, #8
  // in the phone app every sensor is presented with color related to him, it's easier to calculate those colors in C
  for(uint8_t i=0;i<5;i++)
 8006262:	2300      	movs	r3, #0
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	e0ae      	b.n	80063c6 <generate_colours+0x16a>
  {
    if(sens.s[i].weight == 0)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	4a5b      	ldr	r2, [pc, #364]	; (80063d8 <generate_colours+0x17c>)
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4413      	add	r3, r2
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f04f 0100 	mov.w	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f7fa fc7a 	bl	8000b70 <__aeabi_fcmpeq>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <generate_colours+0x3e>
    {
      // non pressed sensor's color is green
      sens.s[i].col_red = 0;
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4a54      	ldr	r2, [pc, #336]	; (80063d8 <generate_colours+0x17c>)
 8006286:	2100      	movs	r1, #0
 8006288:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      sens.s[i].col_green = 0xFF;
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	4a52      	ldr	r2, [pc, #328]	; (80063d8 <generate_colours+0x17c>)
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	4413      	add	r3, r2
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	705a      	strb	r2, [r3, #1]
 8006298:	e060      	b.n	800635c <generate_colours+0x100>
    }
    else if(sens.s[i].weight < (MAX_KG / 2))
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4a4e      	ldr	r2, [pc, #312]	; (80063d8 <generate_colours+0x17c>)
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	494d      	ldr	r1, [pc, #308]	; (80063dc <generate_colours+0x180>)
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fa fc6c 	bl	8000b84 <__aeabi_fcmplt>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01e      	beq.n	80062f0 <generate_colours+0x94>
    {
      // below weight middle value, the amount of red will increase and (green = max)
      sens.s[i].col_green = 0xFF;
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	4a48      	ldr	r2, [pc, #288]	; (80063d8 <generate_colours+0x17c>)
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	22ff      	movs	r2, #255	; 0xff
 80062bc:	705a      	strb	r2, [r3, #1]
      sens.s[i].col_red = (uint8_t)(map(sens.s[i].weight, MIN_KG, (MAX_KG / 2), 1, 255));
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	4a45      	ldr	r2, [pc, #276]	; (80063d8 <generate_colours+0x17c>)
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4413      	add	r3, r2
 80062c6:	6858      	ldr	r0, [r3, #4]
 80062c8:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <generate_colours+0x184>)
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80062d0:	4a42      	ldr	r2, [pc, #264]	; (80063dc <generate_colours+0x180>)
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	f7ff ff17 	bl	8006108 <map>
 80062da:	4603      	mov	r3, r0
 80062dc:	79fc      	ldrb	r4, [r7, #7]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa fc78 	bl	8000bd4 <__aeabi_f2uiz>
 80062e4:	4603      	mov	r3, r0
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <generate_colours+0x17c>)
 80062ea:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 80062ee:	e035      	b.n	800635c <generate_colours+0x100>
    }
    else if(sens.s[i].weight < MAX_KG)
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	4a39      	ldr	r2, [pc, #228]	; (80063d8 <generate_colours+0x17c>)
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	4413      	add	r3, r2
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	493a      	ldr	r1, [pc, #232]	; (80063e4 <generate_colours+0x188>)
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa fc41 	bl	8000b84 <__aeabi_fcmplt>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01e      	beq.n	8006346 <generate_colours+0xea>
    {
      // below full and above middle weight value, the amount of green will decrease and (red = max)
      sens.s[i].col_red = 0xFF;
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	4a33      	ldr	r2, [pc, #204]	; (80063d8 <generate_colours+0x17c>)
 800630c:	21ff      	movs	r1, #255	; 0xff
 800630e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      sens.s[i].col_green = (uint8_t)(map(sens.s[i].weight,(MAX_KG / 2),MAX_KG, 255, 1));
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <generate_colours+0x17c>)
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	6858      	ldr	r0, [r3, #4]
 800631c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	4b2f      	ldr	r3, [pc, #188]	; (80063e0 <generate_colours+0x184>)
 8006324:	4a2f      	ldr	r2, [pc, #188]	; (80063e4 <generate_colours+0x188>)
 8006326:	492d      	ldr	r1, [pc, #180]	; (80063dc <generate_colours+0x180>)
 8006328:	f7ff feee 	bl	8006108 <map>
 800632c:	4603      	mov	r3, r0
 800632e:	79fc      	ldrb	r4, [r7, #7]
 8006330:	4618      	mov	r0, r3
 8006332:	f7fa fc4f 	bl	8000bd4 <__aeabi_f2uiz>
 8006336:	4603      	mov	r3, r0
 8006338:	b2d9      	uxtb	r1, r3
 800633a:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <generate_colours+0x17c>)
 800633c:	00e3      	lsls	r3, r4, #3
 800633e:	4413      	add	r3, r2
 8006340:	460a      	mov	r2, r1
 8006342:	705a      	strb	r2, [r3, #1]
 8006344:	e00a      	b.n	800635c <generate_colours+0x100>
    }
    else
    {
      // fully pressed sensor's color is red
      sens.s[i].col_red = 0xFF;
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	4a23      	ldr	r2, [pc, #140]	; (80063d8 <generate_colours+0x17c>)
 800634a:	21ff      	movs	r1, #255	; 0xff
 800634c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      sens.s[i].col_green = 0;
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <generate_colours+0x17c>)
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	2200      	movs	r2, #0
 800635a:	705a      	strb	r2, [r3, #1]
    }

    // converting color to ble data
    sens.col_tx_data[i*2]        = sens.s[i].col_red   != 0xFF ? sens.s[i].col_red + 1   : sens.s[i].col_red;
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <generate_colours+0x17c>)
 8006360:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006364:	2bff      	cmp	r3, #255	; 0xff
 8006366:	d006      	beq.n	8006376 <generate_colours+0x11a>
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <generate_colours+0x17c>)
 800636c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006370:	3301      	adds	r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e003      	b.n	800637e <generate_colours+0x122>
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <generate_colours+0x17c>)
 800637a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800637e:	79fa      	ldrb	r2, [r7, #7]
 8006380:	0052      	lsls	r2, r2, #1
 8006382:	4915      	ldr	r1, [pc, #84]	; (80063d8 <generate_colours+0x17c>)
 8006384:	440a      	add	r2, r1
 8006386:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
    sens.col_tx_data[(i*2) + 1]  = sens.s[i].col_green != 0xFF ? sens.s[i].col_green + 1 : sens.s[i].col_green;
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <generate_colours+0x17c>)
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2bff      	cmp	r3, #255	; 0xff
 8006396:	d007      	beq.n	80063a8 <generate_colours+0x14c>
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	4a0f      	ldr	r2, [pc, #60]	; (80063d8 <generate_colours+0x17c>)
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	3301      	adds	r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	e004      	b.n	80063b2 <generate_colours+0x156>
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <generate_colours+0x17c>)
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	79fa      	ldrb	r2, [r7, #7]
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	3201      	adds	r2, #1
 80063b8:	4907      	ldr	r1, [pc, #28]	; (80063d8 <generate_colours+0x17c>)
 80063ba:	440a      	add	r2, r1
 80063bc:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
  for(uint8_t i=0;i<5;i++)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	3301      	adds	r3, #1
 80063c4:	71fb      	strb	r3, [r7, #7]
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	f67f af4d 	bls.w	8006268 <generate_colours+0xc>

  }
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd90      	pop	{r4, r7, pc}
 80063d8:	20000044 	.word	0x20000044
 80063dc:	40a00000 	.word	0x40a00000
 80063e0:	437f0000 	.word	0x437f0000
 80063e4:	41200000 	.word	0x41200000

080063e8 <am_i_sitting>:

static bool am_i_sitting()
{
 80063e8:	b5b0      	push	{r4, r5, r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
  uint8_t below_ok_cnt = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	71fb      	strb	r3, [r7, #7]

  for(uint8_t i=0;i<5;i++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	71bb      	strb	r3, [r7, #6]
 80063f6:	e047      	b.n	8006488 <am_i_sitting+0xa0>
  {
    if(sens.s[i].weight > (sens.calibrated_weight[i] + POSITION_WEIGHT_MAX_DIFF))
 80063f8:	79bb      	ldrb	r3, [r7, #6]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <am_i_sitting+0xbc>)
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4413      	add	r3, r2
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fa f832 	bl	800046c <__aeabi_f2d>
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	79bb      	ldrb	r3, [r7, #6]
 800640e:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <am_i_sitting+0xbc>)
 8006410:	3310      	adds	r3, #16
 8006412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fa f828 	bl	800046c <__aeabi_f2d>
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <am_i_sitting+0xc0>)
 8006422:	f7f9 fec5 	bl	80001b0 <__adddf3>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa f8f3 	bl	8000618 <__aeabi_dcmpgt>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <am_i_sitting+0x54>
      return false;
 8006438:	2300      	movs	r3, #0
 800643a:	e02e      	b.n	800649a <am_i_sitting+0xb2>

    if(sens.s[i].weight < (sens.calibrated_weight[i] - POSITION_WEIGHT_MAX_DIFF))
 800643c:	79bb      	ldrb	r3, [r7, #6]
 800643e:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <am_i_sitting+0xbc>)
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa f810 	bl	800046c <__aeabi_f2d>
 800644c:	4604      	mov	r4, r0
 800644e:	460d      	mov	r5, r1
 8006450:	79bb      	ldrb	r3, [r7, #6]
 8006452:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <am_i_sitting+0xbc>)
 8006454:	3310      	adds	r3, #16
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fa f806 	bl	800046c <__aeabi_f2d>
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <am_i_sitting+0xc0>)
 8006466:	f7f9 fea1 	bl	80001ac <__aeabi_dsub>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa f8b3 	bl	80005dc <__aeabi_dcmplt>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <am_i_sitting+0x9a>
      below_ok_cnt++;
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	3301      	adds	r3, #1
 8006480:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i=0;i<5;i++)
 8006482:	79bb      	ldrb	r3, [r7, #6]
 8006484:	3301      	adds	r3, #1
 8006486:	71bb      	strb	r3, [r7, #6]
 8006488:	79bb      	ldrb	r3, [r7, #6]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d9b4      	bls.n	80063f8 <am_i_sitting+0x10>
  }
  // if user is sitting then more than 2 sensors are significantly below calibrated values
  // but if any sensor's value is significantly above calibrated value then it means that user is standing
  return (below_ok_cnt > 2 ? true : false);
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	2b02      	cmp	r3, #2
 8006492:	bf8c      	ite	hi
 8006494:	2301      	movhi	r3, #1
 8006496:	2300      	movls	r3, #0
 8006498:	b2db      	uxtb	r3, r3
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bdb0      	pop	{r4, r5, r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000044 	.word	0x20000044
 80064a8:	3ff80000 	.word	0x3ff80000
 80064ac:	00000000 	.word	0x00000000

080064b0 <sensors_check>:

uint32_t prev, time;

static void sensors_check()
{
 80064b0:	b5b0      	push	{r4, r5, r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
  uint32_t now = HAL_GetTick();
 80064b6:	f7fb fb53 	bl	8001b60 <HAL_GetTick>
 80064ba:	61b8      	str	r0, [r7, #24]
  time = now - prev;
 80064bc:	4b64      	ldr	r3, [pc, #400]	; (8006650 <sensors_check+0x1a0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	4a63      	ldr	r2, [pc, #396]	; (8006654 <sensors_check+0x1a4>)
 80064c6:	6013      	str	r3, [r2, #0]
  prev = now;
 80064c8:	4a61      	ldr	r2, [pc, #388]	; (8006650 <sensors_check+0x1a0>)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	6013      	str	r3, [r2, #0]
  // measurement frequency (for debug only)


  feet_info feet_now = feet_prev;
 80064ce:	4b62      	ldr	r3, [pc, #392]	; (8006658 <sensors_check+0x1a8>)
 80064d0:	463c      	mov	r4, r7
 80064d2:	461d      	mov	r5, r3
 80064d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80064dc:	e884 0003 	stmia.w	r4, {r0, r1}

  feet_now.soft_pressed_sens_qt = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	743b      	strb	r3, [r7, #16]
  feet_now.normal_pressed_sens_qt = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	747b      	strb	r3, [r7, #17]


  for(uint8_t i=0;i<5;i++)
 80064e8:	2300      	movs	r3, #0
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e027      	b.n	800653e <sensors_check+0x8e>
  {
    if(sens.s[i].weight >= SOFT_PRESSED_KG_VAL)
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	4a5a      	ldr	r2, [pc, #360]	; (800665c <sensors_check+0x1ac>)
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7f9 ffb7 	bl	800046c <__aeabi_f2d>
 80064fe:	a352      	add	r3, pc, #328	; (adr r3, 8006648 <sensors_check+0x198>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7fa f87e 	bl	8000604 <__aeabi_dcmpge>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <sensors_check+0x66>
      feet_now.soft_pressed_sens_qt++;
 800650e:	7c3b      	ldrb	r3, [r7, #16]
 8006510:	3301      	adds	r3, #1
 8006512:	b2db      	uxtb	r3, r3
 8006514:	743b      	strb	r3, [r7, #16]

    if(sens.s[i].weight >= NORMAL_PRESSED_KG_VAL)
 8006516:	7ffb      	ldrb	r3, [r7, #31]
 8006518:	4a50      	ldr	r2, [pc, #320]	; (800665c <sensors_check+0x1ac>)
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4413      	add	r3, r2
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006524:	4618      	mov	r0, r3
 8006526:	f7fa fb41 	bl	8000bac <__aeabi_fcmpge>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <sensors_check+0x88>
         feet_now.normal_pressed_sens_qt++;
 8006530:	7c7b      	ldrb	r3, [r7, #17]
 8006532:	3301      	adds	r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	747b      	strb	r3, [r7, #17]
  for(uint8_t i=0;i<5;i++)
 8006538:	7ffb      	ldrb	r3, [r7, #31]
 800653a:	3301      	adds	r3, #1
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	7ffb      	ldrb	r3, [r7, #31]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d9d4      	bls.n	80064ee <sensors_check+0x3e>
  }

  feet_now.any_sens_pressed = feet_now.soft_pressed_sens_qt == 0 ? false : true;
 8006544:	7c3b      	ldrb	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	703b      	strb	r3, [r7, #0]

  feet_now.last_sens_soft_pressed_ts = feet_now.normal_pressed_sens_qt == 0 ? now : feet_now.last_sens_soft_pressed_ts;
 8006552:	7c7b      	ldrb	r3, [r7, #17]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <sensors_check+0xac>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	e000      	b.n	800655e <sensors_check+0xae>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	60bb      	str	r3, [r7, #8]

  // eliminate single measurement mistake
  if(feet_now.any_sens_pressed && feet_prev.any_sens_pressed)
 8006560:	783b      	ldrb	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <sensors_check+0xc2>
 8006566:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <sensors_check+0x1a8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <sensors_check+0xc2>
    feet_now.last_sens_pressed_ts = now;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	607b      	str	r3, [r7, #4]

  // after reconnecting app with ble we need to update time stamps to prevent from entering sleep mode too early
  if(reset_cnt)
 8006572:	4b3b      	ldr	r3, [pc, #236]	; (8006660 <sensors_check+0x1b0>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <sensors_check+0xd8>
  {
    feet_now.last_sens_pressed_ts = now;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	607b      	str	r3, [r7, #4]
    feet_now.last_step_ts = now;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	60fb      	str	r3, [r7, #12]
    reset_cnt = false;
 8006582:	4b37      	ldr	r3, [pc, #220]	; (8006660 <sensors_check+0x1b0>)
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
  }

  if(ble_am_i_sleeping() && feet_now.any_sens_pressed)
 8006588:	f7ff fa32 	bl	80059f0 <ble_am_i_sleeping>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <sensors_check+0xec>
 8006592:	783b      	ldrb	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <sensors_check+0xec>
    ble_disable_sleep_mode();
 8006598:	f7ff fa18 	bl	80059cc <ble_disable_sleep_mode>

  if((feet_now.normal_pressed_sens_qt > 2 && feet_prev.normal_pressed_sens_qt <= 2) && (feet_prev.last_step_ts + 20) < feet_now.last_sens_soft_pressed_ts)
 800659c:	7c7b      	ldrb	r3, [r7, #17]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d90f      	bls.n	80065c2 <sensors_check+0x112>
 80065a2:	4b2d      	ldr	r3, [pc, #180]	; (8006658 <sensors_check+0x1a8>)
 80065a4:	7c5b      	ldrb	r3, [r3, #17]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d80b      	bhi.n	80065c2 <sensors_check+0x112>
 80065aa:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <sensors_check+0x1a8>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f103 0214 	add.w	r2, r3, #20
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d204      	bcs.n	80065c2 <sensors_check+0x112>
  {
    // if in the last cycle user pressed less than 3 sensors and in this he pressed more than 2 and last step was recognized more than 20 ms ago
    // then it means that user just made another step (this step recognizing method is very accurate)
    feet_now.last_step_ts = now;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	60fb      	str	r3, [r7, #12]
    feet_now.steps++;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  }

  // by checking last step time stamp we can assume that user is walking or running (if difference between current and last step time stamp is low enough)
  if((now - feet_now.last_step_ts) < WALK_TIMEOUT)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80065cc:	d202      	bcs.n	80065d4 <sensors_check+0x124>
    feet_now.user = WALKING;
 80065ce:	2301      	movs	r3, #1
 80065d0:	74bb      	strb	r3, [r7, #18]
 80065d2:	e01b      	b.n	800660c <sensors_check+0x15c>

  else if((now - feet_now.last_sens_pressed_ts) > NO_PREASURE_SLEEP_TIMEOUT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f247 5230 	movw	r2, #30000	; 0x7530
 80065de:	4293      	cmp	r3, r2
 80065e0:	d904      	bls.n	80065ec <sensors_check+0x13c>
  {
    // in this condition we are checking the last time when user pressed any sensor
    // if ts difference is greater than NO_PREASURE_SLEEP_TIMEOUT then firstly ble should enter sleep mode and after this rest of modules
    // finally uC enters standby mode (can be woke only by step interrupt from lsm6 or reconnecting phone app)
    ble_enable_sleep_mode();
 80065e2:	f7ff f9e7 	bl	80059b4 <ble_enable_sleep_mode>
    feet_now.user = NOT_USING;
 80065e6:	2304      	movs	r3, #4
 80065e8:	74bb      	strb	r3, [r7, #18]
 80065ea:	e00f      	b.n	800660c <sensors_check+0x15c>
  }
  else if((now - feet_now.last_step_ts) > STAND_SIT_TIMEOUT)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d908      	bls.n	800660c <sensors_check+0x15c>
  {
    // if last step was recognized more than 3 sec ago than we should check is user standing or sitting
    feet_now.user = am_i_sitting() ? SITTING : STANDING;
 80065fa:	f7ff fef5 	bl	80063e8 <am_i_sitting>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <sensors_check+0x158>
 8006604:	2303      	movs	r3, #3
 8006606:	e000      	b.n	800660a <sensors_check+0x15a>
 8006608:	2302      	movs	r3, #2
 800660a:	74bb      	strb	r3, [r7, #18]
  }

  // preparing ble data (position and steps quantity)
  sens.stat_tx_data[0] = feet_now.user;
 800660c:	7cba      	ldrb	r2, [r7, #18]
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <sensors_check+0x1ac>)
 8006610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  sens.stat_tx_data[1] = (uint8_t)(feet_now.steps);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b10      	ldr	r3, [pc, #64]	; (800665c <sensors_check+0x1ac>)
 800661a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  sens.stat_tx_data[2] = (uint8_t)(feet_now.steps >> 8);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	b2da      	uxtb	r2, r3
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <sensors_check+0x1ac>)
 8006626:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  feet_prev = feet_now;
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <sensors_check+0x1a8>)
 800662c:	461d      	mov	r5, r3
 800662e:	463c      	mov	r4, r7
 8006630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006638:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800663c:	bf00      	nop
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bdb0      	pop	{r4, r5, r7, pc}
 8006644:	f3af 8000 	nop.w
 8006648:	9999999a 	.word	0x9999999a
 800664c:	3fe99999 	.word	0x3fe99999
 8006650:	200007c4 	.word	0x200007c4
 8006654:	200007c8 	.word	0x200007c8
 8006658:	200007a0 	.word	0x200007a0
 800665c:	20000044 	.word	0x20000044
 8006660:	2000079c 	.word	0x2000079c

08006664 <position_check>:

static void position_check()
{
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b089      	sub	sp, #36	; 0x24
 8006668:	af00      	add	r7, sp, #0
  float sen_min_val;
  float sen_max_val;
  feet_position_info pos_now = pos_prev;
 800666a:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <position_check+0xf4>)
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint32_t now = HAL_GetTick();
 8006674:	f7fb fa74 	bl	8001b60 <HAL_GetTick>
 8006678:	61b8      	str	r0, [r7, #24]

  pos_now.position_wrong = false;
 800667a:	2300      	movs	r3, #0
 800667c:	713b      	strb	r3, [r7, #4]

  // loop below is checking for significant differences between current and calibrated sensors values (and checking is user standing now)
  // if this condition is fulfilled for any sensor then we can assume that user is standing in the wrong position

  for(uint8_t i=0;i<5;i++)
 800667e:	2300      	movs	r3, #0
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e03b      	b.n	80066fc <position_check+0x98>
  {
    sen_min_val = sens.calibrated_weight[i] - POSITION_WEIGHT_MAX_DIFF;
 8006684:	7ffb      	ldrb	r3, [r7, #31]
 8006686:	4a35      	ldr	r2, [pc, #212]	; (800675c <position_check+0xf8>)
 8006688:	3310      	adds	r3, #16
 800668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8006692:	4618      	mov	r0, r3
 8006694:	f7f9 ffce 	bl	8000634 <__aeabi_fsub>
 8006698:	4603      	mov	r3, r0
 800669a:	617b      	str	r3, [r7, #20]
    sen_max_val = sens.calibrated_weight[i] + POSITION_WEIGHT_MAX_DIFF;
 800669c:	7ffb      	ldrb	r3, [r7, #31]
 800669e:	4a2f      	ldr	r2, [pc, #188]	; (800675c <position_check+0xf8>)
 80066a0:	3310      	adds	r3, #16
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 ffc4 	bl	8000638 <__addsf3>
 80066b0:	4603      	mov	r3, r0
 80066b2:	613b      	str	r3, [r7, #16]

    // if any sensor's value is significantly different from calibrated value (and user is standing) then we can assume that user is standing in the wrong position
    if(sens.s[i].weight > sen_max_val || sens.s[i].weight < sen_min_val)
 80066b4:	7ffb      	ldrb	r3, [r7, #31]
 80066b6:	4a29      	ldr	r2, [pc, #164]	; (800675c <position_check+0xf8>)
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4619      	mov	r1, r3
 80066c0:	6938      	ldr	r0, [r7, #16]
 80066c2:	f7fa fa5f 	bl	8000b84 <__aeabi_fcmplt>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <position_check+0x80>
 80066cc:	7ffb      	ldrb	r3, [r7, #31]
 80066ce:	4a23      	ldr	r2, [pc, #140]	; (800675c <position_check+0xf8>)
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6978      	ldr	r0, [r7, #20]
 80066da:	f7fa fa71 	bl	8000bc0 <__aeabi_fcmpgt>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <position_check+0x92>
    {
      pos_now.position_wrong = feet_prev.user == STANDING ? true : false;
 80066e4:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <position_check+0xfc>)
 80066e6:	7c9b      	ldrb	r3, [r3, #18]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	713b      	strb	r3, [r7, #4]
      break;
 80066f4:	e005      	b.n	8006702 <position_check+0x9e>
  for(uint8_t i=0;i<5;i++)
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
 80066f8:	3301      	adds	r3, #1
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	7ffb      	ldrb	r3, [r7, #31]
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d9c0      	bls.n	8006684 <position_check+0x20>
  }

  // if we just recognized wrong position then we need to calculate time stamp for the warning
  // warning isn't instant if user is standing in the wrong position for more than 2 sec then it occurs
  // correcting position will cause resetting warning time stamp to '0'
  pos_now.warning_at_ts = (pos_now.position_wrong && !pos_prev.position_wrong) ? (now + MOTOR_TIME_TO_WARNING) : 0;
 8006702:	793b      	ldrb	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <position_check+0xba>
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <position_check+0xf4>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f083 0301 	eor.w	r3, r3, #1
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <position_check+0xba>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800671c:	e000      	b.n	8006720 <position_check+0xbc>
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]

  // we don't want to annoy user with constant warnings so there is extra ts for last warning
  // which is also checked before executing next one
  if((now >= pos_now.warning_at_ts) && (now - pos_now.last_warning_ts) > MOTOR_NEXT_WARNING_TIMEOUT)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	429a      	cmp	r2, r3
 8006728:	d30b      	bcc.n	8006742 <position_check+0xde>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f242 7210 	movw	r2, #10000	; 0x2710
 8006734:	4293      	cmp	r3, r2
 8006736:	d904      	bls.n	8006742 <position_check+0xde>
  {
    pos_now.last_warning_ts = now;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	60bb      	str	r3, [r7, #8]
    // device is giving the warning by long vibration
    motor_vibrate(LONG_WIBRATION);
 800673c:	2002      	movs	r0, #2
 800673e:	f7ff fcb1 	bl	80060a4 <motor_vibrate>
  }

  pos_prev = pos_now;
 8006742:	4b05      	ldr	r3, [pc, #20]	; (8006758 <position_check+0xf4>)
 8006744:	461c      	mov	r4, r3
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800674c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006750:	bf00      	nop
 8006752:	3724      	adds	r7, #36	; 0x24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd90      	pop	{r4, r7, pc}
 8006758:	200007b8 	.word	0x200007b8
 800675c:	20000044 	.word	0x20000044
 8006760:	200007a0 	.word	0x200007a0

08006764 <sens_handler>:

void sens_handler()
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0

  if(adc_conv_complete_flag)
 8006768:	4b08      	ldr	r3, [pc, #32]	; (800678c <sens_handler+0x28>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <sens_handler+0x22>
  {
    // after successful adc conversion of all channels execute all calculations
    transform_adc_to_weight();
 8006770:	f7ff fd28 	bl	80061c4 <transform_adc_to_weight>
    generate_colours();
 8006774:	f7ff fd72 	bl	800625c <generate_colours>
    sensors_check();
 8006778:	f7ff fe9a 	bl	80064b0 <sensors_check>
    position_check();
 800677c:	f7ff ff72 	bl	8006664 <position_check>

    adc_conv_complete_flag = false;
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <sens_handler+0x28>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
  }
}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000522 	.word	0x20000522

08006790 <sens_reset_timestamp>:

void sens_reset_timestamp() { reset_cnt = true; };
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
 8006794:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <sens_reset_timestamp+0x14>)
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	bf00      	nop
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	2000079c 	.word	0x2000079c

080067a8 <sens_calibrate>:

void sens_calibrate()
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  // updating calibrated sensors values and keeping the distance from boundary values

  for(uint8_t i=0;i<5;i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	71fb      	strb	r3, [r7, #7]
 80067b2:	e04f      	b.n	8006854 <sens_calibrate+0xac>
  {
    if((sens.s[i].weight - POSITION_WEIGHT_MAX_DIFF) < MIN_KG)
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <sens_calibrate+0xbc>)
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7f9 fe54 	bl	800046c <__aeabi_f2d>
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	4b27      	ldr	r3, [pc, #156]	; (8006868 <sens_calibrate+0xc0>)
 80067ca:	f7f9 fcef 	bl	80001ac <__aeabi_dsub>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4610      	mov	r0, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f7f9 fefd 	bl	80005dc <__aeabi_dcmplt>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <sens_calibrate+0x50>
      sens.calibrated_weight[i] = (MIN_KG + POSITION_WEIGHT_MAX_DIFF);
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <sens_calibrate+0xbc>)
 80067ec:	3310      	adds	r3, #16
 80067ee:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80067f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80067f6:	e02a      	b.n	800684e <sens_calibrate+0xa6>
    else if((sens.s[i].weight + POSITION_WEIGHT_MAX_DIFF) > MAX_KG)
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <sens_calibrate+0xbc>)
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4413      	add	r3, r2
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4618      	mov	r0, r3
 8006804:	f7f9 fe32 	bl	800046c <__aeabi_f2d>
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <sens_calibrate+0xc0>)
 800680e:	f7f9 fccf 	bl	80001b0 <__adddf3>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <sens_calibrate+0xc4>)
 8006820:	f7f9 fefa 	bl	8000618 <__aeabi_dcmpgt>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <sens_calibrate+0x90>
      sens.calibrated_weight[i] = (MAX_KG - POSITION_WEIGHT_MAX_DIFF);
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <sens_calibrate+0xbc>)
 800682e:	3310      	adds	r3, #16
 8006830:	490f      	ldr	r1, [pc, #60]	; (8006870 <sens_calibrate+0xc8>)
 8006832:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006836:	e00a      	b.n	800684e <sens_calibrate+0xa6>
    else
      sens.calibrated_weight[i] = sens.s[i].weight;
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	79f9      	ldrb	r1, [r7, #7]
 800683c:	4a09      	ldr	r2, [pc, #36]	; (8006864 <sens_calibrate+0xbc>)
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4807      	ldr	r0, [pc, #28]	; (8006864 <sens_calibrate+0xbc>)
 8006846:	f101 0310 	add.w	r3, r1, #16
 800684a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for(uint8_t i=0;i<5;i++)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	3301      	adds	r3, #1
 8006852:	71fb      	strb	r3, [r7, #7]
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d9ac      	bls.n	80067b4 <sens_calibrate+0xc>
  }
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000044 	.word	0x20000044
 8006868:	3ff80000 	.word	0x3ff80000
 800686c:	40240000 	.word	0x40240000
 8006870:	41080000 	.word	0x41080000

08006874 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006886:	2b84      	cmp	r3, #132	; 0x84
 8006888:	d005      	beq.n	8006896 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800688a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	3303      	adds	r3, #3
 8006894:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068a6:	f000 fe71 	bl	800758c <vTaskStartScheduler>
  
  return osOK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <osThreadCreate+0x54>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01c      	beq.n	8006904 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685c      	ldr	r4, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691e      	ldr	r6, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ffc9 	bl	8006874 <makeFreeRtosPriority>
 80068e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ec:	9202      	str	r2, [sp, #8]
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	9100      	str	r1, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	4632      	mov	r2, r6
 80068f6:	4629      	mov	r1, r5
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fc71 	bl	80071e0 <xTaskCreateStatic>
 80068fe:	4603      	mov	r3, r0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e01c      	b.n	800693e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685c      	ldr	r4, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006910:	b29e      	uxth	r6, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ffab 	bl	8006874 <makeFreeRtosPriority>
 800691e:	4602      	mov	r2, r0
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	9200      	str	r2, [sp, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4632      	mov	r2, r6
 800692c:	4629      	mov	r1, r5
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fcb2 	bl	8007298 <xTaskCreate>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d001      	beq.n	800693e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006948 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <osDelay+0x16>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	e000      	b.n	8006960 <osDelay+0x18>
 800695e:	2301      	movs	r3, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fddf 	bl	8007524 <vTaskDelay>
  
  return osOK;
 8006966:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800697c:	f000 fe70 	bl	8007660 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006980:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <pvPortMalloc+0x174>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006988:	f000 f910 	bl	8006bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800698c:	4b56      	ldr	r3, [pc, #344]	; (8006ae8 <pvPortMalloc+0x178>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 808e 	bne.w	8006ab6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01d      	beq.n	80069dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069a0:	2208      	movs	r2, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d014      	beq.n	80069dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f023 0307 	bic.w	r3, r3, #7
 80069b8:	3308      	adds	r3, #8
 80069ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d069      	beq.n	8006ab6 <pvPortMalloc+0x146>
 80069e2:	4b42      	ldr	r3, [pc, #264]	; (8006aec <pvPortMalloc+0x17c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d864      	bhi.n	8006ab6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ec:	4b40      	ldr	r3, [pc, #256]	; (8006af0 <pvPortMalloc+0x180>)
 80069ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <pvPortMalloc+0x180>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f6:	e004      	b.n	8006a02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d903      	bls.n	8006a14 <pvPortMalloc+0xa4>
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f1      	bne.n	80069f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a14:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <pvPortMalloc+0x174>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d04b      	beq.n	8006ab6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2208      	movs	r2, #8
 8006a24:	4413      	add	r3, r2
 8006a26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6a3b      	ldr	r3, [r7, #32]
 8006a2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	2308      	movs	r3, #8
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d91f      	bls.n	8006a80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <pvPortMalloc+0xf8>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	613b      	str	r3, [r7, #16]
}
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a7a:	69b8      	ldr	r0, [r7, #24]
 8006a7c:	f000 f8f8 	bl	8006c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <pvPortMalloc+0x17c>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	4a18      	ldr	r2, [pc, #96]	; (8006aec <pvPortMalloc+0x17c>)
 8006a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a8e:	4b17      	ldr	r3, [pc, #92]	; (8006aec <pvPortMalloc+0x17c>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <pvPortMalloc+0x184>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d203      	bcs.n	8006aa2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <pvPortMalloc+0x17c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <pvPortMalloc+0x184>)
 8006aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <pvPortMalloc+0x178>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ab6:	f000 fde1 	bl	800767c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <pvPortMalloc+0x16a>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	60fb      	str	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <pvPortMalloc+0x168>
	return pvReturn;
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20001d50 	.word	0x20001d50
 8006ae8:	20001d5c 	.word	0x20001d5c
 8006aec:	20001d54 	.word	0x20001d54
 8006af0:	20001d48 	.word	0x20001d48
 8006af4:	20001d58 	.word	0x20001d58

08006af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d048      	beq.n	8006b9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	425b      	negs	r3, r3
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <vPortFree+0xac>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <vPortFree+0x44>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60fb      	str	r3, [r7, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <vPortFree+0x62>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60bb      	str	r3, [r7, #8]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <vPortFree+0xac>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d019      	beq.n	8006b9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <vPortFree+0xac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b80:	f000 fd6e 	bl	8007660 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <vPortFree+0xb0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <vPortFree+0xb0>)
 8006b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b92:	6938      	ldr	r0, [r7, #16]
 8006b94:	f000 f86c 	bl	8006c70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b98:	f000 fd70 	bl	800767c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20001d5c 	.word	0x20001d5c
 8006ba8:	20001d54 	.word	0x20001d54

08006bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bb2:	f241 537c 	movw	r3, #5500	; 0x157c
 8006bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <prvHeapInit+0xac>)
 8006bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00c      	beq.n	8006be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3307      	adds	r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0307 	bic.w	r3, r3, #7
 8006bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <prvHeapInit+0xac>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <prvHeapInit+0xb0>)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bea:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <prvHeapInit+0xb0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <prvHeapInit+0xb4>)
 8006c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <prvHeapInit+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <prvHeapInit+0xb4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	1ad2      	subs	r2, r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <prvHeapInit+0xb4>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4a0a      	ldr	r2, [pc, #40]	; (8006c64 <prvHeapInit+0xb8>)
 8006c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <prvHeapInit+0xbc>)
 8006c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <prvHeapInit+0xc0>)
 8006c46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c4a:	601a      	str	r2, [r3, #0]
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	200007cc 	.word	0x200007cc
 8006c5c:	20001d48 	.word	0x20001d48
 8006c60:	20001d50 	.word	0x20001d50
 8006c64:	20001d58 	.word	0x20001d58
 8006c68:	20001d54 	.word	0x20001d54
 8006c6c:	20001d5c 	.word	0x20001d5c

08006c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c78:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <prvInsertBlockIntoFreeList+0xa8>)
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	e002      	b.n	8006c84 <prvInsertBlockIntoFreeList+0x14>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d8f7      	bhi.n	8006c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	4413      	add	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d108      	bne.n	8006cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	441a      	add	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d118      	bne.n	8006cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <prvInsertBlockIntoFreeList+0xac>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d00d      	beq.n	8006cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	441a      	add	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e008      	b.n	8006d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <prvInsertBlockIntoFreeList+0xac>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e003      	b.n	8006d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d002      	beq.n	8006d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	20001d48 	.word	0x20001d48
 8006d1c:	20001d50 	.word	0x20001d50

08006d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f103 0208 	add.w	r2, r3, #8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f103 0208 	add.w	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f103 0208 	add.w	r2, r3, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd2:	d103      	bne.n	8006ddc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e00c      	b.n	8006df6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3308      	adds	r3, #8
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e002      	b.n	8006dea <vListInsert+0x2e>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d2f6      	bcs.n	8006de4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr

08006e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6892      	ldr	r2, [r2, #8]
 8006e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d103      	bne.n	8006e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1e5a      	subs	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
	...

08006e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b04      	subs	r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b04      	subs	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <pxPortInitialiseStack+0x54>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b14      	subs	r3, #20
 8006eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b20      	subs	r3, #32
 8006ec6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	08006ed9 	.word	0x08006ed9

08006ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <prvTaskExitError+0x54>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d00a      	beq.n	8006f02 <prvTaskExitError+0x2a>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <prvTaskExitError+0x28>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60bb      	str	r3, [r7, #8]
}
 8006f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f16:	bf00      	nop
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0fc      	beq.n	8006f18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000098 	.word	0x20000098

08006f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <pxCurrentTCBConst2>)
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f3a:	f380 8809 	msr	PSP, r0
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f4e:	4770      	bx	lr

08006f50 <pxCurrentTCBConst2>:
 8006f50:	20001d68 	.word	0x20001d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f58:	4806      	ldr	r0, [pc, #24]	; (8006f74 <prvPortStartFirstTask+0x1c>)
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f380 8808 	msr	MSP, r0
 8006f62:	b662      	cpsie	i
 8006f64:	b661      	cpsie	f
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	df00      	svc	0
 8006f70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed08 	.word	0xe000ed08

08006f78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <xPortStartScheduler+0xd0>)
 8006f80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	22ff      	movs	r2, #255	; 0xff
 8006f8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	; (800704c <xPortStartScheduler+0xd4>)
 8006fa4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fa8:	2207      	movs	r2, #7
 8006faa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fac:	e009      	b.n	8006fc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006fae:	4b28      	ldr	r3, [pc, #160]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	4a26      	ldr	r2, [pc, #152]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d0ef      	beq.n	8006fae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fce:	4b20      	ldr	r3, [pc, #128]	; (8007050 <xPortStartScheduler+0xd8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1c3 0307 	rsb	r3, r3, #7
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d00a      	beq.n	8006ff0 <xPortStartScheduler+0x78>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60bb      	str	r3, [r7, #8]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ff0:	4b17      	ldr	r3, [pc, #92]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	4a16      	ldr	r2, [pc, #88]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ff8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ffa:	4b15      	ldr	r3, [pc, #84]	; (8007050 <xPortStartScheduler+0xd8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <xPortStartScheduler+0xd8>)
 8007004:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <xPortStartScheduler+0xdc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a10      	ldr	r2, [pc, #64]	; (8007054 <xPortStartScheduler+0xdc>)
 8007014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <xPortStartScheduler+0xdc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a0d      	ldr	r2, [pc, #52]	; (8007054 <xPortStartScheduler+0xdc>)
 8007020:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007024:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007026:	f000 f8b9 	bl	800719c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <xPortStartScheduler+0xe0>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007030:	f7ff ff92 	bl	8006f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007034:	f000 fc7c 	bl	8007930 <vTaskSwitchContext>
	prvTaskExitError();
 8007038:	f7ff ff4e 	bl	8006ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	e000e400 	.word	0xe000e400
 800704c:	20001d60 	.word	0x20001d60
 8007050:	20001d64 	.word	0x20001d64
 8007054:	e000ed20 	.word	0xe000ed20
 8007058:	20000098 	.word	0x20000098

0800705c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
}
 8007074:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <vPortEnterCritical+0x58>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <vPortEnterCritical+0x58>)
 800707e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <vPortEnterCritical+0x58>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d10f      	bne.n	80070a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <vPortEnterCritical+0x5c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	603b      	str	r3, [r7, #0]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortEnterCritical+0x4a>
	}
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000098 	.word	0x20000098
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <vPortExitCritical+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <vPortExitCritical+0x24>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	607b      	str	r3, [r7, #4]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <vPortExitCritical+0x4c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	4a08      	ldr	r2, [pc, #32]	; (8007108 <vPortExitCritical+0x4c>)
 80070e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <vPortExitCritical+0x4c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d105      	bne.n	80070fe <vPortExitCritical+0x42>
 80070f2:	2300      	movs	r3, #0
 80070f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	20000098 	.word	0x20000098
 800710c:	00000000 	.word	0x00000000

08007110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007110:	f3ef 8009 	mrs	r0, PSP
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <pxCurrentTCBConst>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007120:	6010      	str	r0, [r2, #0]
 8007122:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007126:	f04f 0050 	mov.w	r0, #80	; 0x50
 800712a:	f380 8811 	msr	BASEPRI, r0
 800712e:	f000 fbff 	bl	8007930 <vTaskSwitchContext>
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	6808      	ldr	r0, [r1, #0]
 8007142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007146:	f380 8809 	msr	PSP, r0
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	4770      	bx	lr

08007150 <pxCurrentTCBConst>:
 8007150:	20001d68 	.word	0x20001d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop

08007158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007172:	f000 fb1f 	bl	80077b4 <xTaskIncrementTick>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <SysTick_Handler+0x40>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <vPortSetupTimerInterrupt+0x30>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <vPortSetupTimerInterrupt+0x34>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <vPortSetupTimerInterrupt+0x38>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <vPortSetupTimerInterrupt+0x3c>)
 80071b2:	fba2 2303 	umull	r2, r3, r2, r3
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	4a08      	ldr	r2, [pc, #32]	; (80071dc <vPortSetupTimerInterrupt+0x40>)
 80071ba:	3b01      	subs	r3, #1
 80071bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071be:	4b03      	ldr	r3, [pc, #12]	; (80071cc <vPortSetupTimerInterrupt+0x30>)
 80071c0:	2207      	movs	r2, #7
 80071c2:	601a      	str	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr
 80071cc:	e000e010 	.word	0xe000e010
 80071d0:	e000e018 	.word	0xe000e018
 80071d4:	20000004 	.word	0x20000004
 80071d8:	10624dd3 	.word	0x10624dd3
 80071dc:	e000e014 	.word	0xe000e014

080071e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af04      	add	r7, sp, #16
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xTaskCreateStatic+0x2a>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	623b      	str	r3, [r7, #32]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <xTaskCreateStatic+0x46>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	61fb      	str	r3, [r7, #28]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007226:	23b4      	movs	r3, #180	; 0xb4
 8007228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2bb4      	cmp	r3, #180	; 0xb4
 800722e:	d00a      	beq.n	8007246 <xTaskCreateStatic+0x66>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61bb      	str	r3, [r7, #24]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01e      	beq.n	800728a <xTaskCreateStatic+0xaa>
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01b      	beq.n	800728a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2202      	movs	r2, #2
 8007260:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007264:	2300      	movs	r3, #0
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	9302      	str	r3, [sp, #8]
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f851 	bl	8007324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007284:	f000 f8e4 	bl	8007450 <prvAddNewTaskToReadyList>
 8007288:	e001      	b.n	800728e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800728e:	697b      	ldr	r3, [r7, #20]
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	; 0x30
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	4613      	mov	r3, r2
 80072a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fb5f 	bl	8006970 <pvPortMalloc>
 80072b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00e      	beq.n	80072d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80072ba:	20b4      	movs	r0, #180	; 0xb4
 80072bc:	f7ff fb58 	bl	8006970 <pvPortMalloc>
 80072c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30
 80072ce:	e005      	b.n	80072dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072d0:	6978      	ldr	r0, [r7, #20]
 80072d2:	f7ff fc11 	bl	8006af8 <vPortFree>
 80072d6:	e001      	b.n	80072dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d017      	beq.n	8007312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ea:	88fa      	ldrh	r2, [r7, #6]
 80072ec:	2300      	movs	r3, #0
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	9302      	str	r3, [sp, #8]
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f80f 	bl	8007324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	f000 f8a2 	bl	8007450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730c:	2301      	movs	r3, #1
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	e002      	b.n	8007318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007312:	f04f 33ff 	mov.w	r3, #4294967295
 8007316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007318:	69bb      	ldr	r3, [r7, #24]
	}
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800733c:	3b01      	subs	r3, #1
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	617b      	str	r3, [r7, #20]
}
 8007368:	bf00      	nop
 800736a:	e7fe      	b.n	800736a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	e012      	b.n	8007398 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	7819      	ldrb	r1, [r3, #0]
 800737a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	3334      	adds	r3, #52	; 0x34
 8007382:	460a      	mov	r2, r1
 8007384:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	4413      	add	r3, r2
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d006      	beq.n	80073a0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3301      	adds	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	d9e9      	bls.n	8007372 <prvInitialiseNewTask+0x4e>
 800739e:	e000      	b.n	80073a2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80073a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	d901      	bls.n	80073b4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073b0:	2306      	movs	r3, #6
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	2200      	movs	r2, #0
 80073c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3304      	adds	r3, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fcc7 	bl	8006d5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	3318      	adds	r3, #24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fcc2 	bl	8006d5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	f1c3 0207 	rsb	r2, r3, #7
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	334c      	adds	r3, #76	; 0x4c
 8007404:	2260      	movs	r2, #96	; 0x60
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fc71 	bl	8007cf0 <memset>
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	4a0c      	ldr	r2, [pc, #48]	; (8007444 <prvInitialiseNewTask+0x120>)
 8007412:	651a      	str	r2, [r3, #80]	; 0x50
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <prvInitialiseNewTask+0x124>)
 8007418:	655a      	str	r2, [r3, #84]	; 0x54
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	4a0b      	ldr	r2, [pc, #44]	; (800744c <prvInitialiseNewTask+0x128>)
 800741e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	69b8      	ldr	r0, [r7, #24]
 8007426:	f7ff fd2b 	bl	8006e80 <pxPortInitialiseStack>
 800742a:	4602      	mov	r2, r0
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800743c:	bf00      	nop
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	080092f8 	.word	0x080092f8
 8007448:	08009318 	.word	0x08009318
 800744c:	080092d8 	.word	0x080092d8

08007450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007458:	f7ff fe00 	bl	800705c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800745c:	4b2a      	ldr	r3, [pc, #168]	; (8007508 <prvAddNewTaskToReadyList+0xb8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3301      	adds	r3, #1
 8007462:	4a29      	ldr	r2, [pc, #164]	; (8007508 <prvAddNewTaskToReadyList+0xb8>)
 8007464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007466:	4b29      	ldr	r3, [pc, #164]	; (800750c <prvAddNewTaskToReadyList+0xbc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800746e:	4a27      	ldr	r2, [pc, #156]	; (800750c <prvAddNewTaskToReadyList+0xbc>)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007474:	4b24      	ldr	r3, [pc, #144]	; (8007508 <prvAddNewTaskToReadyList+0xb8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d110      	bne.n	800749e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800747c:	f000 fad2 	bl	8007a24 <prvInitialiseTaskLists>
 8007480:	e00d      	b.n	800749e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007482:	4b23      	ldr	r3, [pc, #140]	; (8007510 <prvAddNewTaskToReadyList+0xc0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800748a:	4b20      	ldr	r3, [pc, #128]	; (800750c <prvAddNewTaskToReadyList+0xbc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	429a      	cmp	r2, r3
 8007496:	d802      	bhi.n	800749e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <prvAddNewTaskToReadyList+0xbc>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <prvAddNewTaskToReadyList+0xc4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a1b      	ldr	r2, [pc, #108]	; (8007514 <prvAddNewTaskToReadyList+0xc4>)
 80074a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	4b19      	ldr	r3, [pc, #100]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a15      	ldr	r2, [pc, #84]	; (800751c <prvAddNewTaskToReadyList+0xcc>)
 80074c8:	441a      	add	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7ff fc50 	bl	8006d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074d6:	f7ff fdf1 	bl	80070bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074da:	4b0d      	ldr	r3, [pc, #52]	; (8007510 <prvAddNewTaskToReadyList+0xc0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <prvAddNewTaskToReadyList+0xbc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d207      	bcs.n	8007500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <prvAddNewTaskToReadyList+0xd0>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20001e68 	.word	0x20001e68
 800750c:	20001d68 	.word	0x20001d68
 8007510:	20001e74 	.word	0x20001e74
 8007514:	20001e84 	.word	0x20001e84
 8007518:	20001e70 	.word	0x20001e70
 800751c:	20001d6c 	.word	0x20001d6c
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d017      	beq.n	8007566 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <vTaskDelay+0x60>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <vTaskDelay+0x30>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	60bb      	str	r3, [r7, #8]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007554:	f000 f884 	bl	8007660 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007558:	2100      	movs	r1, #0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fb28 	bl	8007bb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007560:	f000 f88c 	bl	800767c <xTaskResumeAll>
 8007564:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <vTaskDelay+0x64>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20001e90 	.word	0x20001e90
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	; 0x28
 8007590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800759a:	463a      	mov	r2, r7
 800759c:	1d39      	adds	r1, r7, #4
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7f9 fcba 	bl	8000f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	9202      	str	r2, [sp, #8]
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	460a      	mov	r2, r1
 80075ba:	4921      	ldr	r1, [pc, #132]	; (8007640 <vTaskStartScheduler+0xb4>)
 80075bc:	4821      	ldr	r0, [pc, #132]	; (8007644 <vTaskStartScheduler+0xb8>)
 80075be:	f7ff fe0f 	bl	80071e0 <xTaskCreateStatic>
 80075c2:	4603      	mov	r3, r0
 80075c4:	4a20      	ldr	r2, [pc, #128]	; (8007648 <vTaskStartScheduler+0xbc>)
 80075c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075c8:	4b1f      	ldr	r3, [pc, #124]	; (8007648 <vTaskStartScheduler+0xbc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075d0:	2301      	movs	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e001      	b.n	80075da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d11b      	bne.n	8007618 <vTaskStartScheduler+0x8c>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	613b      	str	r3, [r7, #16]
}
 80075f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075f4:	4b15      	ldr	r3, [pc, #84]	; (800764c <vTaskStartScheduler+0xc0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	334c      	adds	r3, #76	; 0x4c
 80075fa:	4a15      	ldr	r2, [pc, #84]	; (8007650 <vTaskStartScheduler+0xc4>)
 80075fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <vTaskStartScheduler+0xc8>)
 8007600:	f04f 32ff 	mov.w	r2, #4294967295
 8007604:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <vTaskStartScheduler+0xcc>)
 8007608:	2201      	movs	r2, #1
 800760a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800760c:	4b13      	ldr	r3, [pc, #76]	; (800765c <vTaskStartScheduler+0xd0>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007612:	f7ff fcb1 	bl	8006f78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007616:	e00e      	b.n	8007636 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d10a      	bne.n	8007636 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60fb      	str	r3, [r7, #12]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <vTaskStartScheduler+0xa8>
}
 8007636:	bf00      	nop
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	08009250 	.word	0x08009250
 8007644:	080079f5 	.word	0x080079f5
 8007648:	20001e8c 	.word	0x20001e8c
 800764c:	20001d68 	.word	0x20001d68
 8007650:	2000009c 	.word	0x2000009c
 8007654:	20001e88 	.word	0x20001e88
 8007658:	20001e74 	.word	0x20001e74
 800765c:	20001e6c 	.word	0x20001e6c

08007660 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <vTaskSuspendAll+0x18>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a03      	ldr	r2, [pc, #12]	; (8007678 <vTaskSuspendAll+0x18>)
 800766c:	6013      	str	r3, [r2, #0]
}
 800766e:	bf00      	nop
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20001e90 	.word	0x20001e90

0800767c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800768a:	4b41      	ldr	r3, [pc, #260]	; (8007790 <xTaskResumeAll+0x114>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	603b      	str	r3, [r7, #0]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076a8:	f7ff fcd8 	bl	800705c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076ac:	4b38      	ldr	r3, [pc, #224]	; (8007790 <xTaskResumeAll+0x114>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4a37      	ldr	r2, [pc, #220]	; (8007790 <xTaskResumeAll+0x114>)
 80076b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076b6:	4b36      	ldr	r3, [pc, #216]	; (8007790 <xTaskResumeAll+0x114>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d161      	bne.n	8007782 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076be:	4b35      	ldr	r3, [pc, #212]	; (8007794 <xTaskResumeAll+0x118>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d05d      	beq.n	8007782 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c6:	e02e      	b.n	8007726 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80076c8:	4b33      	ldr	r3, [pc, #204]	; (8007798 <xTaskResumeAll+0x11c>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3318      	adds	r3, #24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fba9 	bl	8006e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fba4 	bl	8006e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	2201      	movs	r2, #1
 80076ea:	409a      	lsls	r2, r3
 80076ec:	4b2b      	ldr	r3, [pc, #172]	; (800779c <xTaskResumeAll+0x120>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <xTaskResumeAll+0x120>)
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <xTaskResumeAll+0x124>)
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7ff fb32 	bl	8006d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <xTaskResumeAll+0x128>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	429a      	cmp	r2, r3
 800771e:	d302      	bcc.n	8007726 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007720:	4b21      	ldr	r3, [pc, #132]	; (80077a8 <xTaskResumeAll+0x12c>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007726:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <xTaskResumeAll+0x11c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1cc      	bne.n	80076c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007734:	f000 fa18 	bl	8007b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007738:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <xTaskResumeAll+0x130>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d010      	beq.n	8007766 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007744:	f000 f836 	bl	80077b4 <xTaskIncrementTick>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800774e:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <xTaskResumeAll+0x12c>)
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3b01      	subs	r3, #1
 8007758:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f1      	bne.n	8007744 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007760:	4b12      	ldr	r3, [pc, #72]	; (80077ac <xTaskResumeAll+0x130>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007766:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <xTaskResumeAll+0x12c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <xTaskResumeAll+0x134>)
 8007774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007782:	f7ff fc9b 	bl	80070bc <vPortExitCritical>

	return xAlreadyYielded;
 8007786:	68bb      	ldr	r3, [r7, #8]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20001e90 	.word	0x20001e90
 8007794:	20001e68 	.word	0x20001e68
 8007798:	20001e28 	.word	0x20001e28
 800779c:	20001e70 	.word	0x20001e70
 80077a0:	20001d6c 	.word	0x20001d6c
 80077a4:	20001d68 	.word	0x20001d68
 80077a8:	20001e7c 	.word	0x20001e7c
 80077ac:	20001e78 	.word	0x20001e78
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077be:	4b51      	ldr	r3, [pc, #324]	; (8007904 <xTaskIncrementTick+0x150>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 808d 	bne.w	80078e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077c8:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <xTaskIncrementTick+0x154>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077d0:	4a4d      	ldr	r2, [pc, #308]	; (8007908 <xTaskIncrementTick+0x154>)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d120      	bne.n	800781e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077dc:	4b4b      	ldr	r3, [pc, #300]	; (800790c <xTaskIncrementTick+0x158>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <xTaskIncrementTick+0x48>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	603b      	str	r3, [r7, #0]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xTaskIncrementTick+0x46>
 80077fc:	4b43      	ldr	r3, [pc, #268]	; (800790c <xTaskIncrementTick+0x158>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	4b43      	ldr	r3, [pc, #268]	; (8007910 <xTaskIncrementTick+0x15c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a41      	ldr	r2, [pc, #260]	; (800790c <xTaskIncrementTick+0x158>)
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	4a41      	ldr	r2, [pc, #260]	; (8007910 <xTaskIncrementTick+0x15c>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	4b40      	ldr	r3, [pc, #256]	; (8007914 <xTaskIncrementTick+0x160>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a3f      	ldr	r2, [pc, #252]	; (8007914 <xTaskIncrementTick+0x160>)
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	f000 f9a5 	bl	8007b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800781e:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <xTaskIncrementTick+0x164>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d34d      	bcc.n	80078c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007828:	4b38      	ldr	r3, [pc, #224]	; (800790c <xTaskIncrementTick+0x158>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <xTaskIncrementTick+0x82>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <xTaskIncrementTick+0x84>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783c:	4b36      	ldr	r3, [pc, #216]	; (8007918 <xTaskIncrementTick+0x164>)
 800783e:	f04f 32ff 	mov.w	r2, #4294967295
 8007842:	601a      	str	r2, [r3, #0]
					break;
 8007844:	e03e      	b.n	80078c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007846:	4b31      	ldr	r3, [pc, #196]	; (800790c <xTaskIncrementTick+0x158>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d203      	bcs.n	8007866 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800785e:	4a2e      	ldr	r2, [pc, #184]	; (8007918 <xTaskIncrementTick+0x164>)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6013      	str	r3, [r2, #0]
						break;
 8007864:	e02e      	b.n	80078c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fade 	bl	8006e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3318      	adds	r3, #24
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff fad5 	bl	8006e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	2201      	movs	r2, #1
 8007888:	409a      	lsls	r2, r3
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <xTaskIncrementTick+0x168>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4313      	orrs	r3, r2
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <xTaskIncrementTick+0x168>)
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <xTaskIncrementTick+0x16c>)
 80078a2:	441a      	add	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7ff fa63 	bl	8006d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <xTaskIncrementTick+0x170>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d3b4      	bcc.n	8007828 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c2:	e7b1      	b.n	8007828 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078c4:	4b17      	ldr	r3, [pc, #92]	; (8007924 <xTaskIncrementTick+0x170>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	4915      	ldr	r1, [pc, #84]	; (8007920 <xTaskIncrementTick+0x16c>)
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	440b      	add	r3, r1
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d907      	bls.n	80078ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e004      	b.n	80078ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <xTaskIncrementTick+0x174>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	4a0f      	ldr	r2, [pc, #60]	; (8007928 <xTaskIncrementTick+0x174>)
 80078ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <xTaskIncrementTick+0x178>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078f8:	697b      	ldr	r3, [r7, #20]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20001e90 	.word	0x20001e90
 8007908:	20001e6c 	.word	0x20001e6c
 800790c:	20001e20 	.word	0x20001e20
 8007910:	20001e24 	.word	0x20001e24
 8007914:	20001e80 	.word	0x20001e80
 8007918:	20001e88 	.word	0x20001e88
 800791c:	20001e70 	.word	0x20001e70
 8007920:	20001d6c 	.word	0x20001d6c
 8007924:	20001d68 	.word	0x20001d68
 8007928:	20001e78 	.word	0x20001e78
 800792c:	20001e7c 	.word	0x20001e7c

08007930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007936:	4b29      	ldr	r3, [pc, #164]	; (80079dc <vTaskSwitchContext+0xac>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800793e:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <vTaskSwitchContext+0xb0>)
 8007940:	2201      	movs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007944:	e044      	b.n	80079d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007946:	4b26      	ldr	r3, [pc, #152]	; (80079e0 <vTaskSwitchContext+0xb0>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800794c:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <vTaskSwitchContext+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	fab3 f383 	clz	r3, r3
 8007958:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	f1c3 031f 	rsb	r3, r3, #31
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	4921      	ldr	r1, [pc, #132]	; (80079e8 <vTaskSwitchContext+0xb8>)
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	607b      	str	r3, [r7, #4]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <vTaskSwitchContext+0x5a>
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <vTaskSwitchContext+0xb8>)
 8007998:	4413      	add	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	605a      	str	r2, [r3, #4]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3308      	adds	r3, #8
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d104      	bne.n	80079bc <vTaskSwitchContext+0x8c>
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <vTaskSwitchContext+0xbc>)
 80079c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079c6:	4b09      	ldr	r3, [pc, #36]	; (80079ec <vTaskSwitchContext+0xbc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	334c      	adds	r3, #76	; 0x4c
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <vTaskSwitchContext+0xc0>)
 80079ce:	6013      	str	r3, [r2, #0]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20001e90 	.word	0x20001e90
 80079e0:	20001e7c 	.word	0x20001e7c
 80079e4:	20001e70 	.word	0x20001e70
 80079e8:	20001d6c 	.word	0x20001d6c
 80079ec:	20001d68 	.word	0x20001d68
 80079f0:	2000009c 	.word	0x2000009c

080079f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079fc:	f000 f852 	bl	8007aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a00:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvIdleTask+0x28>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d9f9      	bls.n	80079fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <prvIdleTask+0x2c>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a18:	e7f0      	b.n	80079fc <prvIdleTask+0x8>
 8007a1a:	bf00      	nop
 8007a1c:	20001d6c 	.word	0x20001d6c
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	e00c      	b.n	8007a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <prvInitialiseTaskLists+0x60>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff f96e 	bl	8006d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3301      	adds	r3, #1
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d9ef      	bls.n	8007a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a50:	480d      	ldr	r0, [pc, #52]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a52:	f7ff f965 	bl	8006d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a56:	480d      	ldr	r0, [pc, #52]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a58:	f7ff f962 	bl	8006d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a5c:	480c      	ldr	r0, [pc, #48]	; (8007a90 <prvInitialiseTaskLists+0x6c>)
 8007a5e:	f7ff f95f 	bl	8006d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a62:	480c      	ldr	r0, [pc, #48]	; (8007a94 <prvInitialiseTaskLists+0x70>)
 8007a64:	f7ff f95c 	bl	8006d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a68:	480b      	ldr	r0, [pc, #44]	; (8007a98 <prvInitialiseTaskLists+0x74>)
 8007a6a:	f7ff f959 	bl	8006d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <prvInitialiseTaskLists+0x78>)
 8007a70:	4a05      	ldr	r2, [pc, #20]	; (8007a88 <prvInitialiseTaskLists+0x64>)
 8007a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a74:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <prvInitialiseTaskLists+0x7c>)
 8007a76:	4a05      	ldr	r2, [pc, #20]	; (8007a8c <prvInitialiseTaskLists+0x68>)
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20001d6c 	.word	0x20001d6c
 8007a88:	20001df8 	.word	0x20001df8
 8007a8c:	20001e0c 	.word	0x20001e0c
 8007a90:	20001e28 	.word	0x20001e28
 8007a94:	20001e3c 	.word	0x20001e3c
 8007a98:	20001e54 	.word	0x20001e54
 8007a9c:	20001e20 	.word	0x20001e20
 8007aa0:	20001e24 	.word	0x20001e24

08007aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aaa:	e019      	b.n	8007ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007aac:	f7ff fad6 	bl	800705c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <prvCheckTasksWaitingTermination+0x50>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff f9b5 	bl	8006e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <prvCheckTasksWaitingTermination+0x54>)
 8007aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ad6:	f7ff faf1 	bl	80070bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f810 	bl	8007b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <prvCheckTasksWaitingTermination+0x58>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e1      	bne.n	8007aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20001e3c 	.word	0x20001e3c
 8007af8:	20001e68 	.word	0x20001e68
 8007afc:	20001e50 	.word	0x20001e50

08007b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	334c      	adds	r3, #76	; 0x4c
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f999 	bl	8007e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe ffe9 	bl	8006af8 <vPortFree>
				vPortFree( pxTCB );
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fe ffe6 	bl	8006af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b2c:	e018      	b.n	8007b60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d103      	bne.n	8007b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fe ffdd 	bl	8006af8 <vPortFree>
	}
 8007b3e:	e00f      	b.n	8007b60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d00a      	beq.n	8007b60 <prvDeleteTCB+0x60>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <prvDeleteTCB+0x5e>
	}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <prvResetNextTaskUnblockTime+0x40>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <prvResetNextTaskUnblockTime+0x14>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <prvResetNextTaskUnblockTime+0x16>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <prvResetNextTaskUnblockTime+0x44>)
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b8a:	e008      	b.n	8007b9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b8c:	4b06      	ldr	r3, [pc, #24]	; (8007ba8 <prvResetNextTaskUnblockTime+0x40>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <prvResetNextTaskUnblockTime+0x44>)
 8007b9c:	6013      	str	r3, [r2, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr
 8007ba8:	20001e20 	.word	0x20001e20
 8007bac:	20001e88 	.word	0x20001e88

08007bb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bba:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff f930 	bl	8006e2c <uxListRemove>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007bd2:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	2201      	movs	r2, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43da      	mvns	r2, r3
 8007be0:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4013      	ands	r3, r2
 8007be6:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007be8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d10a      	bne.n	8007c08 <prvAddCurrentTaskToDelayedList+0x58>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d007      	beq.n	8007c08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	481a      	ldr	r0, [pc, #104]	; (8007c6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007c02:	f7ff f8b8 	bl	8006d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c06:	e026      	b.n	8007c56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d209      	bcs.n	8007c34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c20:	4b13      	ldr	r3, [pc, #76]	; (8007c70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7ff f8c5 	bl	8006dbc <vListInsert>
}
 8007c32:	e010      	b.n	8007c56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c34:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7ff f8bb 	bl	8006dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c46:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d202      	bcs.n	8007c56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c50:	4a09      	ldr	r2, [pc, #36]	; (8007c78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6013      	str	r3, [r2, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20001e6c 	.word	0x20001e6c
 8007c64:	20001d68 	.word	0x20001d68
 8007c68:	20001e70 	.word	0x20001e70
 8007c6c:	20001e54 	.word	0x20001e54
 8007c70:	20001e24 	.word	0x20001e24
 8007c74:	20001e20 	.word	0x20001e20
 8007c78:	20001e88 	.word	0x20001e88

08007c7c <__errno>:
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <__errno+0x8>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000009c 	.word	0x2000009c

08007c88 <__libc_init_array>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	4d0c      	ldr	r5, [pc, #48]	; (8007cc0 <__libc_init_array+0x38>)
 8007c8e:	4c0d      	ldr	r4, [pc, #52]	; (8007cc4 <__libc_init_array+0x3c>)
 8007c90:	1b64      	subs	r4, r4, r5
 8007c92:	10a4      	asrs	r4, r4, #2
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d109      	bne.n	8007cac <__libc_init_array+0x24>
 8007c98:	f001 f9ce 	bl	8009038 <_init>
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	4d0a      	ldr	r5, [pc, #40]	; (8007cc8 <__libc_init_array+0x40>)
 8007ca0:	4c0a      	ldr	r4, [pc, #40]	; (8007ccc <__libc_init_array+0x44>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	42a6      	cmp	r6, r4
 8007ca8:	d105      	bne.n	8007cb6 <__libc_init_array+0x2e>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb0:	4798      	blx	r3
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7ee      	b.n	8007c94 <__libc_init_array+0xc>
 8007cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cba:	4798      	blx	r3
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	e7f2      	b.n	8007ca6 <__libc_init_array+0x1e>
 8007cc0:	08009490 	.word	0x08009490
 8007cc4:	08009490 	.word	0x08009490
 8007cc8:	08009490 	.word	0x08009490
 8007ccc:	08009494 	.word	0x08009494

08007cd0 <__retarget_lock_acquire_recursive>:
 8007cd0:	4770      	bx	lr

08007cd2 <__retarget_lock_release_recursive>:
 8007cd2:	4770      	bx	lr

08007cd4 <memcpy>:
 8007cd4:	440a      	add	r2, r1
 8007cd6:	4291      	cmp	r1, r2
 8007cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cdc:	d100      	bne.n	8007ce0 <memcpy+0xc>
 8007cde:	4770      	bx	lr
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cec:	d1f9      	bne.n	8007ce2 <memcpy+0xe>
 8007cee:	bd10      	pop	{r4, pc}

08007cf0 <memset>:
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4402      	add	r2, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <sbrk_aligned>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4e0e      	ldr	r6, [pc, #56]	; (8007d3c <sbrk_aligned+0x3c>)
 8007d04:	460c      	mov	r4, r1
 8007d06:	6831      	ldr	r1, [r6, #0]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	b911      	cbnz	r1, 8007d12 <sbrk_aligned+0x12>
 8007d0c:	f000 f8f6 	bl	8007efc <_sbrk_r>
 8007d10:	6030      	str	r0, [r6, #0]
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 f8f1 	bl	8007efc <_sbrk_r>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d00a      	beq.n	8007d34 <sbrk_aligned+0x34>
 8007d1e:	1cc4      	adds	r4, r0, #3
 8007d20:	f024 0403 	bic.w	r4, r4, #3
 8007d24:	42a0      	cmp	r0, r4
 8007d26:	d007      	beq.n	8007d38 <sbrk_aligned+0x38>
 8007d28:	1a21      	subs	r1, r4, r0
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f8e6 	bl	8007efc <_sbrk_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	d101      	bne.n	8007d38 <sbrk_aligned+0x38>
 8007d34:	f04f 34ff 	mov.w	r4, #4294967295
 8007d38:	4620      	mov	r0, r4
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	20001e9c 	.word	0x20001e9c

08007d40 <_malloc_r>:
 8007d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d44:	1ccd      	adds	r5, r1, #3
 8007d46:	f025 0503 	bic.w	r5, r5, #3
 8007d4a:	3508      	adds	r5, #8
 8007d4c:	2d0c      	cmp	r5, #12
 8007d4e:	bf38      	it	cc
 8007d50:	250c      	movcc	r5, #12
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	4607      	mov	r7, r0
 8007d56:	db01      	blt.n	8007d5c <_malloc_r+0x1c>
 8007d58:	42a9      	cmp	r1, r5
 8007d5a:	d905      	bls.n	8007d68 <_malloc_r+0x28>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	2600      	movs	r6, #0
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	4630      	mov	r0, r6
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d68:	4e2e      	ldr	r6, [pc, #184]	; (8007e24 <_malloc_r+0xe4>)
 8007d6a:	f000 f937 	bl	8007fdc <__malloc_lock>
 8007d6e:	6833      	ldr	r3, [r6, #0]
 8007d70:	461c      	mov	r4, r3
 8007d72:	bb34      	cbnz	r4, 8007dc2 <_malloc_r+0x82>
 8007d74:	4629      	mov	r1, r5
 8007d76:	4638      	mov	r0, r7
 8007d78:	f7ff ffc2 	bl	8007d00 <sbrk_aligned>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	4604      	mov	r4, r0
 8007d80:	d14d      	bne.n	8007e1e <_malloc_r+0xde>
 8007d82:	6834      	ldr	r4, [r6, #0]
 8007d84:	4626      	mov	r6, r4
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d140      	bne.n	8007e0c <_malloc_r+0xcc>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4638      	mov	r0, r7
 8007d90:	eb04 0803 	add.w	r8, r4, r3
 8007d94:	f000 f8b2 	bl	8007efc <_sbrk_r>
 8007d98:	4580      	cmp	r8, r0
 8007d9a:	d13a      	bne.n	8007e12 <_malloc_r+0xd2>
 8007d9c:	6821      	ldr	r1, [r4, #0]
 8007d9e:	3503      	adds	r5, #3
 8007da0:	1a6d      	subs	r5, r5, r1
 8007da2:	f025 0503 	bic.w	r5, r5, #3
 8007da6:	3508      	adds	r5, #8
 8007da8:	2d0c      	cmp	r5, #12
 8007daa:	bf38      	it	cc
 8007dac:	250c      	movcc	r5, #12
 8007dae:	4638      	mov	r0, r7
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7ff ffa5 	bl	8007d00 <sbrk_aligned>
 8007db6:	3001      	adds	r0, #1
 8007db8:	d02b      	beq.n	8007e12 <_malloc_r+0xd2>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	442b      	add	r3, r5
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	e00e      	b.n	8007de0 <_malloc_r+0xa0>
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	1b52      	subs	r2, r2, r5
 8007dc6:	d41e      	bmi.n	8007e06 <_malloc_r+0xc6>
 8007dc8:	2a0b      	cmp	r2, #11
 8007dca:	d916      	bls.n	8007dfa <_malloc_r+0xba>
 8007dcc:	1961      	adds	r1, r4, r5
 8007dce:	42a3      	cmp	r3, r4
 8007dd0:	6025      	str	r5, [r4, #0]
 8007dd2:	bf18      	it	ne
 8007dd4:	6059      	strne	r1, [r3, #4]
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	bf08      	it	eq
 8007dda:	6031      	streq	r1, [r6, #0]
 8007ddc:	5162      	str	r2, [r4, r5]
 8007dde:	604b      	str	r3, [r1, #4]
 8007de0:	4638      	mov	r0, r7
 8007de2:	f104 060b 	add.w	r6, r4, #11
 8007de6:	f000 f8ff 	bl	8007fe8 <__malloc_unlock>
 8007dea:	f026 0607 	bic.w	r6, r6, #7
 8007dee:	1d23      	adds	r3, r4, #4
 8007df0:	1af2      	subs	r2, r6, r3
 8007df2:	d0b6      	beq.n	8007d62 <_malloc_r+0x22>
 8007df4:	1b9b      	subs	r3, r3, r6
 8007df6:	50a3      	str	r3, [r4, r2]
 8007df8:	e7b3      	b.n	8007d62 <_malloc_r+0x22>
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	bf0c      	ite	eq
 8007e00:	6032      	streq	r2, [r6, #0]
 8007e02:	605a      	strne	r2, [r3, #4]
 8007e04:	e7ec      	b.n	8007de0 <_malloc_r+0xa0>
 8007e06:	4623      	mov	r3, r4
 8007e08:	6864      	ldr	r4, [r4, #4]
 8007e0a:	e7b2      	b.n	8007d72 <_malloc_r+0x32>
 8007e0c:	4634      	mov	r4, r6
 8007e0e:	6876      	ldr	r6, [r6, #4]
 8007e10:	e7b9      	b.n	8007d86 <_malloc_r+0x46>
 8007e12:	230c      	movs	r3, #12
 8007e14:	4638      	mov	r0, r7
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	f000 f8e6 	bl	8007fe8 <__malloc_unlock>
 8007e1c:	e7a1      	b.n	8007d62 <_malloc_r+0x22>
 8007e1e:	6025      	str	r5, [r4, #0]
 8007e20:	e7de      	b.n	8007de0 <_malloc_r+0xa0>
 8007e22:	bf00      	nop
 8007e24:	20001e98 	.word	0x20001e98

08007e28 <cleanup_glue>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	6809      	ldr	r1, [r1, #0]
 8007e2e:	4605      	mov	r5, r0
 8007e30:	b109      	cbz	r1, 8007e36 <cleanup_glue+0xe>
 8007e32:	f7ff fff9 	bl	8007e28 <cleanup_glue>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3e:	f000 b8d9 	b.w	8007ff4 <_free_r>
	...

08007e44 <_reclaim_reent>:
 8007e44:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <_reclaim_reent+0xb4>)
 8007e46:	b570      	push	{r4, r5, r6, lr}
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4283      	cmp	r3, r0
 8007e4e:	d051      	beq.n	8007ef4 <_reclaim_reent+0xb0>
 8007e50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e52:	b143      	cbz	r3, 8007e66 <_reclaim_reent+0x22>
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d14a      	bne.n	8007ef0 <_reclaim_reent+0xac>
 8007e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5c:	6819      	ldr	r1, [r3, #0]
 8007e5e:	b111      	cbz	r1, 8007e66 <_reclaim_reent+0x22>
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 f8c7 	bl	8007ff4 <_free_r>
 8007e66:	6961      	ldr	r1, [r4, #20]
 8007e68:	b111      	cbz	r1, 8007e70 <_reclaim_reent+0x2c>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f8c2 	bl	8007ff4 <_free_r>
 8007e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e72:	b111      	cbz	r1, 8007e7a <_reclaim_reent+0x36>
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 f8bd 	bl	8007ff4 <_free_r>
 8007e7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e7c:	b111      	cbz	r1, 8007e84 <_reclaim_reent+0x40>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 f8b8 	bl	8007ff4 <_free_r>
 8007e84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e86:	b111      	cbz	r1, 8007e8e <_reclaim_reent+0x4a>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 f8b3 	bl	8007ff4 <_free_r>
 8007e8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e90:	b111      	cbz	r1, 8007e98 <_reclaim_reent+0x54>
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f8ae 	bl	8007ff4 <_free_r>
 8007e98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e9a:	b111      	cbz	r1, 8007ea2 <_reclaim_reent+0x5e>
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 f8a9 	bl	8007ff4 <_free_r>
 8007ea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ea4:	b111      	cbz	r1, 8007eac <_reclaim_reent+0x68>
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 f8a4 	bl	8007ff4 <_free_r>
 8007eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eae:	b111      	cbz	r1, 8007eb6 <_reclaim_reent+0x72>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 f89f 	bl	8007ff4 <_free_r>
 8007eb6:	69a3      	ldr	r3, [r4, #24]
 8007eb8:	b1e3      	cbz	r3, 8007ef4 <_reclaim_reent+0xb0>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ebe:	4798      	blx	r3
 8007ec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007ec2:	b1b9      	cbz	r1, 8007ef4 <_reclaim_reent+0xb0>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007eca:	f7ff bfad 	b.w	8007e28 <cleanup_glue>
 8007ece:	5949      	ldr	r1, [r1, r5]
 8007ed0:	b941      	cbnz	r1, 8007ee4 <_reclaim_reent+0xa0>
 8007ed2:	3504      	adds	r5, #4
 8007ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed6:	2d80      	cmp	r5, #128	; 0x80
 8007ed8:	68d9      	ldr	r1, [r3, #12]
 8007eda:	d1f8      	bne.n	8007ece <_reclaim_reent+0x8a>
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 f889 	bl	8007ff4 <_free_r>
 8007ee2:	e7ba      	b.n	8007e5a <_reclaim_reent+0x16>
 8007ee4:	680e      	ldr	r6, [r1, #0]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f884 	bl	8007ff4 <_free_r>
 8007eec:	4631      	mov	r1, r6
 8007eee:	e7ef      	b.n	8007ed0 <_reclaim_reent+0x8c>
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	e7ef      	b.n	8007ed4 <_reclaim_reent+0x90>
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	bf00      	nop
 8007ef8:	2000009c 	.word	0x2000009c

08007efc <_sbrk_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	2300      	movs	r3, #0
 8007f00:	4d05      	ldr	r5, [pc, #20]	; (8007f18 <_sbrk_r+0x1c>)
 8007f02:	4604      	mov	r4, r0
 8007f04:	4608      	mov	r0, r1
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	f7f9 fd9e 	bl	8001a48 <_sbrk>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_sbrk_r+0x1a>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_sbrk_r+0x1a>
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	20001ea0 	.word	0x20001ea0

08007f1c <siprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f22:	b500      	push	{lr}
 8007f24:	b09c      	sub	sp, #112	; 0x70
 8007f26:	ab1d      	add	r3, sp, #116	; 0x74
 8007f28:	9002      	str	r0, [sp, #8]
 8007f2a:	9006      	str	r0, [sp, #24]
 8007f2c:	9107      	str	r1, [sp, #28]
 8007f2e:	9104      	str	r1, [sp, #16]
 8007f30:	4808      	ldr	r0, [pc, #32]	; (8007f54 <siprintf+0x38>)
 8007f32:	4909      	ldr	r1, [pc, #36]	; (8007f58 <siprintf+0x3c>)
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	9105      	str	r1, [sp, #20]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	a902      	add	r1, sp, #8
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	f000 f8fc 	bl	800813c <_svfiprintf_r>
 8007f44:	2200      	movs	r2, #0
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	b01c      	add	sp, #112	; 0x70
 8007f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f50:	b003      	add	sp, #12
 8007f52:	4770      	bx	lr
 8007f54:	2000009c 	.word	0x2000009c
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <siscanf>:
 8007f5c:	b40e      	push	{r1, r2, r3}
 8007f5e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007f62:	b530      	push	{r4, r5, lr}
 8007f64:	b09c      	sub	sp, #112	; 0x70
 8007f66:	ac1f      	add	r4, sp, #124	; 0x7c
 8007f68:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	9006      	str	r0, [sp, #24]
 8007f74:	f7f8 f90e 	bl	8000194 <strlen>
 8007f78:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <siscanf+0x4c>)
 8007f7a:	9003      	str	r0, [sp, #12]
 8007f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f7e:	2300      	movs	r3, #0
 8007f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f82:	9314      	str	r3, [sp, #80]	; 0x50
 8007f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f88:	9007      	str	r0, [sp, #28]
 8007f8a:	4808      	ldr	r0, [pc, #32]	; (8007fac <siscanf+0x50>)
 8007f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f90:	462a      	mov	r2, r5
 8007f92:	4623      	mov	r3, r4
 8007f94:	a902      	add	r1, sp, #8
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	9401      	str	r4, [sp, #4]
 8007f9a:	f000 fa29 	bl	80083f0 <__ssvfiscanf_r>
 8007f9e:	b01c      	add	sp, #112	; 0x70
 8007fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fa4:	b003      	add	sp, #12
 8007fa6:	4770      	bx	lr
 8007fa8:	08007fb1 	.word	0x08007fb1
 8007fac:	2000009c 	.word	0x2000009c

08007fb0 <__seofread>:
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	4770      	bx	lr

08007fb4 <strncmp>:
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	b172      	cbz	r2, 8007fd8 <strncmp+0x24>
 8007fba:	3901      	subs	r1, #1
 8007fbc:	1884      	adds	r4, r0, r2
 8007fbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fc6:	4290      	cmp	r0, r2
 8007fc8:	d101      	bne.n	8007fce <strncmp+0x1a>
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	d101      	bne.n	8007fd2 <strncmp+0x1e>
 8007fce:	1a80      	subs	r0, r0, r2
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1f3      	bne.n	8007fbe <strncmp+0xa>
 8007fd6:	e7fa      	b.n	8007fce <strncmp+0x1a>
 8007fd8:	4610      	mov	r0, r2
 8007fda:	e7f9      	b.n	8007fd0 <strncmp+0x1c>

08007fdc <__malloc_lock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__malloc_lock+0x8>)
 8007fde:	f7ff be77 	b.w	8007cd0 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20001e94 	.word	0x20001e94

08007fe8 <__malloc_unlock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__malloc_unlock+0x8>)
 8007fea:	f7ff be72 	b.w	8007cd2 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20001e94 	.word	0x20001e94

08007ff4 <_free_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d040      	beq.n	800807e <_free_r+0x8a>
 8007ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008000:	1f0c      	subs	r4, r1, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	bfb8      	it	lt
 8008006:	18e4      	addlt	r4, r4, r3
 8008008:	f7ff ffe8 	bl	8007fdc <__malloc_lock>
 800800c:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <_free_r+0x8c>)
 800800e:	6813      	ldr	r3, [r2, #0]
 8008010:	b933      	cbnz	r3, 8008020 <_free_r+0x2c>
 8008012:	6063      	str	r3, [r4, #4]
 8008014:	6014      	str	r4, [r2, #0]
 8008016:	4628      	mov	r0, r5
 8008018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800801c:	f7ff bfe4 	b.w	8007fe8 <__malloc_unlock>
 8008020:	42a3      	cmp	r3, r4
 8008022:	d908      	bls.n	8008036 <_free_r+0x42>
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	1821      	adds	r1, r4, r0
 8008028:	428b      	cmp	r3, r1
 800802a:	bf01      	itttt	eq
 800802c:	6819      	ldreq	r1, [r3, #0]
 800802e:	685b      	ldreq	r3, [r3, #4]
 8008030:	1809      	addeq	r1, r1, r0
 8008032:	6021      	streq	r1, [r4, #0]
 8008034:	e7ed      	b.n	8008012 <_free_r+0x1e>
 8008036:	461a      	mov	r2, r3
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	b10b      	cbz	r3, 8008040 <_free_r+0x4c>
 800803c:	42a3      	cmp	r3, r4
 800803e:	d9fa      	bls.n	8008036 <_free_r+0x42>
 8008040:	6811      	ldr	r1, [r2, #0]
 8008042:	1850      	adds	r0, r2, r1
 8008044:	42a0      	cmp	r0, r4
 8008046:	d10b      	bne.n	8008060 <_free_r+0x6c>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	4401      	add	r1, r0
 800804c:	1850      	adds	r0, r2, r1
 800804e:	4283      	cmp	r3, r0
 8008050:	6011      	str	r1, [r2, #0]
 8008052:	d1e0      	bne.n	8008016 <_free_r+0x22>
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	4401      	add	r1, r0
 800805a:	6011      	str	r1, [r2, #0]
 800805c:	6053      	str	r3, [r2, #4]
 800805e:	e7da      	b.n	8008016 <_free_r+0x22>
 8008060:	d902      	bls.n	8008068 <_free_r+0x74>
 8008062:	230c      	movs	r3, #12
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	e7d6      	b.n	8008016 <_free_r+0x22>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	1821      	adds	r1, r4, r0
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	6054      	str	r4, [r2, #4]
 800807c:	e7cb      	b.n	8008016 <_free_r+0x22>
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	20001e98 	.word	0x20001e98

08008084 <__ssputs_r>:
 8008084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008088:	688e      	ldr	r6, [r1, #8]
 800808a:	4682      	mov	sl, r0
 800808c:	429e      	cmp	r6, r3
 800808e:	460c      	mov	r4, r1
 8008090:	4690      	mov	r8, r2
 8008092:	461f      	mov	r7, r3
 8008094:	d838      	bhi.n	8008108 <__ssputs_r+0x84>
 8008096:	898a      	ldrh	r2, [r1, #12]
 8008098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800809c:	d032      	beq.n	8008104 <__ssputs_r+0x80>
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	6909      	ldr	r1, [r1, #16]
 80080a2:	3301      	adds	r3, #1
 80080a4:	eba5 0901 	sub.w	r9, r5, r1
 80080a8:	6965      	ldr	r5, [r4, #20]
 80080aa:	444b      	add	r3, r9
 80080ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080b4:	106d      	asrs	r5, r5, #1
 80080b6:	429d      	cmp	r5, r3
 80080b8:	bf38      	it	cc
 80080ba:	461d      	movcc	r5, r3
 80080bc:	0553      	lsls	r3, r2, #21
 80080be:	d531      	bpl.n	8008124 <__ssputs_r+0xa0>
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7ff fe3d 	bl	8007d40 <_malloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	b950      	cbnz	r0, 80080e0 <__ssputs_r+0x5c>
 80080ca:	230c      	movs	r3, #12
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	f8ca 3000 	str.w	r3, [sl]
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	464a      	mov	r2, r9
 80080e2:	6921      	ldr	r1, [r4, #16]
 80080e4:	f7ff fdf6 	bl	8007cd4 <memcpy>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	6126      	str	r6, [r4, #16]
 80080f6:	444e      	add	r6, r9
 80080f8:	6026      	str	r6, [r4, #0]
 80080fa:	463e      	mov	r6, r7
 80080fc:	6165      	str	r5, [r4, #20]
 80080fe:	eba5 0509 	sub.w	r5, r5, r9
 8008102:	60a5      	str	r5, [r4, #8]
 8008104:	42be      	cmp	r6, r7
 8008106:	d900      	bls.n	800810a <__ssputs_r+0x86>
 8008108:	463e      	mov	r6, r7
 800810a:	4632      	mov	r2, r6
 800810c:	4641      	mov	r1, r8
 800810e:	6820      	ldr	r0, [r4, #0]
 8008110:	f000 ff40 	bl	8008f94 <memmove>
 8008114:	68a3      	ldr	r3, [r4, #8]
 8008116:	2000      	movs	r0, #0
 8008118:	1b9b      	subs	r3, r3, r6
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	4433      	add	r3, r6
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	e7db      	b.n	80080dc <__ssputs_r+0x58>
 8008124:	462a      	mov	r2, r5
 8008126:	f000 ff4f 	bl	8008fc8 <_realloc_r>
 800812a:	4606      	mov	r6, r0
 800812c:	2800      	cmp	r0, #0
 800812e:	d1e1      	bne.n	80080f4 <__ssputs_r+0x70>
 8008130:	4650      	mov	r0, sl
 8008132:	6921      	ldr	r1, [r4, #16]
 8008134:	f7ff ff5e 	bl	8007ff4 <_free_r>
 8008138:	e7c7      	b.n	80080ca <__ssputs_r+0x46>
	...

0800813c <_svfiprintf_r>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4698      	mov	r8, r3
 8008142:	898b      	ldrh	r3, [r1, #12]
 8008144:	4607      	mov	r7, r0
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	460d      	mov	r5, r1
 800814a:	4614      	mov	r4, r2
 800814c:	b09d      	sub	sp, #116	; 0x74
 800814e:	d50e      	bpl.n	800816e <_svfiprintf_r+0x32>
 8008150:	690b      	ldr	r3, [r1, #16]
 8008152:	b963      	cbnz	r3, 800816e <_svfiprintf_r+0x32>
 8008154:	2140      	movs	r1, #64	; 0x40
 8008156:	f7ff fdf3 	bl	8007d40 <_malloc_r>
 800815a:	6028      	str	r0, [r5, #0]
 800815c:	6128      	str	r0, [r5, #16]
 800815e:	b920      	cbnz	r0, 800816a <_svfiprintf_r+0x2e>
 8008160:	230c      	movs	r3, #12
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	e0d1      	b.n	800830e <_svfiprintf_r+0x1d2>
 800816a:	2340      	movs	r3, #64	; 0x40
 800816c:	616b      	str	r3, [r5, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	9309      	str	r3, [sp, #36]	; 0x24
 8008172:	2320      	movs	r3, #32
 8008174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008178:	2330      	movs	r3, #48	; 0x30
 800817a:	f04f 0901 	mov.w	r9, #1
 800817e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008328 <_svfiprintf_r+0x1ec>
 8008186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800818a:	4623      	mov	r3, r4
 800818c:	469a      	mov	sl, r3
 800818e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008192:	b10a      	cbz	r2, 8008198 <_svfiprintf_r+0x5c>
 8008194:	2a25      	cmp	r2, #37	; 0x25
 8008196:	d1f9      	bne.n	800818c <_svfiprintf_r+0x50>
 8008198:	ebba 0b04 	subs.w	fp, sl, r4
 800819c:	d00b      	beq.n	80081b6 <_svfiprintf_r+0x7a>
 800819e:	465b      	mov	r3, fp
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff ff6d 	bl	8008084 <__ssputs_r>
 80081aa:	3001      	adds	r0, #1
 80081ac:	f000 80aa 	beq.w	8008304 <_svfiprintf_r+0x1c8>
 80081b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b2:	445a      	add	r2, fp
 80081b4:	9209      	str	r2, [sp, #36]	; 0x24
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80a2 	beq.w	8008304 <_svfiprintf_r+0x1c8>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ca:	f10a 0a01 	add.w	sl, sl, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081d6:	931a      	str	r3, [sp, #104]	; 0x68
 80081d8:	4654      	mov	r4, sl
 80081da:	2205      	movs	r2, #5
 80081dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e0:	4851      	ldr	r0, [pc, #324]	; (8008328 <_svfiprintf_r+0x1ec>)
 80081e2:	f000 fec9 	bl	8008f78 <memchr>
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	b9d8      	cbnz	r0, 8008222 <_svfiprintf_r+0xe6>
 80081ea:	06d0      	lsls	r0, r2, #27
 80081ec:	bf44      	itt	mi
 80081ee:	2320      	movmi	r3, #32
 80081f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f4:	0711      	lsls	r1, r2, #28
 80081f6:	bf44      	itt	mi
 80081f8:	232b      	movmi	r3, #43	; 0x2b
 80081fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b2a      	cmp	r3, #42	; 0x2a
 8008204:	d015      	beq.n	8008232 <_svfiprintf_r+0xf6>
 8008206:	4654      	mov	r4, sl
 8008208:	2000      	movs	r0, #0
 800820a:	f04f 0c0a 	mov.w	ip, #10
 800820e:	9a07      	ldr	r2, [sp, #28]
 8008210:	4621      	mov	r1, r4
 8008212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008216:	3b30      	subs	r3, #48	; 0x30
 8008218:	2b09      	cmp	r3, #9
 800821a:	d94e      	bls.n	80082ba <_svfiprintf_r+0x17e>
 800821c:	b1b0      	cbz	r0, 800824c <_svfiprintf_r+0x110>
 800821e:	9207      	str	r2, [sp, #28]
 8008220:	e014      	b.n	800824c <_svfiprintf_r+0x110>
 8008222:	eba0 0308 	sub.w	r3, r0, r8
 8008226:	fa09 f303 	lsl.w	r3, r9, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	46a2      	mov	sl, r4
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	e7d2      	b.n	80081d8 <_svfiprintf_r+0x9c>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfbb      	ittet	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	f042 0202 	orrlt.w	r2, r2, #2
 8008244:	9307      	strge	r3, [sp, #28]
 8008246:	9307      	strlt	r3, [sp, #28]
 8008248:	bfb8      	it	lt
 800824a:	9204      	strlt	r2, [sp, #16]
 800824c:	7823      	ldrb	r3, [r4, #0]
 800824e:	2b2e      	cmp	r3, #46	; 0x2e
 8008250:	d10c      	bne.n	800826c <_svfiprintf_r+0x130>
 8008252:	7863      	ldrb	r3, [r4, #1]
 8008254:	2b2a      	cmp	r3, #42	; 0x2a
 8008256:	d135      	bne.n	80082c4 <_svfiprintf_r+0x188>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	3402      	adds	r4, #2
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	9203      	str	r2, [sp, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfb8      	it	lt
 8008266:	f04f 33ff 	movlt.w	r3, #4294967295
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800832c <_svfiprintf_r+0x1f0>
 8008270:	2203      	movs	r2, #3
 8008272:	4650      	mov	r0, sl
 8008274:	7821      	ldrb	r1, [r4, #0]
 8008276:	f000 fe7f 	bl	8008f78 <memchr>
 800827a:	b140      	cbz	r0, 800828e <_svfiprintf_r+0x152>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	eba0 000a 	sub.w	r0, r0, sl
 8008282:	fa03 f000 	lsl.w	r0, r3, r0
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	3401      	adds	r4, #1
 800828a:	4303      	orrs	r3, r0
 800828c:	9304      	str	r3, [sp, #16]
 800828e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008292:	2206      	movs	r2, #6
 8008294:	4826      	ldr	r0, [pc, #152]	; (8008330 <_svfiprintf_r+0x1f4>)
 8008296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800829a:	f000 fe6d 	bl	8008f78 <memchr>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d038      	beq.n	8008314 <_svfiprintf_r+0x1d8>
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <_svfiprintf_r+0x1f8>)
 80082a4:	bb1b      	cbnz	r3, 80082ee <_svfiprintf_r+0x1b2>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	3307      	adds	r3, #7
 80082aa:	f023 0307 	bic.w	r3, r3, #7
 80082ae:	3308      	adds	r3, #8
 80082b0:	9303      	str	r3, [sp, #12]
 80082b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b4:	4433      	add	r3, r6
 80082b6:	9309      	str	r3, [sp, #36]	; 0x24
 80082b8:	e767      	b.n	800818a <_svfiprintf_r+0x4e>
 80082ba:	460c      	mov	r4, r1
 80082bc:	2001      	movs	r0, #1
 80082be:	fb0c 3202 	mla	r2, ip, r2, r3
 80082c2:	e7a5      	b.n	8008210 <_svfiprintf_r+0xd4>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f04f 0c0a 	mov.w	ip, #10
 80082ca:	4619      	mov	r1, r3
 80082cc:	3401      	adds	r4, #1
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	4620      	mov	r0, r4
 80082d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d6:	3a30      	subs	r2, #48	; 0x30
 80082d8:	2a09      	cmp	r2, #9
 80082da:	d903      	bls.n	80082e4 <_svfiprintf_r+0x1a8>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0c5      	beq.n	800826c <_svfiprintf_r+0x130>
 80082e0:	9105      	str	r1, [sp, #20]
 80082e2:	e7c3      	b.n	800826c <_svfiprintf_r+0x130>
 80082e4:	4604      	mov	r4, r0
 80082e6:	2301      	movs	r3, #1
 80082e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ec:	e7f0      	b.n	80082d0 <_svfiprintf_r+0x194>
 80082ee:	ab03      	add	r3, sp, #12
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	462a      	mov	r2, r5
 80082f4:	4638      	mov	r0, r7
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <_svfiprintf_r+0x1fc>)
 80082f8:	a904      	add	r1, sp, #16
 80082fa:	f3af 8000 	nop.w
 80082fe:	1c42      	adds	r2, r0, #1
 8008300:	4606      	mov	r6, r0
 8008302:	d1d6      	bne.n	80082b2 <_svfiprintf_r+0x176>
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	065b      	lsls	r3, r3, #25
 8008308:	f53f af2c 	bmi.w	8008164 <_svfiprintf_r+0x28>
 800830c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830e:	b01d      	add	sp, #116	; 0x74
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	ab03      	add	r3, sp, #12
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	462a      	mov	r2, r5
 800831a:	4638      	mov	r0, r7
 800831c:	4b06      	ldr	r3, [pc, #24]	; (8008338 <_svfiprintf_r+0x1fc>)
 800831e:	a904      	add	r1, sp, #16
 8008320:	f000 fa50 	bl	80087c4 <_printf_i>
 8008324:	e7eb      	b.n	80082fe <_svfiprintf_r+0x1c2>
 8008326:	bf00      	nop
 8008328:	08009338 	.word	0x08009338
 800832c:	0800933e 	.word	0x0800933e
 8008330:	08009342 	.word	0x08009342
 8008334:	00000000 	.word	0x00000000
 8008338:	08008085 	.word	0x08008085

0800833c <_sungetc_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	1c4b      	adds	r3, r1, #1
 8008340:	4614      	mov	r4, r2
 8008342:	d103      	bne.n	800834c <_sungetc_r+0x10>
 8008344:	f04f 35ff 	mov.w	r5, #4294967295
 8008348:	4628      	mov	r0, r5
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	8993      	ldrh	r3, [r2, #12]
 800834e:	b2cd      	uxtb	r5, r1
 8008350:	f023 0320 	bic.w	r3, r3, #32
 8008354:	8193      	strh	r3, [r2, #12]
 8008356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008358:	6852      	ldr	r2, [r2, #4]
 800835a:	b18b      	cbz	r3, 8008380 <_sungetc_r+0x44>
 800835c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800835e:	4293      	cmp	r3, r2
 8008360:	dd08      	ble.n	8008374 <_sungetc_r+0x38>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	1e5a      	subs	r2, r3, #1
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	f803 5c01 	strb.w	r5, [r3, #-1]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	6063      	str	r3, [r4, #4]
 8008372:	e7e9      	b.n	8008348 <_sungetc_r+0xc>
 8008374:	4621      	mov	r1, r4
 8008376:	f000 fdc7 	bl	8008f08 <__submore>
 800837a:	2800      	cmp	r0, #0
 800837c:	d0f1      	beq.n	8008362 <_sungetc_r+0x26>
 800837e:	e7e1      	b.n	8008344 <_sungetc_r+0x8>
 8008380:	6921      	ldr	r1, [r4, #16]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	b151      	cbz	r1, 800839c <_sungetc_r+0x60>
 8008386:	4299      	cmp	r1, r3
 8008388:	d208      	bcs.n	800839c <_sungetc_r+0x60>
 800838a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800838e:	42a9      	cmp	r1, r5
 8008390:	d104      	bne.n	800839c <_sungetc_r+0x60>
 8008392:	3b01      	subs	r3, #1
 8008394:	3201      	adds	r2, #1
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	6062      	str	r2, [r4, #4]
 800839a:	e7d5      	b.n	8008348 <_sungetc_r+0xc>
 800839c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80083a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083a4:	6363      	str	r3, [r4, #52]	; 0x34
 80083a6:	2303      	movs	r3, #3
 80083a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80083aa:	4623      	mov	r3, r4
 80083ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7dc      	b.n	8008370 <_sungetc_r+0x34>

080083b6 <__ssrefill_r>:
 80083b6:	b510      	push	{r4, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80083bc:	b169      	cbz	r1, 80083da <__ssrefill_r+0x24>
 80083be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c2:	4299      	cmp	r1, r3
 80083c4:	d001      	beq.n	80083ca <__ssrefill_r+0x14>
 80083c6:	f7ff fe15 	bl	8007ff4 <_free_r>
 80083ca:	2000      	movs	r0, #0
 80083cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083ce:	6360      	str	r0, [r4, #52]	; 0x34
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	b113      	cbz	r3, 80083da <__ssrefill_r+0x24>
 80083d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	f043 0320 	orr.w	r3, r3, #32
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	e7f3      	b.n	80083d8 <__ssrefill_r+0x22>

080083f0 <__ssvfiscanf_r>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	2100      	movs	r1, #0
 80083f8:	4606      	mov	r6, r0
 80083fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80083fe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008402:	49a7      	ldr	r1, [pc, #668]	; (80086a0 <__ssvfiscanf_r+0x2b0>)
 8008404:	f10d 0804 	add.w	r8, sp, #4
 8008408:	91a0      	str	r1, [sp, #640]	; 0x280
 800840a:	49a6      	ldr	r1, [pc, #664]	; (80086a4 <__ssvfiscanf_r+0x2b4>)
 800840c:	4fa6      	ldr	r7, [pc, #664]	; (80086a8 <__ssvfiscanf_r+0x2b8>)
 800840e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80086ac <__ssvfiscanf_r+0x2bc>
 8008412:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008416:	91a1      	str	r1, [sp, #644]	; 0x284
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	7813      	ldrb	r3, [r2, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 815c 	beq.w	80086da <__ssvfiscanf_r+0x2ea>
 8008422:	5dd9      	ldrb	r1, [r3, r7]
 8008424:	1c55      	adds	r5, r2, #1
 8008426:	f011 0108 	ands.w	r1, r1, #8
 800842a:	d019      	beq.n	8008460 <__ssvfiscanf_r+0x70>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd0f      	ble.n	8008452 <__ssvfiscanf_r+0x62>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	5cba      	ldrb	r2, [r7, r2]
 8008438:	0712      	lsls	r2, r2, #28
 800843a:	d401      	bmi.n	8008440 <__ssvfiscanf_r+0x50>
 800843c:	462a      	mov	r2, r5
 800843e:	e7ec      	b.n	800841a <__ssvfiscanf_r+0x2a>
 8008440:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008442:	3301      	adds	r3, #1
 8008444:	3201      	adds	r2, #1
 8008446:	9245      	str	r2, [sp, #276]	; 0x114
 8008448:	6862      	ldr	r2, [r4, #4]
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	3a01      	subs	r2, #1
 800844e:	6062      	str	r2, [r4, #4]
 8008450:	e7ec      	b.n	800842c <__ssvfiscanf_r+0x3c>
 8008452:	4621      	mov	r1, r4
 8008454:	4630      	mov	r0, r6
 8008456:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008458:	4798      	blx	r3
 800845a:	2800      	cmp	r0, #0
 800845c:	d0e9      	beq.n	8008432 <__ssvfiscanf_r+0x42>
 800845e:	e7ed      	b.n	800843c <__ssvfiscanf_r+0x4c>
 8008460:	2b25      	cmp	r3, #37	; 0x25
 8008462:	d012      	beq.n	800848a <__ssvfiscanf_r+0x9a>
 8008464:	469a      	mov	sl, r3
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f340 8094 	ble.w	8008596 <__ssvfiscanf_r+0x1a6>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	7813      	ldrb	r3, [r2, #0]
 8008472:	4553      	cmp	r3, sl
 8008474:	f040 8131 	bne.w	80086da <__ssvfiscanf_r+0x2ea>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	3201      	adds	r2, #1
 800847c:	3b01      	subs	r3, #1
 800847e:	6063      	str	r3, [r4, #4]
 8008480:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	9345      	str	r3, [sp, #276]	; 0x114
 8008488:	e7d8      	b.n	800843c <__ssvfiscanf_r+0x4c>
 800848a:	9141      	str	r1, [sp, #260]	; 0x104
 800848c:	9143      	str	r1, [sp, #268]	; 0x10c
 800848e:	7853      	ldrb	r3, [r2, #1]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	bf04      	itt	eq
 8008494:	2310      	moveq	r3, #16
 8008496:	1c95      	addeq	r5, r2, #2
 8008498:	f04f 020a 	mov.w	r2, #10
 800849c:	bf08      	it	eq
 800849e:	9341      	streq	r3, [sp, #260]	; 0x104
 80084a0:	46aa      	mov	sl, r5
 80084a2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80084a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80084aa:	2b09      	cmp	r3, #9
 80084ac:	d91d      	bls.n	80084ea <__ssvfiscanf_r+0xfa>
 80084ae:	2203      	movs	r2, #3
 80084b0:	487e      	ldr	r0, [pc, #504]	; (80086ac <__ssvfiscanf_r+0x2bc>)
 80084b2:	f000 fd61 	bl	8008f78 <memchr>
 80084b6:	b140      	cbz	r0, 80084ca <__ssvfiscanf_r+0xda>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4655      	mov	r5, sl
 80084bc:	eba0 0009 	sub.w	r0, r0, r9
 80084c0:	fa03 f000 	lsl.w	r0, r3, r0
 80084c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084c6:	4318      	orrs	r0, r3
 80084c8:	9041      	str	r0, [sp, #260]	; 0x104
 80084ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084ce:	2b78      	cmp	r3, #120	; 0x78
 80084d0:	d806      	bhi.n	80084e0 <__ssvfiscanf_r+0xf0>
 80084d2:	2b57      	cmp	r3, #87	; 0x57
 80084d4:	d810      	bhi.n	80084f8 <__ssvfiscanf_r+0x108>
 80084d6:	2b25      	cmp	r3, #37	; 0x25
 80084d8:	d0c4      	beq.n	8008464 <__ssvfiscanf_r+0x74>
 80084da:	d857      	bhi.n	800858c <__ssvfiscanf_r+0x19c>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d065      	beq.n	80085ac <__ssvfiscanf_r+0x1bc>
 80084e0:	2303      	movs	r3, #3
 80084e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80084e4:	230a      	movs	r3, #10
 80084e6:	9342      	str	r3, [sp, #264]	; 0x108
 80084e8:	e072      	b.n	80085d0 <__ssvfiscanf_r+0x1e0>
 80084ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80084ec:	4655      	mov	r5, sl
 80084ee:	fb02 1103 	mla	r1, r2, r3, r1
 80084f2:	3930      	subs	r1, #48	; 0x30
 80084f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80084f6:	e7d3      	b.n	80084a0 <__ssvfiscanf_r+0xb0>
 80084f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80084fc:	2a20      	cmp	r2, #32
 80084fe:	d8ef      	bhi.n	80084e0 <__ssvfiscanf_r+0xf0>
 8008500:	a101      	add	r1, pc, #4	; (adr r1, 8008508 <__ssvfiscanf_r+0x118>)
 8008502:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008506:	bf00      	nop
 8008508:	080085bb 	.word	0x080085bb
 800850c:	080084e1 	.word	0x080084e1
 8008510:	080084e1 	.word	0x080084e1
 8008514:	08008619 	.word	0x08008619
 8008518:	080084e1 	.word	0x080084e1
 800851c:	080084e1 	.word	0x080084e1
 8008520:	080084e1 	.word	0x080084e1
 8008524:	080084e1 	.word	0x080084e1
 8008528:	080084e1 	.word	0x080084e1
 800852c:	080084e1 	.word	0x080084e1
 8008530:	080084e1 	.word	0x080084e1
 8008534:	0800862f 	.word	0x0800862f
 8008538:	08008605 	.word	0x08008605
 800853c:	08008593 	.word	0x08008593
 8008540:	08008593 	.word	0x08008593
 8008544:	08008593 	.word	0x08008593
 8008548:	080084e1 	.word	0x080084e1
 800854c:	08008609 	.word	0x08008609
 8008550:	080084e1 	.word	0x080084e1
 8008554:	080084e1 	.word	0x080084e1
 8008558:	080084e1 	.word	0x080084e1
 800855c:	080084e1 	.word	0x080084e1
 8008560:	0800863f 	.word	0x0800863f
 8008564:	08008611 	.word	0x08008611
 8008568:	080085b3 	.word	0x080085b3
 800856c:	080084e1 	.word	0x080084e1
 8008570:	080084e1 	.word	0x080084e1
 8008574:	0800863b 	.word	0x0800863b
 8008578:	080084e1 	.word	0x080084e1
 800857c:	08008605 	.word	0x08008605
 8008580:	080084e1 	.word	0x080084e1
 8008584:	080084e1 	.word	0x080084e1
 8008588:	080085bb 	.word	0x080085bb
 800858c:	3b45      	subs	r3, #69	; 0x45
 800858e:	2b02      	cmp	r3, #2
 8008590:	d8a6      	bhi.n	80084e0 <__ssvfiscanf_r+0xf0>
 8008592:	2305      	movs	r3, #5
 8008594:	e01b      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 8008596:	4621      	mov	r1, r4
 8008598:	4630      	mov	r0, r6
 800859a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800859c:	4798      	blx	r3
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f af65 	beq.w	800846e <__ssvfiscanf_r+0x7e>
 80085a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 808d 	bne.w	80086c6 <__ssvfiscanf_r+0x2d6>
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	e08f      	b.n	80086d2 <__ssvfiscanf_r+0x2e2>
 80085b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80085b4:	f042 0220 	orr.w	r2, r2, #32
 80085b8:	9241      	str	r2, [sp, #260]	; 0x104
 80085ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80085bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c0:	9241      	str	r2, [sp, #260]	; 0x104
 80085c2:	2210      	movs	r2, #16
 80085c4:	2b6f      	cmp	r3, #111	; 0x6f
 80085c6:	bf34      	ite	cc
 80085c8:	2303      	movcc	r3, #3
 80085ca:	2304      	movcs	r3, #4
 80085cc:	9242      	str	r2, [sp, #264]	; 0x108
 80085ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dd42      	ble.n	800865c <__ssvfiscanf_r+0x26c>
 80085d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085d8:	0659      	lsls	r1, r3, #25
 80085da:	d404      	bmi.n	80085e6 <__ssvfiscanf_r+0x1f6>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	5cba      	ldrb	r2, [r7, r2]
 80085e2:	0712      	lsls	r2, r2, #28
 80085e4:	d441      	bmi.n	800866a <__ssvfiscanf_r+0x27a>
 80085e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	dc50      	bgt.n	800868e <__ssvfiscanf_r+0x29e>
 80085ec:	466b      	mov	r3, sp
 80085ee:	4622      	mov	r2, r4
 80085f0:	4630      	mov	r0, r6
 80085f2:	a941      	add	r1, sp, #260	; 0x104
 80085f4:	f000 fa0c 	bl	8008a10 <_scanf_chars>
 80085f8:	2801      	cmp	r0, #1
 80085fa:	d06e      	beq.n	80086da <__ssvfiscanf_r+0x2ea>
 80085fc:	2802      	cmp	r0, #2
 80085fe:	f47f af1d 	bne.w	800843c <__ssvfiscanf_r+0x4c>
 8008602:	e7cf      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 8008604:	220a      	movs	r2, #10
 8008606:	e7dd      	b.n	80085c4 <__ssvfiscanf_r+0x1d4>
 8008608:	2300      	movs	r3, #0
 800860a:	9342      	str	r3, [sp, #264]	; 0x108
 800860c:	2303      	movs	r3, #3
 800860e:	e7de      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 8008610:	2308      	movs	r3, #8
 8008612:	9342      	str	r3, [sp, #264]	; 0x108
 8008614:	2304      	movs	r3, #4
 8008616:	e7da      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 8008618:	4629      	mov	r1, r5
 800861a:	4640      	mov	r0, r8
 800861c:	f000 fb4a 	bl	8008cb4 <__sccl>
 8008620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008622:	4605      	mov	r5, r0
 8008624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008628:	9341      	str	r3, [sp, #260]	; 0x104
 800862a:	2301      	movs	r3, #1
 800862c:	e7cf      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 800862e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008634:	9341      	str	r3, [sp, #260]	; 0x104
 8008636:	2300      	movs	r3, #0
 8008638:	e7c9      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 800863a:	2302      	movs	r3, #2
 800863c:	e7c7      	b.n	80085ce <__ssvfiscanf_r+0x1de>
 800863e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008640:	06c3      	lsls	r3, r0, #27
 8008642:	f53f aefb 	bmi.w	800843c <__ssvfiscanf_r+0x4c>
 8008646:	9b00      	ldr	r3, [sp, #0]
 8008648:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800864a:	1d19      	adds	r1, r3, #4
 800864c:	9100      	str	r1, [sp, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f010 0f01 	tst.w	r0, #1
 8008654:	bf14      	ite	ne
 8008656:	801a      	strhne	r2, [r3, #0]
 8008658:	601a      	streq	r2, [r3, #0]
 800865a:	e6ef      	b.n	800843c <__ssvfiscanf_r+0x4c>
 800865c:	4621      	mov	r1, r4
 800865e:	4630      	mov	r0, r6
 8008660:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008662:	4798      	blx	r3
 8008664:	2800      	cmp	r0, #0
 8008666:	d0b6      	beq.n	80085d6 <__ssvfiscanf_r+0x1e6>
 8008668:	e79c      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 800866a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800866c:	3201      	adds	r2, #1
 800866e:	9245      	str	r2, [sp, #276]	; 0x114
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	3a01      	subs	r2, #1
 8008674:	2a00      	cmp	r2, #0
 8008676:	6062      	str	r2, [r4, #4]
 8008678:	dd02      	ble.n	8008680 <__ssvfiscanf_r+0x290>
 800867a:	3301      	adds	r3, #1
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	e7ad      	b.n	80085dc <__ssvfiscanf_r+0x1ec>
 8008680:	4621      	mov	r1, r4
 8008682:	4630      	mov	r0, r6
 8008684:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008686:	4798      	blx	r3
 8008688:	2800      	cmp	r0, #0
 800868a:	d0a7      	beq.n	80085dc <__ssvfiscanf_r+0x1ec>
 800868c:	e78a      	b.n	80085a4 <__ssvfiscanf_r+0x1b4>
 800868e:	2b04      	cmp	r3, #4
 8008690:	dc0e      	bgt.n	80086b0 <__ssvfiscanf_r+0x2c0>
 8008692:	466b      	mov	r3, sp
 8008694:	4622      	mov	r2, r4
 8008696:	4630      	mov	r0, r6
 8008698:	a941      	add	r1, sp, #260	; 0x104
 800869a:	f000 fa13 	bl	8008ac4 <_scanf_i>
 800869e:	e7ab      	b.n	80085f8 <__ssvfiscanf_r+0x208>
 80086a0:	0800833d 	.word	0x0800833d
 80086a4:	080083b7 	.word	0x080083b7
 80086a8:	08009387 	.word	0x08009387
 80086ac:	0800933e 	.word	0x0800933e
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <__ssvfiscanf_r+0x2f0>)
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f43f aec2 	beq.w	800843c <__ssvfiscanf_r+0x4c>
 80086b8:	466b      	mov	r3, sp
 80086ba:	4622      	mov	r2, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	a941      	add	r1, sp, #260	; 0x104
 80086c0:	f3af 8000 	nop.w
 80086c4:	e798      	b.n	80085f8 <__ssvfiscanf_r+0x208>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80086cc:	bf18      	it	ne
 80086ce:	f04f 30ff 	movne.w	r0, #4294967295
 80086d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80086dc:	e7f9      	b.n	80086d2 <__ssvfiscanf_r+0x2e2>
 80086de:	bf00      	nop
 80086e0:	00000000 	.word	0x00000000

080086e4 <_printf_common>:
 80086e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e8:	4616      	mov	r6, r2
 80086ea:	4699      	mov	r9, r3
 80086ec:	688a      	ldr	r2, [r1, #8]
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4607      	mov	r7, r0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bfb8      	it	lt
 80086f6:	4613      	movlt	r3, r2
 80086f8:	6033      	str	r3, [r6, #0]
 80086fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086fe:	460c      	mov	r4, r1
 8008700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008704:	b10a      	cbz	r2, 800870a <_printf_common+0x26>
 8008706:	3301      	adds	r3, #1
 8008708:	6033      	str	r3, [r6, #0]
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	0699      	lsls	r1, r3, #26
 800870e:	bf42      	ittt	mi
 8008710:	6833      	ldrmi	r3, [r6, #0]
 8008712:	3302      	addmi	r3, #2
 8008714:	6033      	strmi	r3, [r6, #0]
 8008716:	6825      	ldr	r5, [r4, #0]
 8008718:	f015 0506 	ands.w	r5, r5, #6
 800871c:	d106      	bne.n	800872c <_printf_common+0x48>
 800871e:	f104 0a19 	add.w	sl, r4, #25
 8008722:	68e3      	ldr	r3, [r4, #12]
 8008724:	6832      	ldr	r2, [r6, #0]
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	42ab      	cmp	r3, r5
 800872a:	dc28      	bgt.n	800877e <_printf_common+0x9a>
 800872c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008730:	1e13      	subs	r3, r2, #0
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	bf18      	it	ne
 8008736:	2301      	movne	r3, #1
 8008738:	0692      	lsls	r2, r2, #26
 800873a:	d42d      	bmi.n	8008798 <_printf_common+0xb4>
 800873c:	4649      	mov	r1, r9
 800873e:	4638      	mov	r0, r7
 8008740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008744:	47c0      	blx	r8
 8008746:	3001      	adds	r0, #1
 8008748:	d020      	beq.n	800878c <_printf_common+0xa8>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	68e5      	ldr	r5, [r4, #12]
 800874e:	f003 0306 	and.w	r3, r3, #6
 8008752:	2b04      	cmp	r3, #4
 8008754:	bf18      	it	ne
 8008756:	2500      	movne	r5, #0
 8008758:	6832      	ldr	r2, [r6, #0]
 800875a:	f04f 0600 	mov.w	r6, #0
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	bf08      	it	eq
 8008762:	1aad      	subeq	r5, r5, r2
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	bf08      	it	eq
 8008768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800876c:	4293      	cmp	r3, r2
 800876e:	bfc4      	itt	gt
 8008770:	1a9b      	subgt	r3, r3, r2
 8008772:	18ed      	addgt	r5, r5, r3
 8008774:	341a      	adds	r4, #26
 8008776:	42b5      	cmp	r5, r6
 8008778:	d11a      	bne.n	80087b0 <_printf_common+0xcc>
 800877a:	2000      	movs	r0, #0
 800877c:	e008      	b.n	8008790 <_printf_common+0xac>
 800877e:	2301      	movs	r3, #1
 8008780:	4652      	mov	r2, sl
 8008782:	4649      	mov	r1, r9
 8008784:	4638      	mov	r0, r7
 8008786:	47c0      	blx	r8
 8008788:	3001      	adds	r0, #1
 800878a:	d103      	bne.n	8008794 <_printf_common+0xb0>
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	3501      	adds	r5, #1
 8008796:	e7c4      	b.n	8008722 <_printf_common+0x3e>
 8008798:	2030      	movs	r0, #48	; 0x30
 800879a:	18e1      	adds	r1, r4, r3
 800879c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087a6:	4422      	add	r2, r4
 80087a8:	3302      	adds	r3, #2
 80087aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087ae:	e7c5      	b.n	800873c <_printf_common+0x58>
 80087b0:	2301      	movs	r3, #1
 80087b2:	4622      	mov	r2, r4
 80087b4:	4649      	mov	r1, r9
 80087b6:	4638      	mov	r0, r7
 80087b8:	47c0      	blx	r8
 80087ba:	3001      	adds	r0, #1
 80087bc:	d0e6      	beq.n	800878c <_printf_common+0xa8>
 80087be:	3601      	adds	r6, #1
 80087c0:	e7d9      	b.n	8008776 <_printf_common+0x92>
	...

080087c4 <_printf_i>:
 80087c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	7e0f      	ldrb	r7, [r1, #24]
 80087ca:	4691      	mov	r9, r2
 80087cc:	2f78      	cmp	r7, #120	; 0x78
 80087ce:	4680      	mov	r8, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	469a      	mov	sl, r3
 80087d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087da:	d807      	bhi.n	80087ec <_printf_i+0x28>
 80087dc:	2f62      	cmp	r7, #98	; 0x62
 80087de:	d80a      	bhi.n	80087f6 <_printf_i+0x32>
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	f000 80d9 	beq.w	8008998 <_printf_i+0x1d4>
 80087e6:	2f58      	cmp	r7, #88	; 0x58
 80087e8:	f000 80a4 	beq.w	8008934 <_printf_i+0x170>
 80087ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087f4:	e03a      	b.n	800886c <_printf_i+0xa8>
 80087f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087fa:	2b15      	cmp	r3, #21
 80087fc:	d8f6      	bhi.n	80087ec <_printf_i+0x28>
 80087fe:	a101      	add	r1, pc, #4	; (adr r1, 8008804 <_printf_i+0x40>)
 8008800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008804:	0800885d 	.word	0x0800885d
 8008808:	08008871 	.word	0x08008871
 800880c:	080087ed 	.word	0x080087ed
 8008810:	080087ed 	.word	0x080087ed
 8008814:	080087ed 	.word	0x080087ed
 8008818:	080087ed 	.word	0x080087ed
 800881c:	08008871 	.word	0x08008871
 8008820:	080087ed 	.word	0x080087ed
 8008824:	080087ed 	.word	0x080087ed
 8008828:	080087ed 	.word	0x080087ed
 800882c:	080087ed 	.word	0x080087ed
 8008830:	0800897f 	.word	0x0800897f
 8008834:	080088a1 	.word	0x080088a1
 8008838:	08008961 	.word	0x08008961
 800883c:	080087ed 	.word	0x080087ed
 8008840:	080087ed 	.word	0x080087ed
 8008844:	080089a1 	.word	0x080089a1
 8008848:	080087ed 	.word	0x080087ed
 800884c:	080088a1 	.word	0x080088a1
 8008850:	080087ed 	.word	0x080087ed
 8008854:	080087ed 	.word	0x080087ed
 8008858:	08008969 	.word	0x08008969
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	602a      	str	r2, [r5, #0]
 8008864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800886c:	2301      	movs	r3, #1
 800886e:	e0a4      	b.n	80089ba <_printf_i+0x1f6>
 8008870:	6820      	ldr	r0, [r4, #0]
 8008872:	6829      	ldr	r1, [r5, #0]
 8008874:	0606      	lsls	r6, r0, #24
 8008876:	f101 0304 	add.w	r3, r1, #4
 800887a:	d50a      	bpl.n	8008892 <_printf_i+0xce>
 800887c:	680e      	ldr	r6, [r1, #0]
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	2e00      	cmp	r6, #0
 8008882:	da03      	bge.n	800888c <_printf_i+0xc8>
 8008884:	232d      	movs	r3, #45	; 0x2d
 8008886:	4276      	negs	r6, r6
 8008888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800888c:	230a      	movs	r3, #10
 800888e:	485e      	ldr	r0, [pc, #376]	; (8008a08 <_printf_i+0x244>)
 8008890:	e019      	b.n	80088c6 <_printf_i+0x102>
 8008892:	680e      	ldr	r6, [r1, #0]
 8008894:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	bf18      	it	ne
 800889c:	b236      	sxthne	r6, r6
 800889e:	e7ef      	b.n	8008880 <_printf_i+0xbc>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	1d19      	adds	r1, r3, #4
 80088a6:	6029      	str	r1, [r5, #0]
 80088a8:	0601      	lsls	r1, r0, #24
 80088aa:	d501      	bpl.n	80088b0 <_printf_i+0xec>
 80088ac:	681e      	ldr	r6, [r3, #0]
 80088ae:	e002      	b.n	80088b6 <_printf_i+0xf2>
 80088b0:	0646      	lsls	r6, r0, #25
 80088b2:	d5fb      	bpl.n	80088ac <_printf_i+0xe8>
 80088b4:	881e      	ldrh	r6, [r3, #0]
 80088b6:	2f6f      	cmp	r7, #111	; 0x6f
 80088b8:	bf0c      	ite	eq
 80088ba:	2308      	moveq	r3, #8
 80088bc:	230a      	movne	r3, #10
 80088be:	4852      	ldr	r0, [pc, #328]	; (8008a08 <_printf_i+0x244>)
 80088c0:	2100      	movs	r1, #0
 80088c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088c6:	6865      	ldr	r5, [r4, #4]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	bfa8      	it	ge
 80088cc:	6821      	ldrge	r1, [r4, #0]
 80088ce:	60a5      	str	r5, [r4, #8]
 80088d0:	bfa4      	itt	ge
 80088d2:	f021 0104 	bicge.w	r1, r1, #4
 80088d6:	6021      	strge	r1, [r4, #0]
 80088d8:	b90e      	cbnz	r6, 80088de <_printf_i+0x11a>
 80088da:	2d00      	cmp	r5, #0
 80088dc:	d04d      	beq.n	800897a <_printf_i+0x1b6>
 80088de:	4615      	mov	r5, r2
 80088e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80088e4:	fb03 6711 	mls	r7, r3, r1, r6
 80088e8:	5dc7      	ldrb	r7, [r0, r7]
 80088ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088ee:	4637      	mov	r7, r6
 80088f0:	42bb      	cmp	r3, r7
 80088f2:	460e      	mov	r6, r1
 80088f4:	d9f4      	bls.n	80088e0 <_printf_i+0x11c>
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d10b      	bne.n	8008912 <_printf_i+0x14e>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	07de      	lsls	r6, r3, #31
 80088fe:	d508      	bpl.n	8008912 <_printf_i+0x14e>
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	6861      	ldr	r1, [r4, #4]
 8008904:	4299      	cmp	r1, r3
 8008906:	bfde      	ittt	le
 8008908:	2330      	movle	r3, #48	; 0x30
 800890a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800890e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008912:	1b52      	subs	r2, r2, r5
 8008914:	6122      	str	r2, [r4, #16]
 8008916:	464b      	mov	r3, r9
 8008918:	4621      	mov	r1, r4
 800891a:	4640      	mov	r0, r8
 800891c:	f8cd a000 	str.w	sl, [sp]
 8008920:	aa03      	add	r2, sp, #12
 8008922:	f7ff fedf 	bl	80086e4 <_printf_common>
 8008926:	3001      	adds	r0, #1
 8008928:	d14c      	bne.n	80089c4 <_printf_i+0x200>
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	b004      	add	sp, #16
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	4834      	ldr	r0, [pc, #208]	; (8008a08 <_printf_i+0x244>)
 8008936:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800893a:	6829      	ldr	r1, [r5, #0]
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008942:	6029      	str	r1, [r5, #0]
 8008944:	061d      	lsls	r5, r3, #24
 8008946:	d514      	bpl.n	8008972 <_printf_i+0x1ae>
 8008948:	07df      	lsls	r7, r3, #31
 800894a:	bf44      	itt	mi
 800894c:	f043 0320 	orrmi.w	r3, r3, #32
 8008950:	6023      	strmi	r3, [r4, #0]
 8008952:	b91e      	cbnz	r6, 800895c <_printf_i+0x198>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	f023 0320 	bic.w	r3, r3, #32
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	2310      	movs	r3, #16
 800895e:	e7af      	b.n	80088c0 <_printf_i+0xfc>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	f043 0320 	orr.w	r3, r3, #32
 8008966:	6023      	str	r3, [r4, #0]
 8008968:	2378      	movs	r3, #120	; 0x78
 800896a:	4828      	ldr	r0, [pc, #160]	; (8008a0c <_printf_i+0x248>)
 800896c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008970:	e7e3      	b.n	800893a <_printf_i+0x176>
 8008972:	0659      	lsls	r1, r3, #25
 8008974:	bf48      	it	mi
 8008976:	b2b6      	uxthmi	r6, r6
 8008978:	e7e6      	b.n	8008948 <_printf_i+0x184>
 800897a:	4615      	mov	r5, r2
 800897c:	e7bb      	b.n	80088f6 <_printf_i+0x132>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	6826      	ldr	r6, [r4, #0]
 8008982:	1d18      	adds	r0, r3, #4
 8008984:	6961      	ldr	r1, [r4, #20]
 8008986:	6028      	str	r0, [r5, #0]
 8008988:	0635      	lsls	r5, r6, #24
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	d501      	bpl.n	8008992 <_printf_i+0x1ce>
 800898e:	6019      	str	r1, [r3, #0]
 8008990:	e002      	b.n	8008998 <_printf_i+0x1d4>
 8008992:	0670      	lsls	r0, r6, #25
 8008994:	d5fb      	bpl.n	800898e <_printf_i+0x1ca>
 8008996:	8019      	strh	r1, [r3, #0]
 8008998:	2300      	movs	r3, #0
 800899a:	4615      	mov	r5, r2
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	e7ba      	b.n	8008916 <_printf_i+0x152>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	2100      	movs	r1, #0
 80089a4:	1d1a      	adds	r2, r3, #4
 80089a6:	602a      	str	r2, [r5, #0]
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 fae3 	bl	8008f78 <memchr>
 80089b2:	b108      	cbz	r0, 80089b8 <_printf_i+0x1f4>
 80089b4:	1b40      	subs	r0, r0, r5
 80089b6:	6060      	str	r0, [r4, #4]
 80089b8:	6863      	ldr	r3, [r4, #4]
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	2300      	movs	r3, #0
 80089be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c2:	e7a8      	b.n	8008916 <_printf_i+0x152>
 80089c4:	462a      	mov	r2, r5
 80089c6:	4649      	mov	r1, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	47d0      	blx	sl
 80089ce:	3001      	adds	r0, #1
 80089d0:	d0ab      	beq.n	800892a <_printf_i+0x166>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	079b      	lsls	r3, r3, #30
 80089d6:	d413      	bmi.n	8008a00 <_printf_i+0x23c>
 80089d8:	68e0      	ldr	r0, [r4, #12]
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	4298      	cmp	r0, r3
 80089de:	bfb8      	it	lt
 80089e0:	4618      	movlt	r0, r3
 80089e2:	e7a4      	b.n	800892e <_printf_i+0x16a>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4632      	mov	r2, r6
 80089e8:	4649      	mov	r1, r9
 80089ea:	4640      	mov	r0, r8
 80089ec:	47d0      	blx	sl
 80089ee:	3001      	adds	r0, #1
 80089f0:	d09b      	beq.n	800892a <_printf_i+0x166>
 80089f2:	3501      	adds	r5, #1
 80089f4:	68e3      	ldr	r3, [r4, #12]
 80089f6:	9903      	ldr	r1, [sp, #12]
 80089f8:	1a5b      	subs	r3, r3, r1
 80089fa:	42ab      	cmp	r3, r5
 80089fc:	dcf2      	bgt.n	80089e4 <_printf_i+0x220>
 80089fe:	e7eb      	b.n	80089d8 <_printf_i+0x214>
 8008a00:	2500      	movs	r5, #0
 8008a02:	f104 0619 	add.w	r6, r4, #25
 8008a06:	e7f5      	b.n	80089f4 <_printf_i+0x230>
 8008a08:	08009349 	.word	0x08009349
 8008a0c:	0800935a 	.word	0x0800935a

08008a10 <_scanf_chars>:
 8008a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a14:	4615      	mov	r5, r2
 8008a16:	688a      	ldr	r2, [r1, #8]
 8008a18:	4680      	mov	r8, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b932      	cbnz	r2, 8008a2c <_scanf_chars+0x1c>
 8008a1e:	698a      	ldr	r2, [r1, #24]
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	bf0c      	ite	eq
 8008a24:	2201      	moveq	r2, #1
 8008a26:	f04f 32ff 	movne.w	r2, #4294967295
 8008a2a:	608a      	str	r2, [r1, #8]
 8008a2c:	2700      	movs	r7, #0
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ac0 <_scanf_chars+0xb0>
 8008a34:	06d1      	lsls	r1, r2, #27
 8008a36:	bf5f      	itttt	pl
 8008a38:	681a      	ldrpl	r2, [r3, #0]
 8008a3a:	1d11      	addpl	r1, r2, #4
 8008a3c:	6019      	strpl	r1, [r3, #0]
 8008a3e:	6816      	ldrpl	r6, [r2, #0]
 8008a40:	69a0      	ldr	r0, [r4, #24]
 8008a42:	b188      	cbz	r0, 8008a68 <_scanf_chars+0x58>
 8008a44:	2801      	cmp	r0, #1
 8008a46:	d107      	bne.n	8008a58 <_scanf_chars+0x48>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	6963      	ldr	r3, [r4, #20]
 8008a4e:	5c9b      	ldrb	r3, [r3, r2]
 8008a50:	b953      	cbnz	r3, 8008a68 <_scanf_chars+0x58>
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d031      	beq.n	8008aba <_scanf_chars+0xaa>
 8008a56:	e022      	b.n	8008a9e <_scanf_chars+0x8e>
 8008a58:	2802      	cmp	r0, #2
 8008a5a:	d120      	bne.n	8008a9e <_scanf_chars+0x8e>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008a64:	071b      	lsls	r3, r3, #28
 8008a66:	d41a      	bmi.n	8008a9e <_scanf_chars+0x8e>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	3701      	adds	r7, #1
 8008a6c:	06da      	lsls	r2, r3, #27
 8008a6e:	bf5e      	ittt	pl
 8008a70:	682b      	ldrpl	r3, [r5, #0]
 8008a72:	781b      	ldrbpl	r3, [r3, #0]
 8008a74:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a78:	682a      	ldr	r2, [r5, #0]
 8008a7a:	686b      	ldr	r3, [r5, #4]
 8008a7c:	3201      	adds	r2, #1
 8008a7e:	602a      	str	r2, [r5, #0]
 8008a80:	68a2      	ldr	r2, [r4, #8]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	3a01      	subs	r2, #1
 8008a86:	606b      	str	r3, [r5, #4]
 8008a88:	60a2      	str	r2, [r4, #8]
 8008a8a:	b142      	cbz	r2, 8008a9e <_scanf_chars+0x8e>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dcd7      	bgt.n	8008a40 <_scanf_chars+0x30>
 8008a90:	4629      	mov	r1, r5
 8008a92:	4640      	mov	r0, r8
 8008a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a98:	4798      	blx	r3
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d0d0      	beq.n	8008a40 <_scanf_chars+0x30>
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	f013 0310 	ands.w	r3, r3, #16
 8008aa4:	d105      	bne.n	8008ab2 <_scanf_chars+0xa2>
 8008aa6:	68e2      	ldr	r2, [r4, #12]
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	60e2      	str	r2, [r4, #12]
 8008aac:	69a2      	ldr	r2, [r4, #24]
 8008aae:	b102      	cbz	r2, 8008ab2 <_scanf_chars+0xa2>
 8008ab0:	7033      	strb	r3, [r6, #0]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	443b      	add	r3, r7
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008abe:	bf00      	nop
 8008ac0:	08009387 	.word	0x08009387

08008ac4 <_scanf_i>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4698      	mov	r8, r3
 8008acc:	4b75      	ldr	r3, [pc, #468]	; (8008ca4 <_scanf_i+0x1e0>)
 8008ace:	b087      	sub	sp, #28
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	4616      	mov	r6, r2
 8008ad4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ad8:	ab03      	add	r3, sp, #12
 8008ada:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ade:	4b72      	ldr	r3, [pc, #456]	; (8008ca8 <_scanf_i+0x1e4>)
 8008ae0:	69a1      	ldr	r1, [r4, #24]
 8008ae2:	4a72      	ldr	r2, [pc, #456]	; (8008cac <_scanf_i+0x1e8>)
 8008ae4:	4627      	mov	r7, r4
 8008ae6:	2903      	cmp	r1, #3
 8008ae8:	bf18      	it	ne
 8008aea:	461a      	movne	r2, r3
 8008aec:	68a3      	ldr	r3, [r4, #8]
 8008aee:	9201      	str	r2, [sp, #4]
 8008af0:	1e5a      	subs	r2, r3, #1
 8008af2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008af6:	bf81      	itttt	hi
 8008af8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008afc:	eb03 0905 	addhi.w	r9, r3, r5
 8008b00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b04:	60a3      	strhi	r3, [r4, #8]
 8008b06:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008b0a:	bf98      	it	ls
 8008b0c:	f04f 0900 	movls.w	r9, #0
 8008b10:	463d      	mov	r5, r7
 8008b12:	f04f 0b00 	mov.w	fp, #0
 8008b16:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	6831      	ldr	r1, [r6, #0]
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	2202      	movs	r2, #2
 8008b22:	7809      	ldrb	r1, [r1, #0]
 8008b24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008b28:	f000 fa26 	bl	8008f78 <memchr>
 8008b2c:	b328      	cbz	r0, 8008b7a <_scanf_i+0xb6>
 8008b2e:	f1bb 0f01 	cmp.w	fp, #1
 8008b32:	d159      	bne.n	8008be8 <_scanf_i+0x124>
 8008b34:	6862      	ldr	r2, [r4, #4]
 8008b36:	b92a      	cbnz	r2, 8008b44 <_scanf_i+0x80>
 8008b38:	2308      	movs	r3, #8
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	6822      	ldr	r2, [r4, #0]
 8008b46:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	68a2      	ldr	r2, [r4, #8]
 8008b4e:	1e51      	subs	r1, r2, #1
 8008b50:	60a1      	str	r1, [r4, #8]
 8008b52:	b192      	cbz	r2, 8008b7a <_scanf_i+0xb6>
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1c51      	adds	r1, r2, #1
 8008b58:	6031      	str	r1, [r6, #0]
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	f805 2b01 	strb.w	r2, [r5], #1
 8008b60:	6872      	ldr	r2, [r6, #4]
 8008b62:	3a01      	subs	r2, #1
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	6072      	str	r2, [r6, #4]
 8008b68:	dc07      	bgt.n	8008b7a <_scanf_i+0xb6>
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008b72:	4790      	blx	r2
 8008b74:	2800      	cmp	r0, #0
 8008b76:	f040 8085 	bne.w	8008c84 <_scanf_i+0x1c0>
 8008b7a:	f10b 0b01 	add.w	fp, fp, #1
 8008b7e:	f1bb 0f03 	cmp.w	fp, #3
 8008b82:	d1cb      	bne.n	8008b1c <_scanf_i+0x58>
 8008b84:	6863      	ldr	r3, [r4, #4]
 8008b86:	b90b      	cbnz	r3, 8008b8c <_scanf_i+0xc8>
 8008b88:	230a      	movs	r3, #10
 8008b8a:	6063      	str	r3, [r4, #4]
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	4948      	ldr	r1, [pc, #288]	; (8008cb0 <_scanf_i+0x1ec>)
 8008b90:	6960      	ldr	r0, [r4, #20]
 8008b92:	1ac9      	subs	r1, r1, r3
 8008b94:	f000 f88e 	bl	8008cb4 <__sccl>
 8008b98:	f04f 0b00 	mov.w	fp, #0
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d03d      	beq.n	8008c20 <_scanf_i+0x15c>
 8008ba4:	6831      	ldr	r1, [r6, #0]
 8008ba6:	6960      	ldr	r0, [r4, #20]
 8008ba8:	f891 c000 	ldrb.w	ip, [r1]
 8008bac:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d035      	beq.n	8008c20 <_scanf_i+0x15c>
 8008bb4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008bb8:	d124      	bne.n	8008c04 <_scanf_i+0x140>
 8008bba:	0510      	lsls	r0, r2, #20
 8008bbc:	d522      	bpl.n	8008c04 <_scanf_i+0x140>
 8008bbe:	f10b 0b01 	add.w	fp, fp, #1
 8008bc2:	f1b9 0f00 	cmp.w	r9, #0
 8008bc6:	d003      	beq.n	8008bd0 <_scanf_i+0x10c>
 8008bc8:	3301      	adds	r3, #1
 8008bca:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bce:	60a3      	str	r3, [r4, #8]
 8008bd0:	6873      	ldr	r3, [r6, #4]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	6073      	str	r3, [r6, #4]
 8008bd8:	dd1b      	ble.n	8008c12 <_scanf_i+0x14e>
 8008bda:	6833      	ldr	r3, [r6, #0]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	68a3      	ldr	r3, [r4, #8]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	60a3      	str	r3, [r4, #8]
 8008be6:	e7d9      	b.n	8008b9c <_scanf_i+0xd8>
 8008be8:	f1bb 0f02 	cmp.w	fp, #2
 8008bec:	d1ae      	bne.n	8008b4c <_scanf_i+0x88>
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008bf4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008bf8:	d1bf      	bne.n	8008b7a <_scanf_i+0xb6>
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c00:	6063      	str	r3, [r4, #4]
 8008c02:	e7a2      	b.n	8008b4a <_scanf_i+0x86>
 8008c04:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008c08:	6022      	str	r2, [r4, #0]
 8008c0a:	780b      	ldrb	r3, [r1, #0]
 8008c0c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c10:	e7de      	b.n	8008bd0 <_scanf_i+0x10c>
 8008c12:	4631      	mov	r1, r6
 8008c14:	4650      	mov	r0, sl
 8008c16:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c1a:	4798      	blx	r3
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0df      	beq.n	8008be0 <_scanf_i+0x11c>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	05db      	lsls	r3, r3, #23
 8008c24:	d50d      	bpl.n	8008c42 <_scanf_i+0x17e>
 8008c26:	42bd      	cmp	r5, r7
 8008c28:	d909      	bls.n	8008c3e <_scanf_i+0x17a>
 8008c2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c2e:	4632      	mov	r2, r6
 8008c30:	4650      	mov	r0, sl
 8008c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c36:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c3a:	4798      	blx	r3
 8008c3c:	464d      	mov	r5, r9
 8008c3e:	42bd      	cmp	r5, r7
 8008c40:	d02d      	beq.n	8008c9e <_scanf_i+0x1da>
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	f012 0210 	ands.w	r2, r2, #16
 8008c48:	d113      	bne.n	8008c72 <_scanf_i+0x1ae>
 8008c4a:	702a      	strb	r2, [r5, #0]
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	6863      	ldr	r3, [r4, #4]
 8008c50:	4650      	mov	r0, sl
 8008c52:	9e01      	ldr	r6, [sp, #4]
 8008c54:	47b0      	blx	r6
 8008c56:	6821      	ldr	r1, [r4, #0]
 8008c58:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5c:	f011 0f20 	tst.w	r1, #32
 8008c60:	d013      	beq.n	8008c8a <_scanf_i+0x1c6>
 8008c62:	1d1a      	adds	r2, r3, #4
 8008c64:	f8c8 2000 	str.w	r2, [r8]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6018      	str	r0, [r3, #0]
 8008c6c:	68e3      	ldr	r3, [r4, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60e3      	str	r3, [r4, #12]
 8008c72:	2000      	movs	r0, #0
 8008c74:	1bed      	subs	r5, r5, r7
 8008c76:	44ab      	add	fp, r5
 8008c78:	6925      	ldr	r5, [r4, #16]
 8008c7a:	445d      	add	r5, fp
 8008c7c:	6125      	str	r5, [r4, #16]
 8008c7e:	b007      	add	sp, #28
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c84:	f04f 0b00 	mov.w	fp, #0
 8008c88:	e7ca      	b.n	8008c20 <_scanf_i+0x15c>
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	f8c8 2000 	str.w	r2, [r8]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f011 0f01 	tst.w	r1, #1
 8008c96:	bf14      	ite	ne
 8008c98:	8018      	strhne	r0, [r3, #0]
 8008c9a:	6018      	streq	r0, [r3, #0]
 8008c9c:	e7e6      	b.n	8008c6c <_scanf_i+0x1a8>
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e7ed      	b.n	8008c7e <_scanf_i+0x1ba>
 8008ca2:	bf00      	nop
 8008ca4:	08009258 	.word	0x08009258
 8008ca8:	08008f05 	.word	0x08008f05
 8008cac:	08008e1d 	.word	0x08008e1d
 8008cb0:	08009384 	.word	0x08009384

08008cb4 <__sccl>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	780b      	ldrb	r3, [r1, #0]
 8008cb8:	4604      	mov	r4, r0
 8008cba:	2b5e      	cmp	r3, #94	; 0x5e
 8008cbc:	bf13      	iteet	ne
 8008cbe:	2200      	movne	r2, #0
 8008cc0:	2201      	moveq	r2, #1
 8008cc2:	784b      	ldrbeq	r3, [r1, #1]
 8008cc4:	1c48      	addne	r0, r1, #1
 8008cc6:	bf08      	it	eq
 8008cc8:	1c88      	addeq	r0, r1, #2
 8008cca:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008cce:	1e61      	subs	r1, r4, #1
 8008cd0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008cd4:	42a9      	cmp	r1, r5
 8008cd6:	d1fb      	bne.n	8008cd0 <__sccl+0x1c>
 8008cd8:	b90b      	cbnz	r3, 8008cde <__sccl+0x2a>
 8008cda:	3801      	subs	r0, #1
 8008cdc:	bd70      	pop	{r4, r5, r6, pc}
 8008cde:	f082 0201 	eor.w	r2, r2, #1
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	54e2      	strb	r2, [r4, r3]
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008cec:	292d      	cmp	r1, #45	; 0x2d
 8008cee:	d006      	beq.n	8008cfe <__sccl+0x4a>
 8008cf0:	295d      	cmp	r1, #93	; 0x5d
 8008cf2:	d0f3      	beq.n	8008cdc <__sccl+0x28>
 8008cf4:	b909      	cbnz	r1, 8008cfa <__sccl+0x46>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	e7f0      	b.n	8008cdc <__sccl+0x28>
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	e7f1      	b.n	8008ce2 <__sccl+0x2e>
 8008cfe:	786e      	ldrb	r6, [r5, #1]
 8008d00:	2e5d      	cmp	r6, #93	; 0x5d
 8008d02:	d0fa      	beq.n	8008cfa <__sccl+0x46>
 8008d04:	42b3      	cmp	r3, r6
 8008d06:	dcf8      	bgt.n	8008cfa <__sccl+0x46>
 8008d08:	4619      	mov	r1, r3
 8008d0a:	3502      	adds	r5, #2
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	428e      	cmp	r6, r1
 8008d10:	5462      	strb	r2, [r4, r1]
 8008d12:	dcfb      	bgt.n	8008d0c <__sccl+0x58>
 8008d14:	1af1      	subs	r1, r6, r3
 8008d16:	3901      	subs	r1, #1
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	bfa8      	it	ge
 8008d1c:	2100      	movge	r1, #0
 8008d1e:	1c58      	adds	r0, r3, #1
 8008d20:	1843      	adds	r3, r0, r1
 8008d22:	e7e0      	b.n	8008ce6 <__sccl+0x32>

08008d24 <_strtol_l.constprop.0>:
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	d001      	beq.n	8008d32 <_strtol_l.constprop.0+0xe>
 8008d2e:	2b24      	cmp	r3, #36	; 0x24
 8008d30:	d906      	bls.n	8008d40 <_strtol_l.constprop.0+0x1c>
 8008d32:	f7fe ffa3 	bl	8007c7c <__errno>
 8008d36:	2316      	movs	r3, #22
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d40:	460d      	mov	r5, r1
 8008d42:	4f35      	ldr	r7, [pc, #212]	; (8008e18 <_strtol_l.constprop.0+0xf4>)
 8008d44:	4628      	mov	r0, r5
 8008d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d4a:	5de6      	ldrb	r6, [r4, r7]
 8008d4c:	f016 0608 	ands.w	r6, r6, #8
 8008d50:	d1f8      	bne.n	8008d44 <_strtol_l.constprop.0+0x20>
 8008d52:	2c2d      	cmp	r4, #45	; 0x2d
 8008d54:	d12f      	bne.n	8008db6 <_strtol_l.constprop.0+0x92>
 8008d56:	2601      	movs	r6, #1
 8008d58:	782c      	ldrb	r4, [r5, #0]
 8008d5a:	1c85      	adds	r5, r0, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d057      	beq.n	8008e10 <_strtol_l.constprop.0+0xec>
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d109      	bne.n	8008d78 <_strtol_l.constprop.0+0x54>
 8008d64:	2c30      	cmp	r4, #48	; 0x30
 8008d66:	d107      	bne.n	8008d78 <_strtol_l.constprop.0+0x54>
 8008d68:	7828      	ldrb	r0, [r5, #0]
 8008d6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008d6e:	2858      	cmp	r0, #88	; 0x58
 8008d70:	d149      	bne.n	8008e06 <_strtol_l.constprop.0+0xe2>
 8008d72:	2310      	movs	r3, #16
 8008d74:	786c      	ldrb	r4, [r5, #1]
 8008d76:	3502      	adds	r5, #2
 8008d78:	2700      	movs	r7, #0
 8008d7a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008d7e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008d82:	fbbe f9f3 	udiv	r9, lr, r3
 8008d86:	4638      	mov	r0, r7
 8008d88:	fb03 ea19 	mls	sl, r3, r9, lr
 8008d8c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008d90:	f1bc 0f09 	cmp.w	ip, #9
 8008d94:	d814      	bhi.n	8008dc0 <_strtol_l.constprop.0+0x9c>
 8008d96:	4664      	mov	r4, ip
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	dd22      	ble.n	8008de2 <_strtol_l.constprop.0+0xbe>
 8008d9c:	2f00      	cmp	r7, #0
 8008d9e:	db1d      	blt.n	8008ddc <_strtol_l.constprop.0+0xb8>
 8008da0:	4581      	cmp	r9, r0
 8008da2:	d31b      	bcc.n	8008ddc <_strtol_l.constprop.0+0xb8>
 8008da4:	d101      	bne.n	8008daa <_strtol_l.constprop.0+0x86>
 8008da6:	45a2      	cmp	sl, r4
 8008da8:	db18      	blt.n	8008ddc <_strtol_l.constprop.0+0xb8>
 8008daa:	2701      	movs	r7, #1
 8008dac:	fb00 4003 	mla	r0, r0, r3, r4
 8008db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008db4:	e7ea      	b.n	8008d8c <_strtol_l.constprop.0+0x68>
 8008db6:	2c2b      	cmp	r4, #43	; 0x2b
 8008db8:	bf04      	itt	eq
 8008dba:	782c      	ldrbeq	r4, [r5, #0]
 8008dbc:	1c85      	addeq	r5, r0, #2
 8008dbe:	e7cd      	b.n	8008d5c <_strtol_l.constprop.0+0x38>
 8008dc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008dc4:	f1bc 0f19 	cmp.w	ip, #25
 8008dc8:	d801      	bhi.n	8008dce <_strtol_l.constprop.0+0xaa>
 8008dca:	3c37      	subs	r4, #55	; 0x37
 8008dcc:	e7e4      	b.n	8008d98 <_strtol_l.constprop.0+0x74>
 8008dce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008dd2:	f1bc 0f19 	cmp.w	ip, #25
 8008dd6:	d804      	bhi.n	8008de2 <_strtol_l.constprop.0+0xbe>
 8008dd8:	3c57      	subs	r4, #87	; 0x57
 8008dda:	e7dd      	b.n	8008d98 <_strtol_l.constprop.0+0x74>
 8008ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8008de0:	e7e6      	b.n	8008db0 <_strtol_l.constprop.0+0x8c>
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	da07      	bge.n	8008df6 <_strtol_l.constprop.0+0xd2>
 8008de6:	2322      	movs	r3, #34	; 0x22
 8008de8:	4670      	mov	r0, lr
 8008dea:	f8c8 3000 	str.w	r3, [r8]
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	d0a4      	beq.n	8008d3c <_strtol_l.constprop.0+0x18>
 8008df2:	1e69      	subs	r1, r5, #1
 8008df4:	e005      	b.n	8008e02 <_strtol_l.constprop.0+0xde>
 8008df6:	b106      	cbz	r6, 8008dfa <_strtol_l.constprop.0+0xd6>
 8008df8:	4240      	negs	r0, r0
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	d09e      	beq.n	8008d3c <_strtol_l.constprop.0+0x18>
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d1f7      	bne.n	8008df2 <_strtol_l.constprop.0+0xce>
 8008e02:	6011      	str	r1, [r2, #0]
 8008e04:	e79a      	b.n	8008d3c <_strtol_l.constprop.0+0x18>
 8008e06:	2430      	movs	r4, #48	; 0x30
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1b5      	bne.n	8008d78 <_strtol_l.constprop.0+0x54>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	e7b3      	b.n	8008d78 <_strtol_l.constprop.0+0x54>
 8008e10:	2c30      	cmp	r4, #48	; 0x30
 8008e12:	d0a9      	beq.n	8008d68 <_strtol_l.constprop.0+0x44>
 8008e14:	230a      	movs	r3, #10
 8008e16:	e7af      	b.n	8008d78 <_strtol_l.constprop.0+0x54>
 8008e18:	08009387 	.word	0x08009387

08008e1c <_strtol_r>:
 8008e1c:	f7ff bf82 	b.w	8008d24 <_strtol_l.constprop.0>

08008e20 <_strtoul_l.constprop.0>:
 8008e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4686      	mov	lr, r0
 8008e26:	460d      	mov	r5, r1
 8008e28:	4f35      	ldr	r7, [pc, #212]	; (8008f00 <_strtoul_l.constprop.0+0xe0>)
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e30:	5de6      	ldrb	r6, [r4, r7]
 8008e32:	f016 0608 	ands.w	r6, r6, #8
 8008e36:	d1f8      	bne.n	8008e2a <_strtoul_l.constprop.0+0xa>
 8008e38:	2c2d      	cmp	r4, #45	; 0x2d
 8008e3a:	d12f      	bne.n	8008e9c <_strtoul_l.constprop.0+0x7c>
 8008e3c:	2601      	movs	r6, #1
 8008e3e:	782c      	ldrb	r4, [r5, #0]
 8008e40:	1c85      	adds	r5, r0, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d057      	beq.n	8008ef6 <_strtoul_l.constprop.0+0xd6>
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d109      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008e4a:	2c30      	cmp	r4, #48	; 0x30
 8008e4c:	d107      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008e4e:	7828      	ldrb	r0, [r5, #0]
 8008e50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008e54:	2858      	cmp	r0, #88	; 0x58
 8008e56:	d149      	bne.n	8008eec <_strtoul_l.constprop.0+0xcc>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	786c      	ldrb	r4, [r5, #1]
 8008e5c:	3502      	adds	r5, #2
 8008e5e:	f04f 38ff 	mov.w	r8, #4294967295
 8008e62:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e66:	2700      	movs	r7, #0
 8008e68:	fb03 f908 	mul.w	r9, r3, r8
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	ea6f 0909 	mvn.w	r9, r9
 8008e72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e76:	f1bc 0f09 	cmp.w	ip, #9
 8008e7a:	d814      	bhi.n	8008ea6 <_strtoul_l.constprop.0+0x86>
 8008e7c:	4664      	mov	r4, ip
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	dd22      	ble.n	8008ec8 <_strtoul_l.constprop.0+0xa8>
 8008e82:	2f00      	cmp	r7, #0
 8008e84:	db1d      	blt.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e86:	4580      	cmp	r8, r0
 8008e88:	d31b      	bcc.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e8a:	d101      	bne.n	8008e90 <_strtoul_l.constprop.0+0x70>
 8008e8c:	45a1      	cmp	r9, r4
 8008e8e:	db18      	blt.n	8008ec2 <_strtoul_l.constprop.0+0xa2>
 8008e90:	2701      	movs	r7, #1
 8008e92:	fb00 4003 	mla	r0, r0, r3, r4
 8008e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e9a:	e7ea      	b.n	8008e72 <_strtoul_l.constprop.0+0x52>
 8008e9c:	2c2b      	cmp	r4, #43	; 0x2b
 8008e9e:	bf04      	itt	eq
 8008ea0:	782c      	ldrbeq	r4, [r5, #0]
 8008ea2:	1c85      	addeq	r5, r0, #2
 8008ea4:	e7cd      	b.n	8008e42 <_strtoul_l.constprop.0+0x22>
 8008ea6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008eaa:	f1bc 0f19 	cmp.w	ip, #25
 8008eae:	d801      	bhi.n	8008eb4 <_strtoul_l.constprop.0+0x94>
 8008eb0:	3c37      	subs	r4, #55	; 0x37
 8008eb2:	e7e4      	b.n	8008e7e <_strtoul_l.constprop.0+0x5e>
 8008eb4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008eb8:	f1bc 0f19 	cmp.w	ip, #25
 8008ebc:	d804      	bhi.n	8008ec8 <_strtoul_l.constprop.0+0xa8>
 8008ebe:	3c57      	subs	r4, #87	; 0x57
 8008ec0:	e7dd      	b.n	8008e7e <_strtoul_l.constprop.0+0x5e>
 8008ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec6:	e7e6      	b.n	8008e96 <_strtoul_l.constprop.0+0x76>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	da07      	bge.n	8008edc <_strtoul_l.constprop.0+0xbc>
 8008ecc:	2322      	movs	r3, #34	; 0x22
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	f8ce 3000 	str.w	r3, [lr]
 8008ed6:	b932      	cbnz	r2, 8008ee6 <_strtoul_l.constprop.0+0xc6>
 8008ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008edc:	b106      	cbz	r6, 8008ee0 <_strtoul_l.constprop.0+0xc0>
 8008ede:	4240      	negs	r0, r0
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d0f9      	beq.n	8008ed8 <_strtoul_l.constprop.0+0xb8>
 8008ee4:	b107      	cbz	r7, 8008ee8 <_strtoul_l.constprop.0+0xc8>
 8008ee6:	1e69      	subs	r1, r5, #1
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	e7f5      	b.n	8008ed8 <_strtoul_l.constprop.0+0xb8>
 8008eec:	2430      	movs	r4, #48	; 0x30
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1b5      	bne.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	e7b3      	b.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008ef6:	2c30      	cmp	r4, #48	; 0x30
 8008ef8:	d0a9      	beq.n	8008e4e <_strtoul_l.constprop.0+0x2e>
 8008efa:	230a      	movs	r3, #10
 8008efc:	e7af      	b.n	8008e5e <_strtoul_l.constprop.0+0x3e>
 8008efe:	bf00      	nop
 8008f00:	08009387 	.word	0x08009387

08008f04 <_strtoul_r>:
 8008f04:	f7ff bf8c 	b.w	8008e20 <_strtoul_l.constprop.0>

08008f08 <__submore>:
 8008f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d11b      	bne.n	8008f50 <__submore+0x48>
 8008f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f1c:	f7fe ff10 	bl	8007d40 <_malloc_r>
 8008f20:	b918      	cbnz	r0, 8008f2a <__submore+0x22>
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295
 8008f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008f34:	6360      	str	r0, [r4, #52]	; 0x34
 8008f36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008f42:	7043      	strb	r3, [r0, #1]
 8008f44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f48:	7003      	strb	r3, [r0, #0]
 8008f4a:	6020      	str	r0, [r4, #0]
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e7ea      	b.n	8008f26 <__submore+0x1e>
 8008f50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f52:	0077      	lsls	r7, r6, #1
 8008f54:	463a      	mov	r2, r7
 8008f56:	f000 f837 	bl	8008fc8 <_realloc_r>
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d0e0      	beq.n	8008f22 <__submore+0x1a>
 8008f60:	eb00 0806 	add.w	r8, r0, r6
 8008f64:	4601      	mov	r1, r0
 8008f66:	4632      	mov	r2, r6
 8008f68:	4640      	mov	r0, r8
 8008f6a:	f7fe feb3 	bl	8007cd4 <memcpy>
 8008f6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008f72:	f8c4 8000 	str.w	r8, [r4]
 8008f76:	e7e9      	b.n	8008f4c <__submore+0x44>

08008f78 <memchr>:
 8008f78:	4603      	mov	r3, r0
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	b2c9      	uxtb	r1, r1
 8008f7e:	4402      	add	r2, r0
 8008f80:	4293      	cmp	r3, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	d101      	bne.n	8008f8a <memchr+0x12>
 8008f86:	2000      	movs	r0, #0
 8008f88:	e003      	b.n	8008f92 <memchr+0x1a>
 8008f8a:	7804      	ldrb	r4, [r0, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	428c      	cmp	r4, r1
 8008f90:	d1f6      	bne.n	8008f80 <memchr+0x8>
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <memmove>:
 8008f94:	4288      	cmp	r0, r1
 8008f96:	b510      	push	{r4, lr}
 8008f98:	eb01 0402 	add.w	r4, r1, r2
 8008f9c:	d902      	bls.n	8008fa4 <memmove+0x10>
 8008f9e:	4284      	cmp	r4, r0
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	d807      	bhi.n	8008fb4 <memmove+0x20>
 8008fa4:	1e43      	subs	r3, r0, #1
 8008fa6:	42a1      	cmp	r1, r4
 8008fa8:	d008      	beq.n	8008fbc <memmove+0x28>
 8008faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fb2:	e7f8      	b.n	8008fa6 <memmove+0x12>
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	4402      	add	r2, r0
 8008fb8:	428a      	cmp	r2, r1
 8008fba:	d100      	bne.n	8008fbe <memmove+0x2a>
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fc6:	e7f7      	b.n	8008fb8 <memmove+0x24>

08008fc8 <_realloc_r>:
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	4680      	mov	r8, r0
 8008fce:	4614      	mov	r4, r2
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	b921      	cbnz	r1, 8008fde <_realloc_r+0x16>
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f7fe beb1 	b.w	8007d40 <_malloc_r>
 8008fde:	b92a      	cbnz	r2, 8008fec <_realloc_r+0x24>
 8008fe0:	f7ff f808 	bl	8007ff4 <_free_r>
 8008fe4:	4625      	mov	r5, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fec:	f000 f81b 	bl	8009026 <_malloc_usable_size_r>
 8008ff0:	4284      	cmp	r4, r0
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	d802      	bhi.n	8008ffc <_realloc_r+0x34>
 8008ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ffa:	d812      	bhi.n	8009022 <_realloc_r+0x5a>
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4640      	mov	r0, r8
 8009000:	f7fe fe9e 	bl	8007d40 <_malloc_r>
 8009004:	4605      	mov	r5, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	d0ed      	beq.n	8008fe6 <_realloc_r+0x1e>
 800900a:	42bc      	cmp	r4, r7
 800900c:	4622      	mov	r2, r4
 800900e:	4631      	mov	r1, r6
 8009010:	bf28      	it	cs
 8009012:	463a      	movcs	r2, r7
 8009014:	f7fe fe5e 	bl	8007cd4 <memcpy>
 8009018:	4631      	mov	r1, r6
 800901a:	4640      	mov	r0, r8
 800901c:	f7fe ffea 	bl	8007ff4 <_free_r>
 8009020:	e7e1      	b.n	8008fe6 <_realloc_r+0x1e>
 8009022:	4635      	mov	r5, r6
 8009024:	e7df      	b.n	8008fe6 <_realloc_r+0x1e>

08009026 <_malloc_usable_size_r>:
 8009026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902a:	1f18      	subs	r0, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfbc      	itt	lt
 8009030:	580b      	ldrlt	r3, [r1, r0]
 8009032:	18c0      	addlt	r0, r0, r3
 8009034:	4770      	bx	lr
	...

08009038 <_init>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	bf00      	nop
 800903c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903e:	bc08      	pop	{r3}
 8009040:	469e      	mov	lr, r3
 8009042:	4770      	bx	lr

08009044 <_fini>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr
